/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"

#import "EDAMLimits.h"

#import "EDAMTypes.h"

static NSString * EDAMCLASSIFICATION_RECIPE_USER_NON_RECIPE = @"000";
static NSString * EDAMCLASSIFICATION_RECIPE_USER_RECIPE = @"001";
static NSString * EDAMCLASSIFICATION_RECIPE_SERVICE_RECIPE = @"002";
static NSString * EDAMEDAM_NOTE_SOURCE_WEB_CLIP = @"web.clip";
static NSString * EDAMEDAM_NOTE_SOURCE_MAIL_CLIP = @"mail.clip";
static NSString * EDAMEDAM_NOTE_SOURCE_MAIL_SMTP_GATEWAY = @"mail.smtp";

@implementation EDAMTypesConstants
+ (void) initialize {
}
+ (NSString *) CLASSIFICATION_RECIPE_USER_NON_RECIPE{
  return EDAMCLASSIFICATION_RECIPE_USER_NON_RECIPE;
}
+ (NSString *) CLASSIFICATION_RECIPE_USER_RECIPE{
  return EDAMCLASSIFICATION_RECIPE_USER_RECIPE;
}
+ (NSString *) CLASSIFICATION_RECIPE_SERVICE_RECIPE{
  return EDAMCLASSIFICATION_RECIPE_SERVICE_RECIPE;
}
+ (NSString *) EDAM_NOTE_SOURCE_WEB_CLIP{
  return EDAMEDAM_NOTE_SOURCE_WEB_CLIP;
}
+ (NSString *) EDAM_NOTE_SOURCE_MAIL_CLIP{
  return EDAMEDAM_NOTE_SOURCE_MAIL_CLIP;
}
+ (NSString *) EDAM_NOTE_SOURCE_MAIL_SMTP_GATEWAY{
  return EDAMEDAM_NOTE_SOURCE_MAIL_SMTP_GATEWAY;
}
@end

@implementation EDAMData

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithBodyHash: (NSData *) bodyHash size: (int32_t) size body: (NSData *) body
{
  self = [super init];
  __bodyHash = [bodyHash retain_stub];
  __bodyHash_isset = YES;
  __size = size;
  __size_isset = YES;
  __body = [body retain_stub];
  __body_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"bodyHash"])
  {
    __bodyHash = [[decoder decodeObjectForKey: @"bodyHash"] retain_stub];
    __bodyHash_isset = YES;
  }
  if ([decoder containsValueForKey: @"size"])
  {
    __size = [decoder decodeInt32ForKey: @"size"];
    __size_isset = YES;
  }
  if ([decoder containsValueForKey: @"body"])
  {
    __body = [[decoder decodeObjectForKey: @"body"] retain_stub];
    __body_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__bodyHash_isset)
  {
    [encoder encodeObject: __bodyHash forKey: @"bodyHash"];
  }
  if (__size_isset)
  {
    [encoder encodeInt32: __size forKey: @"size"];
  }
  if (__body_isset)
  {
    [encoder encodeObject: __body forKey: @"body"];
  }
}

- (void) dealloc
{
  [__bodyHash release_stub];
  [__body release_stub];
  [super dealloc_stub];
}

- (NSData *) bodyHash {
  return [[__bodyHash retain_stub] autorelease_stub];
}

- (void) setBodyHash: (NSData *) bodyHash {
  [bodyHash retain_stub];
  [__bodyHash release_stub];
  __bodyHash = bodyHash;
  __bodyHash_isset = YES;
}

- (BOOL) bodyHashIsSet {
  return __bodyHash_isset;
}

- (void) unsetBodyHash {
  [__bodyHash release_stub];
  __bodyHash = nil;
  __bodyHash_isset = NO;
}

- (int32_t) size {
  return __size;
}

- (void) setSize: (int32_t) size {
  __size = size;
  __size_isset = YES;
}

- (BOOL) sizeIsSet {
  return __size_isset;
}

- (void) unsetSize {
  __size_isset = NO;
}

- (NSData *) body {
  return [[__body retain_stub] autorelease_stub];
}

- (void) setBody: (NSData *) body {
  [body retain_stub];
  [__body release_stub];
  __body = body;
  __body_isset = YES;
}

- (BOOL) bodyIsSet {
  return __body_isset;
}

- (void) unsetBody {
  [__body release_stub];
  __body = nil;
  __body_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setBodyHash: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSize: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setBody: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Data"];
  if (__bodyHash_isset) {
    if (__bodyHash != nil) {
      [outProtocol writeFieldBeginWithName: @"bodyHash" type: TType_STRING fieldID: 1];
      [outProtocol writeBinary: __bodyHash];
      [outProtocol writeFieldEnd];
    }
  }
  if (__size_isset) {
    [outProtocol writeFieldBeginWithName: @"size" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __size];
    [outProtocol writeFieldEnd];
  }
  if (__body_isset) {
    if (__body != nil) {
      [outProtocol writeFieldBeginWithName: @"body" type: TType_STRING fieldID: 3];
      [outProtocol writeBinary: __body];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Data("];
  [ms appendString: @"bodyHash:"];
  [ms appendFormat: @"\"%@\"", __bodyHash];
  [ms appendString: @",size:"];
  [ms appendFormat: @"%i", __size];
  [ms appendString: @",body:"];
  [ms appendFormat: @"\"%@\"", __body];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation EDAMUserAttributes

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDefaultLocationName: (NSString *) defaultLocationName defaultLatitude: (double) defaultLatitude defaultLongitude: (double) defaultLongitude preactivation: (BOOL) preactivation viewedPromotions: (NSMutableArray *) viewedPromotions incomingEmailAddress: (NSString *) incomingEmailAddress recentMailedAddresses: (NSMutableArray *) recentMailedAddresses comments: (NSString *) comments dateAgreedToTermsOfService: (EDAMTimestamp) dateAgreedToTermsOfService maxReferrals: (int32_t) maxReferrals referralCount: (int32_t) referralCount refererCode: (NSString *) refererCode sentEmailDate: (EDAMTimestamp) sentEmailDate sentEmailCount: (int32_t) sentEmailCount dailyEmailLimit: (int32_t) dailyEmailLimit emailOptOutDate: (EDAMTimestamp) emailOptOutDate partnerEmailOptInDate: (EDAMTimestamp) partnerEmailOptInDate preferredLanguage: (NSString *) preferredLanguage preferredCountry: (NSString *) preferredCountry clipFullPage: (BOOL) clipFullPage twitterUserName: (NSString *) twitterUserName twitterId: (NSString *) twitterId groupName: (NSString *) groupName recognitionLanguage: (NSString *) recognitionLanguage referralProof: (NSString *) referralProof educationalDiscount: (BOOL) educationalDiscount businessAddress: (NSString *) businessAddress hideSponsorBilling: (BOOL) hideSponsorBilling taxExempt: (BOOL) taxExempt useEmailAutoFiling: (BOOL) useEmailAutoFiling reminderEmailConfig: (int) reminderEmailConfig
{
  self = [super init];
  __defaultLocationName = [defaultLocationName retain_stub];
  __defaultLocationName_isset = YES;
  __defaultLatitude = defaultLatitude;
  __defaultLatitude_isset = YES;
  __defaultLongitude = defaultLongitude;
  __defaultLongitude_isset = YES;
  __preactivation = preactivation;
  __preactivation_isset = YES;
  __viewedPromotions = [viewedPromotions retain_stub];
  __viewedPromotions_isset = YES;
  __incomingEmailAddress = [incomingEmailAddress retain_stub];
  __incomingEmailAddress_isset = YES;
  __recentMailedAddresses = [recentMailedAddresses retain_stub];
  __recentMailedAddresses_isset = YES;
  __comments = [comments retain_stub];
  __comments_isset = YES;
  __dateAgreedToTermsOfService = dateAgreedToTermsOfService;
  __dateAgreedToTermsOfService_isset = YES;
  __maxReferrals = maxReferrals;
  __maxReferrals_isset = YES;
  __referralCount = referralCount;
  __referralCount_isset = YES;
  __refererCode = [refererCode retain_stub];
  __refererCode_isset = YES;
  __sentEmailDate = sentEmailDate;
  __sentEmailDate_isset = YES;
  __sentEmailCount = sentEmailCount;
  __sentEmailCount_isset = YES;
  __dailyEmailLimit = dailyEmailLimit;
  __dailyEmailLimit_isset = YES;
  __emailOptOutDate = emailOptOutDate;
  __emailOptOutDate_isset = YES;
  __partnerEmailOptInDate = partnerEmailOptInDate;
  __partnerEmailOptInDate_isset = YES;
  __preferredLanguage = [preferredLanguage retain_stub];
  __preferredLanguage_isset = YES;
  __preferredCountry = [preferredCountry retain_stub];
  __preferredCountry_isset = YES;
  __clipFullPage = clipFullPage;
  __clipFullPage_isset = YES;
  __twitterUserName = [twitterUserName retain_stub];
  __twitterUserName_isset = YES;
  __twitterId = [twitterId retain_stub];
  __twitterId_isset = YES;
  __groupName = [groupName retain_stub];
  __groupName_isset = YES;
  __recognitionLanguage = [recognitionLanguage retain_stub];
  __recognitionLanguage_isset = YES;
  __referralProof = [referralProof retain_stub];
  __referralProof_isset = YES;
  __educationalDiscount = educationalDiscount;
  __educationalDiscount_isset = YES;
  __businessAddress = [businessAddress retain_stub];
  __businessAddress_isset = YES;
  __hideSponsorBilling = hideSponsorBilling;
  __hideSponsorBilling_isset = YES;
  __taxExempt = taxExempt;
  __taxExempt_isset = YES;
  __useEmailAutoFiling = useEmailAutoFiling;
  __useEmailAutoFiling_isset = YES;
  __reminderEmailConfig = reminderEmailConfig;
  __reminderEmailConfig_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"defaultLocationName"])
  {
    __defaultLocationName = [[decoder decodeObjectForKey: @"defaultLocationName"] retain_stub];
    __defaultLocationName_isset = YES;
  }
  if ([decoder containsValueForKey: @"defaultLatitude"])
  {
    __defaultLatitude = [decoder decodeDoubleForKey: @"defaultLatitude"];
    __defaultLatitude_isset = YES;
  }
  if ([decoder containsValueForKey: @"defaultLongitude"])
  {
    __defaultLongitude = [decoder decodeDoubleForKey: @"defaultLongitude"];
    __defaultLongitude_isset = YES;
  }
  if ([decoder containsValueForKey: @"preactivation"])
  {
    __preactivation = [decoder decodeBoolForKey: @"preactivation"];
    __preactivation_isset = YES;
  }
  if ([decoder containsValueForKey: @"viewedPromotions"])
  {
    __viewedPromotions = [[decoder decodeObjectForKey: @"viewedPromotions"] retain_stub];
    __viewedPromotions_isset = YES;
  }
  if ([decoder containsValueForKey: @"incomingEmailAddress"])
  {
    __incomingEmailAddress = [[decoder decodeObjectForKey: @"incomingEmailAddress"] retain_stub];
    __incomingEmailAddress_isset = YES;
  }
  if ([decoder containsValueForKey: @"recentMailedAddresses"])
  {
    __recentMailedAddresses = [[decoder decodeObjectForKey: @"recentMailedAddresses"] retain_stub];
    __recentMailedAddresses_isset = YES;
  }
  if ([decoder containsValueForKey: @"comments"])
  {
    __comments = [[decoder decodeObjectForKey: @"comments"] retain_stub];
    __comments_isset = YES;
  }
  if ([decoder containsValueForKey: @"dateAgreedToTermsOfService"])
  {
    __dateAgreedToTermsOfService = [decoder decodeInt64ForKey: @"dateAgreedToTermsOfService"];
    __dateAgreedToTermsOfService_isset = YES;
  }
  if ([decoder containsValueForKey: @"maxReferrals"])
  {
    __maxReferrals = [decoder decodeInt32ForKey: @"maxReferrals"];
    __maxReferrals_isset = YES;
  }
  if ([decoder containsValueForKey: @"referralCount"])
  {
    __referralCount = [decoder decodeInt32ForKey: @"referralCount"];
    __referralCount_isset = YES;
  }
  if ([decoder containsValueForKey: @"refererCode"])
  {
    __refererCode = [[decoder decodeObjectForKey: @"refererCode"] retain_stub];
    __refererCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"sentEmailDate"])
  {
    __sentEmailDate = [decoder decodeInt64ForKey: @"sentEmailDate"];
    __sentEmailDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"sentEmailCount"])
  {
    __sentEmailCount = [decoder decodeInt32ForKey: @"sentEmailCount"];
    __sentEmailCount_isset = YES;
  }
  if ([decoder containsValueForKey: @"dailyEmailLimit"])
  {
    __dailyEmailLimit = [decoder decodeInt32ForKey: @"dailyEmailLimit"];
    __dailyEmailLimit_isset = YES;
  }
  if ([decoder containsValueForKey: @"emailOptOutDate"])
  {
    __emailOptOutDate = [decoder decodeInt64ForKey: @"emailOptOutDate"];
    __emailOptOutDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"partnerEmailOptInDate"])
  {
    __partnerEmailOptInDate = [decoder decodeInt64ForKey: @"partnerEmailOptInDate"];
    __partnerEmailOptInDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"preferredLanguage"])
  {
    __preferredLanguage = [[decoder decodeObjectForKey: @"preferredLanguage"] retain_stub];
    __preferredLanguage_isset = YES;
  }
  if ([decoder containsValueForKey: @"preferredCountry"])
  {
    __preferredCountry = [[decoder decodeObjectForKey: @"preferredCountry"] retain_stub];
    __preferredCountry_isset = YES;
  }
  if ([decoder containsValueForKey: @"clipFullPage"])
  {
    __clipFullPage = [decoder decodeBoolForKey: @"clipFullPage"];
    __clipFullPage_isset = YES;
  }
  if ([decoder containsValueForKey: @"twitterUserName"])
  {
    __twitterUserName = [[decoder decodeObjectForKey: @"twitterUserName"] retain_stub];
    __twitterUserName_isset = YES;
  }
  if ([decoder containsValueForKey: @"twitterId"])
  {
    __twitterId = [[decoder decodeObjectForKey: @"twitterId"] retain_stub];
    __twitterId_isset = YES;
  }
  if ([decoder containsValueForKey: @"groupName"])
  {
    __groupName = [[decoder decodeObjectForKey: @"groupName"] retain_stub];
    __groupName_isset = YES;
  }
  if ([decoder containsValueForKey: @"recognitionLanguage"])
  {
    __recognitionLanguage = [[decoder decodeObjectForKey: @"recognitionLanguage"] retain_stub];
    __recognitionLanguage_isset = YES;
  }
  if ([decoder containsValueForKey: @"referralProof"])
  {
    __referralProof = [[decoder decodeObjectForKey: @"referralProof"] retain_stub];
    __referralProof_isset = YES;
  }
  if ([decoder containsValueForKey: @"educationalDiscount"])
  {
    __educationalDiscount = [decoder decodeBoolForKey: @"educationalDiscount"];
    __educationalDiscount_isset = YES;
  }
  if ([decoder containsValueForKey: @"businessAddress"])
  {
    __businessAddress = [[decoder decodeObjectForKey: @"businessAddress"] retain_stub];
    __businessAddress_isset = YES;
  }
  if ([decoder containsValueForKey: @"hideSponsorBilling"])
  {
    __hideSponsorBilling = [decoder decodeBoolForKey: @"hideSponsorBilling"];
    __hideSponsorBilling_isset = YES;
  }
  if ([decoder containsValueForKey: @"taxExempt"])
  {
    __taxExempt = [decoder decodeBoolForKey: @"taxExempt"];
    __taxExempt_isset = YES;
  }
  if ([decoder containsValueForKey: @"useEmailAutoFiling"])
  {
    __useEmailAutoFiling = [decoder decodeBoolForKey: @"useEmailAutoFiling"];
    __useEmailAutoFiling_isset = YES;
  }
  if ([decoder containsValueForKey: @"reminderEmailConfig"])
  {
    __reminderEmailConfig = [decoder decodeIntForKey: @"reminderEmailConfig"];
    __reminderEmailConfig_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__defaultLocationName_isset)
  {
    [encoder encodeObject: __defaultLocationName forKey: @"defaultLocationName"];
  }
  if (__defaultLatitude_isset)
  {
    [encoder encodeDouble: __defaultLatitude forKey: @"defaultLatitude"];
  }
  if (__defaultLongitude_isset)
  {
    [encoder encodeDouble: __defaultLongitude forKey: @"defaultLongitude"];
  }
  if (__preactivation_isset)
  {
    [encoder encodeBool: __preactivation forKey: @"preactivation"];
  }
  if (__viewedPromotions_isset)
  {
    [encoder encodeObject: __viewedPromotions forKey: @"viewedPromotions"];
  }
  if (__incomingEmailAddress_isset)
  {
    [encoder encodeObject: __incomingEmailAddress forKey: @"incomingEmailAddress"];
  }
  if (__recentMailedAddresses_isset)
  {
    [encoder encodeObject: __recentMailedAddresses forKey: @"recentMailedAddresses"];
  }
  if (__comments_isset)
  {
    [encoder encodeObject: __comments forKey: @"comments"];
  }
  if (__dateAgreedToTermsOfService_isset)
  {
    [encoder encodeInt64: __dateAgreedToTermsOfService forKey: @"dateAgreedToTermsOfService"];
  }
  if (__maxReferrals_isset)
  {
    [encoder encodeInt32: __maxReferrals forKey: @"maxReferrals"];
  }
  if (__referralCount_isset)
  {
    [encoder encodeInt32: __referralCount forKey: @"referralCount"];
  }
  if (__refererCode_isset)
  {
    [encoder encodeObject: __refererCode forKey: @"refererCode"];
  }
  if (__sentEmailDate_isset)
  {
    [encoder encodeInt64: __sentEmailDate forKey: @"sentEmailDate"];
  }
  if (__sentEmailCount_isset)
  {
    [encoder encodeInt32: __sentEmailCount forKey: @"sentEmailCount"];
  }
  if (__dailyEmailLimit_isset)
  {
    [encoder encodeInt32: __dailyEmailLimit forKey: @"dailyEmailLimit"];
  }
  if (__emailOptOutDate_isset)
  {
    [encoder encodeInt64: __emailOptOutDate forKey: @"emailOptOutDate"];
  }
  if (__partnerEmailOptInDate_isset)
  {
    [encoder encodeInt64: __partnerEmailOptInDate forKey: @"partnerEmailOptInDate"];
  }
  if (__preferredLanguage_isset)
  {
    [encoder encodeObject: __preferredLanguage forKey: @"preferredLanguage"];
  }
  if (__preferredCountry_isset)
  {
    [encoder encodeObject: __preferredCountry forKey: @"preferredCountry"];
  }
  if (__clipFullPage_isset)
  {
    [encoder encodeBool: __clipFullPage forKey: @"clipFullPage"];
  }
  if (__twitterUserName_isset)
  {
    [encoder encodeObject: __twitterUserName forKey: @"twitterUserName"];
  }
  if (__twitterId_isset)
  {
    [encoder encodeObject: __twitterId forKey: @"twitterId"];
  }
  if (__groupName_isset)
  {
    [encoder encodeObject: __groupName forKey: @"groupName"];
  }
  if (__recognitionLanguage_isset)
  {
    [encoder encodeObject: __recognitionLanguage forKey: @"recognitionLanguage"];
  }
  if (__referralProof_isset)
  {
    [encoder encodeObject: __referralProof forKey: @"referralProof"];
  }
  if (__educationalDiscount_isset)
  {
    [encoder encodeBool: __educationalDiscount forKey: @"educationalDiscount"];
  }
  if (__businessAddress_isset)
  {
    [encoder encodeObject: __businessAddress forKey: @"businessAddress"];
  }
  if (__hideSponsorBilling_isset)
  {
    [encoder encodeBool: __hideSponsorBilling forKey: @"hideSponsorBilling"];
  }
  if (__taxExempt_isset)
  {
    [encoder encodeBool: __taxExempt forKey: @"taxExempt"];
  }
  if (__useEmailAutoFiling_isset)
  {
    [encoder encodeBool: __useEmailAutoFiling forKey: @"useEmailAutoFiling"];
  }
  if (__reminderEmailConfig_isset)
  {
    [encoder encodeInt: __reminderEmailConfig forKey: @"reminderEmailConfig"];
  }
}

- (void) dealloc
{
  [__defaultLocationName release_stub];
  [__viewedPromotions release_stub];
  [__incomingEmailAddress release_stub];
  [__recentMailedAddresses release_stub];
  [__comments release_stub];
  [__refererCode release_stub];
  [__preferredLanguage release_stub];
  [__preferredCountry release_stub];
  [__twitterUserName release_stub];
  [__twitterId release_stub];
  [__groupName release_stub];
  [__recognitionLanguage release_stub];
  [__referralProof release_stub];
  [__businessAddress release_stub];
  [super dealloc_stub];
}

- (NSString *) defaultLocationName {
  return [[__defaultLocationName retain_stub] autorelease_stub];
}

- (void) setDefaultLocationName: (NSString *) defaultLocationName {
  [defaultLocationName retain_stub];
  [__defaultLocationName release_stub];
  __defaultLocationName = defaultLocationName;
  __defaultLocationName_isset = YES;
}

- (BOOL) defaultLocationNameIsSet {
  return __defaultLocationName_isset;
}

- (void) unsetDefaultLocationName {
  [__defaultLocationName release_stub];
  __defaultLocationName = nil;
  __defaultLocationName_isset = NO;
}

- (double) defaultLatitude {
  return __defaultLatitude;
}

- (void) setDefaultLatitude: (double) defaultLatitude {
  __defaultLatitude = defaultLatitude;
  __defaultLatitude_isset = YES;
}

- (BOOL) defaultLatitudeIsSet {
  return __defaultLatitude_isset;
}

- (void) unsetDefaultLatitude {
  __defaultLatitude_isset = NO;
}

- (double) defaultLongitude {
  return __defaultLongitude;
}

- (void) setDefaultLongitude: (double) defaultLongitude {
  __defaultLongitude = defaultLongitude;
  __defaultLongitude_isset = YES;
}

- (BOOL) defaultLongitudeIsSet {
  return __defaultLongitude_isset;
}

- (void) unsetDefaultLongitude {
  __defaultLongitude_isset = NO;
}

- (BOOL) preactivation {
  return __preactivation;
}

- (void) setPreactivation: (BOOL) preactivation {
  __preactivation = preactivation;
  __preactivation_isset = YES;
}

- (BOOL) preactivationIsSet {
  return __preactivation_isset;
}

- (void) unsetPreactivation {
  __preactivation_isset = NO;
}

- (NSMutableArray *) viewedPromotions {
  return [[__viewedPromotions retain_stub] autorelease_stub];
}

- (void) setViewedPromotions: (NSMutableArray *) viewedPromotions {
  [viewedPromotions retain_stub];
  [__viewedPromotions release_stub];
  __viewedPromotions = viewedPromotions;
  __viewedPromotions_isset = YES;
}

- (BOOL) viewedPromotionsIsSet {
  return __viewedPromotions_isset;
}

- (void) unsetViewedPromotions {
  [__viewedPromotions release_stub];
  __viewedPromotions = nil;
  __viewedPromotions_isset = NO;
}

- (NSString *) incomingEmailAddress {
  return [[__incomingEmailAddress retain_stub] autorelease_stub];
}

- (void) setIncomingEmailAddress: (NSString *) incomingEmailAddress {
  [incomingEmailAddress retain_stub];
  [__incomingEmailAddress release_stub];
  __incomingEmailAddress = incomingEmailAddress;
  __incomingEmailAddress_isset = YES;
}

- (BOOL) incomingEmailAddressIsSet {
  return __incomingEmailAddress_isset;
}

- (void) unsetIncomingEmailAddress {
  [__incomingEmailAddress release_stub];
  __incomingEmailAddress = nil;
  __incomingEmailAddress_isset = NO;
}

- (NSMutableArray *) recentMailedAddresses {
  return [[__recentMailedAddresses retain_stub] autorelease_stub];
}

- (void) setRecentMailedAddresses: (NSMutableArray *) recentMailedAddresses {
  [recentMailedAddresses retain_stub];
  [__recentMailedAddresses release_stub];
  __recentMailedAddresses = recentMailedAddresses;
  __recentMailedAddresses_isset = YES;
}

- (BOOL) recentMailedAddressesIsSet {
  return __recentMailedAddresses_isset;
}

- (void) unsetRecentMailedAddresses {
  [__recentMailedAddresses release_stub];
  __recentMailedAddresses = nil;
  __recentMailedAddresses_isset = NO;
}

- (NSString *) comments {
  return [[__comments retain_stub] autorelease_stub];
}

- (void) setComments: (NSString *) comments {
  [comments retain_stub];
  [__comments release_stub];
  __comments = comments;
  __comments_isset = YES;
}

- (BOOL) commentsIsSet {
  return __comments_isset;
}

- (void) unsetComments {
  [__comments release_stub];
  __comments = nil;
  __comments_isset = NO;
}

- (int64_t) dateAgreedToTermsOfService {
  return __dateAgreedToTermsOfService;
}

- (void) setDateAgreedToTermsOfService: (int64_t) dateAgreedToTermsOfService {
  __dateAgreedToTermsOfService = dateAgreedToTermsOfService;
  __dateAgreedToTermsOfService_isset = YES;
}

- (BOOL) dateAgreedToTermsOfServiceIsSet {
  return __dateAgreedToTermsOfService_isset;
}

- (void) unsetDateAgreedToTermsOfService {
  __dateAgreedToTermsOfService_isset = NO;
}

- (int32_t) maxReferrals {
  return __maxReferrals;
}

- (void) setMaxReferrals: (int32_t) maxReferrals {
  __maxReferrals = maxReferrals;
  __maxReferrals_isset = YES;
}

- (BOOL) maxReferralsIsSet {
  return __maxReferrals_isset;
}

- (void) unsetMaxReferrals {
  __maxReferrals_isset = NO;
}

- (int32_t) referralCount {
  return __referralCount;
}

- (void) setReferralCount: (int32_t) referralCount {
  __referralCount = referralCount;
  __referralCount_isset = YES;
}

- (BOOL) referralCountIsSet {
  return __referralCount_isset;
}

- (void) unsetReferralCount {
  __referralCount_isset = NO;
}

- (NSString *) refererCode {
  return [[__refererCode retain_stub] autorelease_stub];
}

- (void) setRefererCode: (NSString *) refererCode {
  [refererCode retain_stub];
  [__refererCode release_stub];
  __refererCode = refererCode;
  __refererCode_isset = YES;
}

- (BOOL) refererCodeIsSet {
  return __refererCode_isset;
}

- (void) unsetRefererCode {
  [__refererCode release_stub];
  __refererCode = nil;
  __refererCode_isset = NO;
}

- (int64_t) sentEmailDate {
  return __sentEmailDate;
}

- (void) setSentEmailDate: (int64_t) sentEmailDate {
  __sentEmailDate = sentEmailDate;
  __sentEmailDate_isset = YES;
}

- (BOOL) sentEmailDateIsSet {
  return __sentEmailDate_isset;
}

- (void) unsetSentEmailDate {
  __sentEmailDate_isset = NO;
}

- (int32_t) sentEmailCount {
  return __sentEmailCount;
}

- (void) setSentEmailCount: (int32_t) sentEmailCount {
  __sentEmailCount = sentEmailCount;
  __sentEmailCount_isset = YES;
}

- (BOOL) sentEmailCountIsSet {
  return __sentEmailCount_isset;
}

- (void) unsetSentEmailCount {
  __sentEmailCount_isset = NO;
}

- (int32_t) dailyEmailLimit {
  return __dailyEmailLimit;
}

- (void) setDailyEmailLimit: (int32_t) dailyEmailLimit {
  __dailyEmailLimit = dailyEmailLimit;
  __dailyEmailLimit_isset = YES;
}

- (BOOL) dailyEmailLimitIsSet {
  return __dailyEmailLimit_isset;
}

- (void) unsetDailyEmailLimit {
  __dailyEmailLimit_isset = NO;
}

- (int64_t) emailOptOutDate {
  return __emailOptOutDate;
}

- (void) setEmailOptOutDate: (int64_t) emailOptOutDate {
  __emailOptOutDate = emailOptOutDate;
  __emailOptOutDate_isset = YES;
}

- (BOOL) emailOptOutDateIsSet {
  return __emailOptOutDate_isset;
}

- (void) unsetEmailOptOutDate {
  __emailOptOutDate_isset = NO;
}

- (int64_t) partnerEmailOptInDate {
  return __partnerEmailOptInDate;
}

- (void) setPartnerEmailOptInDate: (int64_t) partnerEmailOptInDate {
  __partnerEmailOptInDate = partnerEmailOptInDate;
  __partnerEmailOptInDate_isset = YES;
}

- (BOOL) partnerEmailOptInDateIsSet {
  return __partnerEmailOptInDate_isset;
}

- (void) unsetPartnerEmailOptInDate {
  __partnerEmailOptInDate_isset = NO;
}

- (NSString *) preferredLanguage {
  return [[__preferredLanguage retain_stub] autorelease_stub];
}

- (void) setPreferredLanguage: (NSString *) preferredLanguage {
  [preferredLanguage retain_stub];
  [__preferredLanguage release_stub];
  __preferredLanguage = preferredLanguage;
  __preferredLanguage_isset = YES;
}

- (BOOL) preferredLanguageIsSet {
  return __preferredLanguage_isset;
}

- (void) unsetPreferredLanguage {
  [__preferredLanguage release_stub];
  __preferredLanguage = nil;
  __preferredLanguage_isset = NO;
}

- (NSString *) preferredCountry {
  return [[__preferredCountry retain_stub] autorelease_stub];
}

- (void) setPreferredCountry: (NSString *) preferredCountry {
  [preferredCountry retain_stub];
  [__preferredCountry release_stub];
  __preferredCountry = preferredCountry;
  __preferredCountry_isset = YES;
}

- (BOOL) preferredCountryIsSet {
  return __preferredCountry_isset;
}

- (void) unsetPreferredCountry {
  [__preferredCountry release_stub];
  __preferredCountry = nil;
  __preferredCountry_isset = NO;
}

- (BOOL) clipFullPage {
  return __clipFullPage;
}

- (void) setClipFullPage: (BOOL) clipFullPage {
  __clipFullPage = clipFullPage;
  __clipFullPage_isset = YES;
}

- (BOOL) clipFullPageIsSet {
  return __clipFullPage_isset;
}

- (void) unsetClipFullPage {
  __clipFullPage_isset = NO;
}

- (NSString *) twitterUserName {
  return [[__twitterUserName retain_stub] autorelease_stub];
}

- (void) setTwitterUserName: (NSString *) twitterUserName {
  [twitterUserName retain_stub];
  [__twitterUserName release_stub];
  __twitterUserName = twitterUserName;
  __twitterUserName_isset = YES;
}

- (BOOL) twitterUserNameIsSet {
  return __twitterUserName_isset;
}

- (void) unsetTwitterUserName {
  [__twitterUserName release_stub];
  __twitterUserName = nil;
  __twitterUserName_isset = NO;
}

- (NSString *) twitterId {
  return [[__twitterId retain_stub] autorelease_stub];
}

- (void) setTwitterId: (NSString *) twitterId {
  [twitterId retain_stub];
  [__twitterId release_stub];
  __twitterId = twitterId;
  __twitterId_isset = YES;
}

- (BOOL) twitterIdIsSet {
  return __twitterId_isset;
}

- (void) unsetTwitterId {
  [__twitterId release_stub];
  __twitterId = nil;
  __twitterId_isset = NO;
}

- (NSString *) groupName {
  return [[__groupName retain_stub] autorelease_stub];
}

- (void) setGroupName: (NSString *) groupName {
  [groupName retain_stub];
  [__groupName release_stub];
  __groupName = groupName;
  __groupName_isset = YES;
}

- (BOOL) groupNameIsSet {
  return __groupName_isset;
}

- (void) unsetGroupName {
  [__groupName release_stub];
  __groupName = nil;
  __groupName_isset = NO;
}

- (NSString *) recognitionLanguage {
  return [[__recognitionLanguage retain_stub] autorelease_stub];
}

- (void) setRecognitionLanguage: (NSString *) recognitionLanguage {
  [recognitionLanguage retain_stub];
  [__recognitionLanguage release_stub];
  __recognitionLanguage = recognitionLanguage;
  __recognitionLanguage_isset = YES;
}

- (BOOL) recognitionLanguageIsSet {
  return __recognitionLanguage_isset;
}

- (void) unsetRecognitionLanguage {
  [__recognitionLanguage release_stub];
  __recognitionLanguage = nil;
  __recognitionLanguage_isset = NO;
}

- (NSString *) referralProof {
  return [[__referralProof retain_stub] autorelease_stub];
}

- (void) setReferralProof: (NSString *) referralProof {
  [referralProof retain_stub];
  [__referralProof release_stub];
  __referralProof = referralProof;
  __referralProof_isset = YES;
}

- (BOOL) referralProofIsSet {
  return __referralProof_isset;
}

- (void) unsetReferralProof {
  [__referralProof release_stub];
  __referralProof = nil;
  __referralProof_isset = NO;
}

- (BOOL) educationalDiscount {
  return __educationalDiscount;
}

- (void) setEducationalDiscount: (BOOL) educationalDiscount {
  __educationalDiscount = educationalDiscount;
  __educationalDiscount_isset = YES;
}

- (BOOL) educationalDiscountIsSet {
  return __educationalDiscount_isset;
}

- (void) unsetEducationalDiscount {
  __educationalDiscount_isset = NO;
}

- (NSString *) businessAddress {
  return [[__businessAddress retain_stub] autorelease_stub];
}

- (void) setBusinessAddress: (NSString *) businessAddress {
  [businessAddress retain_stub];
  [__businessAddress release_stub];
  __businessAddress = businessAddress;
  __businessAddress_isset = YES;
}

- (BOOL) businessAddressIsSet {
  return __businessAddress_isset;
}

- (void) unsetBusinessAddress {
  [__businessAddress release_stub];
  __businessAddress = nil;
  __businessAddress_isset = NO;
}

- (BOOL) hideSponsorBilling {
  return __hideSponsorBilling;
}

- (void) setHideSponsorBilling: (BOOL) hideSponsorBilling {
  __hideSponsorBilling = hideSponsorBilling;
  __hideSponsorBilling_isset = YES;
}

- (BOOL) hideSponsorBillingIsSet {
  return __hideSponsorBilling_isset;
}

- (void) unsetHideSponsorBilling {
  __hideSponsorBilling_isset = NO;
}

- (BOOL) taxExempt {
  return __taxExempt;
}

- (void) setTaxExempt: (BOOL) taxExempt {
  __taxExempt = taxExempt;
  __taxExempt_isset = YES;
}

- (BOOL) taxExemptIsSet {
  return __taxExempt_isset;
}

- (void) unsetTaxExempt {
  __taxExempt_isset = NO;
}

- (BOOL) useEmailAutoFiling {
  return __useEmailAutoFiling;
}

- (void) setUseEmailAutoFiling: (BOOL) useEmailAutoFiling {
  __useEmailAutoFiling = useEmailAutoFiling;
  __useEmailAutoFiling_isset = YES;
}

- (BOOL) useEmailAutoFilingIsSet {
  return __useEmailAutoFiling_isset;
}

- (void) unsetUseEmailAutoFiling {
  __useEmailAutoFiling_isset = NO;
}

- (int) reminderEmailConfig {
  return __reminderEmailConfig;
}

- (void) setReminderEmailConfig: (int) reminderEmailConfig {
  __reminderEmailConfig = reminderEmailConfig;
  __reminderEmailConfig_isset = YES;
}

- (BOOL) reminderEmailConfigIsSet {
  return __reminderEmailConfig_isset;
}

- (void) unsetReminderEmailConfig {
  __reminderEmailConfig_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDefaultLocationName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setDefaultLatitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setDefaultLongitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setPreactivation: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NSString * _elem2 = [inProtocol readString];
            [fieldValue addObject: _elem2];
          }
          [inProtocol readListEnd];
          [self setViewedPromotions: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIncomingEmailAddress: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_LIST) {
          int _size3;
          [inProtocol readListBeginReturningElementType: NULL size: &_size3];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size3];
          int _i4;
          for (_i4 = 0; _i4 < _size3; ++_i4)
          {
            NSString * _elem5 = [inProtocol readString];
            [fieldValue addObject: _elem5];
          }
          [inProtocol readListEnd];
          [self setRecentMailedAddresses: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setComments: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDateAgreedToTermsOfService: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setMaxReferrals: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setReferralCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRefererCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setSentEmailDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSentEmailCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setDailyEmailLimit: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 18:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setEmailOptOutDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 19:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPartnerEmailOptInDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 20:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPreferredLanguage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 21:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPreferredCountry: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 22:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setClipFullPage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 23:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTwitterUserName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 24:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTwitterId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 25:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGroupName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 26:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRecognitionLanguage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 28:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setReferralProof: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 29:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setEducationalDiscount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 30:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBusinessAddress: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 31:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setHideSponsorBilling: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 32:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setTaxExempt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 33:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setUseEmailAutoFiling: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 34:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setReminderEmailConfig: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UserAttributes"];
  if (__defaultLocationName_isset) {
    if (__defaultLocationName != nil) {
      [outProtocol writeFieldBeginWithName: @"defaultLocationName" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __defaultLocationName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__defaultLatitude_isset) {
    [outProtocol writeFieldBeginWithName: @"defaultLatitude" type: TType_DOUBLE fieldID: 2];
    [outProtocol writeDouble: __defaultLatitude];
    [outProtocol writeFieldEnd];
  }
  if (__defaultLongitude_isset) {
    [outProtocol writeFieldBeginWithName: @"defaultLongitude" type: TType_DOUBLE fieldID: 3];
    [outProtocol writeDouble: __defaultLongitude];
    [outProtocol writeFieldEnd];
  }
  if (__preactivation_isset) {
    [outProtocol writeFieldBeginWithName: @"preactivation" type: TType_BOOL fieldID: 4];
    [outProtocol writeBool: __preactivation];
    [outProtocol writeFieldEnd];
  }
  if (__viewedPromotions_isset) {
    if (__viewedPromotions != nil) {
      [outProtocol writeFieldBeginWithName: @"viewedPromotions" type: TType_LIST fieldID: 5];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__viewedPromotions count]];
        int i7;
        for (i7 = 0; i7 < [__viewedPromotions count]; i7++)
        {
          [outProtocol writeString: [__viewedPromotions objectAtIndex: i7]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__incomingEmailAddress_isset) {
    if (__incomingEmailAddress != nil) {
      [outProtocol writeFieldBeginWithName: @"incomingEmailAddress" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __incomingEmailAddress];
      [outProtocol writeFieldEnd];
    }
  }
  if (__recentMailedAddresses_isset) {
    if (__recentMailedAddresses != nil) {
      [outProtocol writeFieldBeginWithName: @"recentMailedAddresses" type: TType_LIST fieldID: 7];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__recentMailedAddresses count]];
        int i9;
        for (i9 = 0; i9 < [__recentMailedAddresses count]; i9++)
        {
          [outProtocol writeString: [__recentMailedAddresses objectAtIndex: i9]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__comments_isset) {
    if (__comments != nil) {
      [outProtocol writeFieldBeginWithName: @"comments" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __comments];
      [outProtocol writeFieldEnd];
    }
  }
  if (__dateAgreedToTermsOfService_isset) {
    [outProtocol writeFieldBeginWithName: @"dateAgreedToTermsOfService" type: TType_I64 fieldID: 11];
    [outProtocol writeI64: __dateAgreedToTermsOfService];
    [outProtocol writeFieldEnd];
  }
  if (__maxReferrals_isset) {
    [outProtocol writeFieldBeginWithName: @"maxReferrals" type: TType_I32 fieldID: 12];
    [outProtocol writeI32: __maxReferrals];
    [outProtocol writeFieldEnd];
  }
  if (__referralCount_isset) {
    [outProtocol writeFieldBeginWithName: @"referralCount" type: TType_I32 fieldID: 13];
    [outProtocol writeI32: __referralCount];
    [outProtocol writeFieldEnd];
  }
  if (__refererCode_isset) {
    if (__refererCode != nil) {
      [outProtocol writeFieldBeginWithName: @"refererCode" type: TType_STRING fieldID: 14];
      [outProtocol writeString: __refererCode];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sentEmailDate_isset) {
    [outProtocol writeFieldBeginWithName: @"sentEmailDate" type: TType_I64 fieldID: 15];
    [outProtocol writeI64: __sentEmailDate];
    [outProtocol writeFieldEnd];
  }
  if (__sentEmailCount_isset) {
    [outProtocol writeFieldBeginWithName: @"sentEmailCount" type: TType_I32 fieldID: 16];
    [outProtocol writeI32: __sentEmailCount];
    [outProtocol writeFieldEnd];
  }
  if (__dailyEmailLimit_isset) {
    [outProtocol writeFieldBeginWithName: @"dailyEmailLimit" type: TType_I32 fieldID: 17];
    [outProtocol writeI32: __dailyEmailLimit];
    [outProtocol writeFieldEnd];
  }
  if (__emailOptOutDate_isset) {
    [outProtocol writeFieldBeginWithName: @"emailOptOutDate" type: TType_I64 fieldID: 18];
    [outProtocol writeI64: __emailOptOutDate];
    [outProtocol writeFieldEnd];
  }
  if (__partnerEmailOptInDate_isset) {
    [outProtocol writeFieldBeginWithName: @"partnerEmailOptInDate" type: TType_I64 fieldID: 19];
    [outProtocol writeI64: __partnerEmailOptInDate];
    [outProtocol writeFieldEnd];
  }
  if (__preferredLanguage_isset) {
    if (__preferredLanguage != nil) {
      [outProtocol writeFieldBeginWithName: @"preferredLanguage" type: TType_STRING fieldID: 20];
      [outProtocol writeString: __preferredLanguage];
      [outProtocol writeFieldEnd];
    }
  }
  if (__preferredCountry_isset) {
    if (__preferredCountry != nil) {
      [outProtocol writeFieldBeginWithName: @"preferredCountry" type: TType_STRING fieldID: 21];
      [outProtocol writeString: __preferredCountry];
      [outProtocol writeFieldEnd];
    }
  }
  if (__clipFullPage_isset) {
    [outProtocol writeFieldBeginWithName: @"clipFullPage" type: TType_BOOL fieldID: 22];
    [outProtocol writeBool: __clipFullPage];
    [outProtocol writeFieldEnd];
  }
  if (__twitterUserName_isset) {
    if (__twitterUserName != nil) {
      [outProtocol writeFieldBeginWithName: @"twitterUserName" type: TType_STRING fieldID: 23];
      [outProtocol writeString: __twitterUserName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__twitterId_isset) {
    if (__twitterId != nil) {
      [outProtocol writeFieldBeginWithName: @"twitterId" type: TType_STRING fieldID: 24];
      [outProtocol writeString: __twitterId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__groupName_isset) {
    if (__groupName != nil) {
      [outProtocol writeFieldBeginWithName: @"groupName" type: TType_STRING fieldID: 25];
      [outProtocol writeString: __groupName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__recognitionLanguage_isset) {
    if (__recognitionLanguage != nil) {
      [outProtocol writeFieldBeginWithName: @"recognitionLanguage" type: TType_STRING fieldID: 26];
      [outProtocol writeString: __recognitionLanguage];
      [outProtocol writeFieldEnd];
    }
  }
  if (__referralProof_isset) {
    if (__referralProof != nil) {
      [outProtocol writeFieldBeginWithName: @"referralProof" type: TType_STRING fieldID: 28];
      [outProtocol writeString: __referralProof];
      [outProtocol writeFieldEnd];
    }
  }
  if (__educationalDiscount_isset) {
    [outProtocol writeFieldBeginWithName: @"educationalDiscount" type: TType_BOOL fieldID: 29];
    [outProtocol writeBool: __educationalDiscount];
    [outProtocol writeFieldEnd];
  }
  if (__businessAddress_isset) {
    if (__businessAddress != nil) {
      [outProtocol writeFieldBeginWithName: @"businessAddress" type: TType_STRING fieldID: 30];
      [outProtocol writeString: __businessAddress];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hideSponsorBilling_isset) {
    [outProtocol writeFieldBeginWithName: @"hideSponsorBilling" type: TType_BOOL fieldID: 31];
    [outProtocol writeBool: __hideSponsorBilling];
    [outProtocol writeFieldEnd];
  }
  if (__taxExempt_isset) {
    [outProtocol writeFieldBeginWithName: @"taxExempt" type: TType_BOOL fieldID: 32];
    [outProtocol writeBool: __taxExempt];
    [outProtocol writeFieldEnd];
  }
  if (__useEmailAutoFiling_isset) {
    [outProtocol writeFieldBeginWithName: @"useEmailAutoFiling" type: TType_BOOL fieldID: 33];
    [outProtocol writeBool: __useEmailAutoFiling];
    [outProtocol writeFieldEnd];
  }
  if (__reminderEmailConfig_isset) {
    [outProtocol writeFieldBeginWithName: @"reminderEmailConfig" type: TType_I32 fieldID: 34];
    [outProtocol writeI32: __reminderEmailConfig];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UserAttributes("];
  [ms appendString: @"defaultLocationName:"];
  [ms appendFormat: @"\"%@\"", __defaultLocationName];
  [ms appendString: @",defaultLatitude:"];
  [ms appendFormat: @"%f", __defaultLatitude];
  [ms appendString: @",defaultLongitude:"];
  [ms appendFormat: @"%f", __defaultLongitude];
  [ms appendString: @",preactivation:"];
  [ms appendFormat: @"%i", __preactivation];
  [ms appendString: @",viewedPromotions:"];
  [ms appendFormat: @"%@", __viewedPromotions];
  [ms appendString: @",incomingEmailAddress:"];
  [ms appendFormat: @"\"%@\"", __incomingEmailAddress];
  [ms appendString: @",recentMailedAddresses:"];
  [ms appendFormat: @"%@", __recentMailedAddresses];
  [ms appendString: @",comments:"];
  [ms appendFormat: @"\"%@\"", __comments];
  [ms appendString: @",dateAgreedToTermsOfService:"];
  [ms appendFormat: @"%qi", __dateAgreedToTermsOfService];
  [ms appendString: @",maxReferrals:"];
  [ms appendFormat: @"%i", __maxReferrals];
  [ms appendString: @",referralCount:"];
  [ms appendFormat: @"%i", __referralCount];
  [ms appendString: @",refererCode:"];
  [ms appendFormat: @"\"%@\"", __refererCode];
  [ms appendString: @",sentEmailDate:"];
  [ms appendFormat: @"%qi", __sentEmailDate];
  [ms appendString: @",sentEmailCount:"];
  [ms appendFormat: @"%i", __sentEmailCount];
  [ms appendString: @",dailyEmailLimit:"];
  [ms appendFormat: @"%i", __dailyEmailLimit];
  [ms appendString: @",emailOptOutDate:"];
  [ms appendFormat: @"%qi", __emailOptOutDate];
  [ms appendString: @",partnerEmailOptInDate:"];
  [ms appendFormat: @"%qi", __partnerEmailOptInDate];
  [ms appendString: @",preferredLanguage:"];
  [ms appendFormat: @"\"%@\"", __preferredLanguage];
  [ms appendString: @",preferredCountry:"];
  [ms appendFormat: @"\"%@\"", __preferredCountry];
  [ms appendString: @",clipFullPage:"];
  [ms appendFormat: @"%i", __clipFullPage];
  [ms appendString: @",twitterUserName:"];
  [ms appendFormat: @"\"%@\"", __twitterUserName];
  [ms appendString: @",twitterId:"];
  [ms appendFormat: @"\"%@\"", __twitterId];
  [ms appendString: @",groupName:"];
  [ms appendFormat: @"\"%@\"", __groupName];
  [ms appendString: @",recognitionLanguage:"];
  [ms appendFormat: @"\"%@\"", __recognitionLanguage];
  [ms appendString: @",referralProof:"];
  [ms appendFormat: @"\"%@\"", __referralProof];
  [ms appendString: @",educationalDiscount:"];
  [ms appendFormat: @"%i", __educationalDiscount];
  [ms appendString: @",businessAddress:"];
  [ms appendFormat: @"\"%@\"", __businessAddress];
  [ms appendString: @",hideSponsorBilling:"];
  [ms appendFormat: @"%i", __hideSponsorBilling];
  [ms appendString: @",taxExempt:"];
  [ms appendFormat: @"%i", __taxExempt];
  [ms appendString: @",useEmailAutoFiling:"];
  [ms appendFormat: @"%i", __useEmailAutoFiling];
  [ms appendString: @",reminderEmailConfig:"];
  [ms appendFormat: @"%i", __reminderEmailConfig];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation EDAMAccounting

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUploadLimit: (int64_t) uploadLimit uploadLimitEnd: (EDAMTimestamp) uploadLimitEnd uploadLimitNextMonth: (int64_t) uploadLimitNextMonth premiumServiceStatus: (int) premiumServiceStatus premiumOrderNumber: (NSString *) premiumOrderNumber premiumCommerceService: (NSString *) premiumCommerceService premiumServiceStart: (EDAMTimestamp) premiumServiceStart premiumServiceSKU: (NSString *) premiumServiceSKU lastSuccessfulCharge: (EDAMTimestamp) lastSuccessfulCharge lastFailedCharge: (EDAMTimestamp) lastFailedCharge lastFailedChargeReason: (NSString *) lastFailedChargeReason nextPaymentDue: (EDAMTimestamp) nextPaymentDue premiumLockUntil: (EDAMTimestamp) premiumLockUntil updated: (EDAMTimestamp) updated premiumSubscriptionNumber: (NSString *) premiumSubscriptionNumber lastRequestedCharge: (EDAMTimestamp) lastRequestedCharge currency: (NSString *) currency unitPrice: (int32_t) unitPrice businessId: (int32_t) businessId businessName: (NSString *) businessName businessRole: (int) businessRole unitDiscount: (int32_t) unitDiscount nextChargeDate: (EDAMTimestamp) nextChargeDate
{
  self = [super init];
  __uploadLimit = uploadLimit;
  __uploadLimit_isset = YES;
  __uploadLimitEnd = uploadLimitEnd;
  __uploadLimitEnd_isset = YES;
  __uploadLimitNextMonth = uploadLimitNextMonth;
  __uploadLimitNextMonth_isset = YES;
  __premiumServiceStatus = premiumServiceStatus;
  __premiumServiceStatus_isset = YES;
  __premiumOrderNumber = [premiumOrderNumber retain_stub];
  __premiumOrderNumber_isset = YES;
  __premiumCommerceService = [premiumCommerceService retain_stub];
  __premiumCommerceService_isset = YES;
  __premiumServiceStart = premiumServiceStart;
  __premiumServiceStart_isset = YES;
  __premiumServiceSKU = [premiumServiceSKU retain_stub];
  __premiumServiceSKU_isset = YES;
  __lastSuccessfulCharge = lastSuccessfulCharge;
  __lastSuccessfulCharge_isset = YES;
  __lastFailedCharge = lastFailedCharge;
  __lastFailedCharge_isset = YES;
  __lastFailedChargeReason = [lastFailedChargeReason retain_stub];
  __lastFailedChargeReason_isset = YES;
  __nextPaymentDue = nextPaymentDue;
  __nextPaymentDue_isset = YES;
  __premiumLockUntil = premiumLockUntil;
  __premiumLockUntil_isset = YES;
  __updated = updated;
  __updated_isset = YES;
  __premiumSubscriptionNumber = [premiumSubscriptionNumber retain_stub];
  __premiumSubscriptionNumber_isset = YES;
  __lastRequestedCharge = lastRequestedCharge;
  __lastRequestedCharge_isset = YES;
  __currency = [currency retain_stub];
  __currency_isset = YES;
  __unitPrice = unitPrice;
  __unitPrice_isset = YES;
  __businessId = businessId;
  __businessId_isset = YES;
  __businessName = [businessName retain_stub];
  __businessName_isset = YES;
  __businessRole = businessRole;
  __businessRole_isset = YES;
  __unitDiscount = unitDiscount;
  __unitDiscount_isset = YES;
  __nextChargeDate = nextChargeDate;
  __nextChargeDate_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"uploadLimit"])
  {
    __uploadLimit = [decoder decodeInt64ForKey: @"uploadLimit"];
    __uploadLimit_isset = YES;
  }
  if ([decoder containsValueForKey: @"uploadLimitEnd"])
  {
    __uploadLimitEnd = [decoder decodeInt64ForKey: @"uploadLimitEnd"];
    __uploadLimitEnd_isset = YES;
  }
  if ([decoder containsValueForKey: @"uploadLimitNextMonth"])
  {
    __uploadLimitNextMonth = [decoder decodeInt64ForKey: @"uploadLimitNextMonth"];
    __uploadLimitNextMonth_isset = YES;
  }
  if ([decoder containsValueForKey: @"premiumServiceStatus"])
  {
    __premiumServiceStatus = [decoder decodeIntForKey: @"premiumServiceStatus"];
    __premiumServiceStatus_isset = YES;
  }
  if ([decoder containsValueForKey: @"premiumOrderNumber"])
  {
    __premiumOrderNumber = [[decoder decodeObjectForKey: @"premiumOrderNumber"] retain_stub];
    __premiumOrderNumber_isset = YES;
  }
  if ([decoder containsValueForKey: @"premiumCommerceService"])
  {
    __premiumCommerceService = [[decoder decodeObjectForKey: @"premiumCommerceService"] retain_stub];
    __premiumCommerceService_isset = YES;
  }
  if ([decoder containsValueForKey: @"premiumServiceStart"])
  {
    __premiumServiceStart = [decoder decodeInt64ForKey: @"premiumServiceStart"];
    __premiumServiceStart_isset = YES;
  }
  if ([decoder containsValueForKey: @"premiumServiceSKU"])
  {
    __premiumServiceSKU = [[decoder decodeObjectForKey: @"premiumServiceSKU"] retain_stub];
    __premiumServiceSKU_isset = YES;
  }
  if ([decoder containsValueForKey: @"lastSuccessfulCharge"])
  {
    __lastSuccessfulCharge = [decoder decodeInt64ForKey: @"lastSuccessfulCharge"];
    __lastSuccessfulCharge_isset = YES;
  }
  if ([decoder containsValueForKey: @"lastFailedCharge"])
  {
    __lastFailedCharge = [decoder decodeInt64ForKey: @"lastFailedCharge"];
    __lastFailedCharge_isset = YES;
  }
  if ([decoder containsValueForKey: @"lastFailedChargeReason"])
  {
    __lastFailedChargeReason = [[decoder decodeObjectForKey: @"lastFailedChargeReason"] retain_stub];
    __lastFailedChargeReason_isset = YES;
  }
  if ([decoder containsValueForKey: @"nextPaymentDue"])
  {
    __nextPaymentDue = [decoder decodeInt64ForKey: @"nextPaymentDue"];
    __nextPaymentDue_isset = YES;
  }
  if ([decoder containsValueForKey: @"premiumLockUntil"])
  {
    __premiumLockUntil = [decoder decodeInt64ForKey: @"premiumLockUntil"];
    __premiumLockUntil_isset = YES;
  }
  if ([decoder containsValueForKey: @"updated"])
  {
    __updated = [decoder decodeInt64ForKey: @"updated"];
    __updated_isset = YES;
  }
  if ([decoder containsValueForKey: @"premiumSubscriptionNumber"])
  {
    __premiumSubscriptionNumber = [[decoder decodeObjectForKey: @"premiumSubscriptionNumber"] retain_stub];
    __premiumSubscriptionNumber_isset = YES;
  }
  if ([decoder containsValueForKey: @"lastRequestedCharge"])
  {
    __lastRequestedCharge = [decoder decodeInt64ForKey: @"lastRequestedCharge"];
    __lastRequestedCharge_isset = YES;
  }
  if ([decoder containsValueForKey: @"currency"])
  {
    __currency = [[decoder decodeObjectForKey: @"currency"] retain_stub];
    __currency_isset = YES;
  }
  if ([decoder containsValueForKey: @"unitPrice"])
  {
    __unitPrice = [decoder decodeInt32ForKey: @"unitPrice"];
    __unitPrice_isset = YES;
  }
  if ([decoder containsValueForKey: @"businessId"])
  {
    __businessId = [decoder decodeInt32ForKey: @"businessId"];
    __businessId_isset = YES;
  }
  if ([decoder containsValueForKey: @"businessName"])
  {
    __businessName = [[decoder decodeObjectForKey: @"businessName"] retain_stub];
    __businessName_isset = YES;
  }
  if ([decoder containsValueForKey: @"businessRole"])
  {
    __businessRole = [decoder decodeIntForKey: @"businessRole"];
    __businessRole_isset = YES;
  }
  if ([decoder containsValueForKey: @"unitDiscount"])
  {
    __unitDiscount = [decoder decodeInt32ForKey: @"unitDiscount"];
    __unitDiscount_isset = YES;
  }
  if ([decoder containsValueForKey: @"nextChargeDate"])
  {
    __nextChargeDate = [decoder decodeInt64ForKey: @"nextChargeDate"];
    __nextChargeDate_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__uploadLimit_isset)
  {
    [encoder encodeInt64: __uploadLimit forKey: @"uploadLimit"];
  }
  if (__uploadLimitEnd_isset)
  {
    [encoder encodeInt64: __uploadLimitEnd forKey: @"uploadLimitEnd"];
  }
  if (__uploadLimitNextMonth_isset)
  {
    [encoder encodeInt64: __uploadLimitNextMonth forKey: @"uploadLimitNextMonth"];
  }
  if (__premiumServiceStatus_isset)
  {
    [encoder encodeInt: __premiumServiceStatus forKey: @"premiumServiceStatus"];
  }
  if (__premiumOrderNumber_isset)
  {
    [encoder encodeObject: __premiumOrderNumber forKey: @"premiumOrderNumber"];
  }
  if (__premiumCommerceService_isset)
  {
    [encoder encodeObject: __premiumCommerceService forKey: @"premiumCommerceService"];
  }
  if (__premiumServiceStart_isset)
  {
    [encoder encodeInt64: __premiumServiceStart forKey: @"premiumServiceStart"];
  }
  if (__premiumServiceSKU_isset)
  {
    [encoder encodeObject: __premiumServiceSKU forKey: @"premiumServiceSKU"];
  }
  if (__lastSuccessfulCharge_isset)
  {
    [encoder encodeInt64: __lastSuccessfulCharge forKey: @"lastSuccessfulCharge"];
  }
  if (__lastFailedCharge_isset)
  {
    [encoder encodeInt64: __lastFailedCharge forKey: @"lastFailedCharge"];
  }
  if (__lastFailedChargeReason_isset)
  {
    [encoder encodeObject: __lastFailedChargeReason forKey: @"lastFailedChargeReason"];
  }
  if (__nextPaymentDue_isset)
  {
    [encoder encodeInt64: __nextPaymentDue forKey: @"nextPaymentDue"];
  }
  if (__premiumLockUntil_isset)
  {
    [encoder encodeInt64: __premiumLockUntil forKey: @"premiumLockUntil"];
  }
  if (__updated_isset)
  {
    [encoder encodeInt64: __updated forKey: @"updated"];
  }
  if (__premiumSubscriptionNumber_isset)
  {
    [encoder encodeObject: __premiumSubscriptionNumber forKey: @"premiumSubscriptionNumber"];
  }
  if (__lastRequestedCharge_isset)
  {
    [encoder encodeInt64: __lastRequestedCharge forKey: @"lastRequestedCharge"];
  }
  if (__currency_isset)
  {
    [encoder encodeObject: __currency forKey: @"currency"];
  }
  if (__unitPrice_isset)
  {
    [encoder encodeInt32: __unitPrice forKey: @"unitPrice"];
  }
  if (__businessId_isset)
  {
    [encoder encodeInt32: __businessId forKey: @"businessId"];
  }
  if (__businessName_isset)
  {
    [encoder encodeObject: __businessName forKey: @"businessName"];
  }
  if (__businessRole_isset)
  {
    [encoder encodeInt: __businessRole forKey: @"businessRole"];
  }
  if (__unitDiscount_isset)
  {
    [encoder encodeInt32: __unitDiscount forKey: @"unitDiscount"];
  }
  if (__nextChargeDate_isset)
  {
    [encoder encodeInt64: __nextChargeDate forKey: @"nextChargeDate"];
  }
}

- (void) dealloc
{
  [__premiumOrderNumber release_stub];
  [__premiumCommerceService release_stub];
  [__premiumServiceSKU release_stub];
  [__lastFailedChargeReason release_stub];
  [__premiumSubscriptionNumber release_stub];
  [__currency release_stub];
  [__businessName release_stub];
  [super dealloc_stub];
}

- (int64_t) uploadLimit {
  return __uploadLimit;
}

- (void) setUploadLimit: (int64_t) uploadLimit {
  __uploadLimit = uploadLimit;
  __uploadLimit_isset = YES;
}

- (BOOL) uploadLimitIsSet {
  return __uploadLimit_isset;
}

- (void) unsetUploadLimit {
  __uploadLimit_isset = NO;
}

- (int64_t) uploadLimitEnd {
  return __uploadLimitEnd;
}

- (void) setUploadLimitEnd: (int64_t) uploadLimitEnd {
  __uploadLimitEnd = uploadLimitEnd;
  __uploadLimitEnd_isset = YES;
}

- (BOOL) uploadLimitEndIsSet {
  return __uploadLimitEnd_isset;
}

- (void) unsetUploadLimitEnd {
  __uploadLimitEnd_isset = NO;
}

- (int64_t) uploadLimitNextMonth {
  return __uploadLimitNextMonth;
}

- (void) setUploadLimitNextMonth: (int64_t) uploadLimitNextMonth {
  __uploadLimitNextMonth = uploadLimitNextMonth;
  __uploadLimitNextMonth_isset = YES;
}

- (BOOL) uploadLimitNextMonthIsSet {
  return __uploadLimitNextMonth_isset;
}

- (void) unsetUploadLimitNextMonth {
  __uploadLimitNextMonth_isset = NO;
}

- (int) premiumServiceStatus {
  return __premiumServiceStatus;
}

- (void) setPremiumServiceStatus: (int) premiumServiceStatus {
  __premiumServiceStatus = premiumServiceStatus;
  __premiumServiceStatus_isset = YES;
}

- (BOOL) premiumServiceStatusIsSet {
  return __premiumServiceStatus_isset;
}

- (void) unsetPremiumServiceStatus {
  __premiumServiceStatus_isset = NO;
}

- (NSString *) premiumOrderNumber {
  return [[__premiumOrderNumber retain_stub] autorelease_stub];
}

- (void) setPremiumOrderNumber: (NSString *) premiumOrderNumber {
  [premiumOrderNumber retain_stub];
  [__premiumOrderNumber release_stub];
  __premiumOrderNumber = premiumOrderNumber;
  __premiumOrderNumber_isset = YES;
}

- (BOOL) premiumOrderNumberIsSet {
  return __premiumOrderNumber_isset;
}

- (void) unsetPremiumOrderNumber {
  [__premiumOrderNumber release_stub];
  __premiumOrderNumber = nil;
  __premiumOrderNumber_isset = NO;
}

- (NSString *) premiumCommerceService {
  return [[__premiumCommerceService retain_stub] autorelease_stub];
}

- (void) setPremiumCommerceService: (NSString *) premiumCommerceService {
  [premiumCommerceService retain_stub];
  [__premiumCommerceService release_stub];
  __premiumCommerceService = premiumCommerceService;
  __premiumCommerceService_isset = YES;
}

- (BOOL) premiumCommerceServiceIsSet {
  return __premiumCommerceService_isset;
}

- (void) unsetPremiumCommerceService {
  [__premiumCommerceService release_stub];
  __premiumCommerceService = nil;
  __premiumCommerceService_isset = NO;
}

- (int64_t) premiumServiceStart {
  return __premiumServiceStart;
}

- (void) setPremiumServiceStart: (int64_t) premiumServiceStart {
  __premiumServiceStart = premiumServiceStart;
  __premiumServiceStart_isset = YES;
}

- (BOOL) premiumServiceStartIsSet {
  return __premiumServiceStart_isset;
}

- (void) unsetPremiumServiceStart {
  __premiumServiceStart_isset = NO;
}

- (NSString *) premiumServiceSKU {
  return [[__premiumServiceSKU retain_stub] autorelease_stub];
}

- (void) setPremiumServiceSKU: (NSString *) premiumServiceSKU {
  [premiumServiceSKU retain_stub];
  [__premiumServiceSKU release_stub];
  __premiumServiceSKU = premiumServiceSKU;
  __premiumServiceSKU_isset = YES;
}

- (BOOL) premiumServiceSKUIsSet {
  return __premiumServiceSKU_isset;
}

- (void) unsetPremiumServiceSKU {
  [__premiumServiceSKU release_stub];
  __premiumServiceSKU = nil;
  __premiumServiceSKU_isset = NO;
}

- (int64_t) lastSuccessfulCharge {
  return __lastSuccessfulCharge;
}

- (void) setLastSuccessfulCharge: (int64_t) lastSuccessfulCharge {
  __lastSuccessfulCharge = lastSuccessfulCharge;
  __lastSuccessfulCharge_isset = YES;
}

- (BOOL) lastSuccessfulChargeIsSet {
  return __lastSuccessfulCharge_isset;
}

- (void) unsetLastSuccessfulCharge {
  __lastSuccessfulCharge_isset = NO;
}

- (int64_t) lastFailedCharge {
  return __lastFailedCharge;
}

- (void) setLastFailedCharge: (int64_t) lastFailedCharge {
  __lastFailedCharge = lastFailedCharge;
  __lastFailedCharge_isset = YES;
}

- (BOOL) lastFailedChargeIsSet {
  return __lastFailedCharge_isset;
}

- (void) unsetLastFailedCharge {
  __lastFailedCharge_isset = NO;
}

- (NSString *) lastFailedChargeReason {
  return [[__lastFailedChargeReason retain_stub] autorelease_stub];
}

- (void) setLastFailedChargeReason: (NSString *) lastFailedChargeReason {
  [lastFailedChargeReason retain_stub];
  [__lastFailedChargeReason release_stub];
  __lastFailedChargeReason = lastFailedChargeReason;
  __lastFailedChargeReason_isset = YES;
}

- (BOOL) lastFailedChargeReasonIsSet {
  return __lastFailedChargeReason_isset;
}

- (void) unsetLastFailedChargeReason {
  [__lastFailedChargeReason release_stub];
  __lastFailedChargeReason = nil;
  __lastFailedChargeReason_isset = NO;
}

- (int64_t) nextPaymentDue {
  return __nextPaymentDue;
}

- (void) setNextPaymentDue: (int64_t) nextPaymentDue {
  __nextPaymentDue = nextPaymentDue;
  __nextPaymentDue_isset = YES;
}

- (BOOL) nextPaymentDueIsSet {
  return __nextPaymentDue_isset;
}

- (void) unsetNextPaymentDue {
  __nextPaymentDue_isset = NO;
}

- (int64_t) premiumLockUntil {
  return __premiumLockUntil;
}

- (void) setPremiumLockUntil: (int64_t) premiumLockUntil {
  __premiumLockUntil = premiumLockUntil;
  __premiumLockUntil_isset = YES;
}

- (BOOL) premiumLockUntilIsSet {
  return __premiumLockUntil_isset;
}

- (void) unsetPremiumLockUntil {
  __premiumLockUntil_isset = NO;
}

- (int64_t) updated {
  return __updated;
}

- (void) setUpdated: (int64_t) updated {
  __updated = updated;
  __updated_isset = YES;
}

- (BOOL) updatedIsSet {
  return __updated_isset;
}

- (void) unsetUpdated {
  __updated_isset = NO;
}

- (NSString *) premiumSubscriptionNumber {
  return [[__premiumSubscriptionNumber retain_stub] autorelease_stub];
}

- (void) setPremiumSubscriptionNumber: (NSString *) premiumSubscriptionNumber {
  [premiumSubscriptionNumber retain_stub];
  [__premiumSubscriptionNumber release_stub];
  __premiumSubscriptionNumber = premiumSubscriptionNumber;
  __premiumSubscriptionNumber_isset = YES;
}

- (BOOL) premiumSubscriptionNumberIsSet {
  return __premiumSubscriptionNumber_isset;
}

- (void) unsetPremiumSubscriptionNumber {
  [__premiumSubscriptionNumber release_stub];
  __premiumSubscriptionNumber = nil;
  __premiumSubscriptionNumber_isset = NO;
}

- (int64_t) lastRequestedCharge {
  return __lastRequestedCharge;
}

- (void) setLastRequestedCharge: (int64_t) lastRequestedCharge {
  __lastRequestedCharge = lastRequestedCharge;
  __lastRequestedCharge_isset = YES;
}

- (BOOL) lastRequestedChargeIsSet {
  return __lastRequestedCharge_isset;
}

- (void) unsetLastRequestedCharge {
  __lastRequestedCharge_isset = NO;
}

- (NSString *) currency {
  return [[__currency retain_stub] autorelease_stub];
}

- (void) setCurrency: (NSString *) currency {
  [currency retain_stub];
  [__currency release_stub];
  __currency = currency;
  __currency_isset = YES;
}

- (BOOL) currencyIsSet {
  return __currency_isset;
}

- (void) unsetCurrency {
  [__currency release_stub];
  __currency = nil;
  __currency_isset = NO;
}

- (int32_t) unitPrice {
  return __unitPrice;
}

- (void) setUnitPrice: (int32_t) unitPrice {
  __unitPrice = unitPrice;
  __unitPrice_isset = YES;
}

- (BOOL) unitPriceIsSet {
  return __unitPrice_isset;
}

- (void) unsetUnitPrice {
  __unitPrice_isset = NO;
}

- (int32_t) businessId {
  return __businessId;
}

- (void) setBusinessId: (int32_t) businessId {
  __businessId = businessId;
  __businessId_isset = YES;
}

- (BOOL) businessIdIsSet {
  return __businessId_isset;
}

- (void) unsetBusinessId {
  __businessId_isset = NO;
}

- (NSString *) businessName {
  return [[__businessName retain_stub] autorelease_stub];
}

- (void) setBusinessName: (NSString *) businessName {
  [businessName retain_stub];
  [__businessName release_stub];
  __businessName = businessName;
  __businessName_isset = YES;
}

- (BOOL) businessNameIsSet {
  return __businessName_isset;
}

- (void) unsetBusinessName {
  [__businessName release_stub];
  __businessName = nil;
  __businessName_isset = NO;
}

- (int) businessRole {
  return __businessRole;
}

- (void) setBusinessRole: (int) businessRole {
  __businessRole = businessRole;
  __businessRole_isset = YES;
}

- (BOOL) businessRoleIsSet {
  return __businessRole_isset;
}

- (void) unsetBusinessRole {
  __businessRole_isset = NO;
}

- (int32_t) unitDiscount {
  return __unitDiscount;
}

- (void) setUnitDiscount: (int32_t) unitDiscount {
  __unitDiscount = unitDiscount;
  __unitDiscount_isset = YES;
}

- (BOOL) unitDiscountIsSet {
  return __unitDiscount_isset;
}

- (void) unsetUnitDiscount {
  __unitDiscount_isset = NO;
}

- (int64_t) nextChargeDate {
  return __nextChargeDate;
}

- (void) setNextChargeDate: (int64_t) nextChargeDate {
  __nextChargeDate = nextChargeDate;
  __nextChargeDate_isset = YES;
}

- (BOOL) nextChargeDateIsSet {
  return __nextChargeDate_isset;
}

- (void) unsetNextChargeDate {
  __nextChargeDate_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUploadLimit: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUploadLimitEnd: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUploadLimitNextMonth: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setPremiumServiceStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPremiumOrderNumber: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPremiumCommerceService: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPremiumServiceStart: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPremiumServiceSKU: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setLastSuccessfulCharge: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setLastFailedCharge: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLastFailedChargeReason: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setNextPaymentDue: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPremiumLockUntil: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUpdated: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPremiumSubscriptionNumber: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setLastRequestedCharge: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 18:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCurrency: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 19:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setUnitPrice: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 20:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setBusinessId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 21:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBusinessName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 22:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setBusinessRole: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 23:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setUnitDiscount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 24:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setNextChargeDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Accounting"];
  if (__uploadLimit_isset) {
    [outProtocol writeFieldBeginWithName: @"uploadLimit" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __uploadLimit];
    [outProtocol writeFieldEnd];
  }
  if (__uploadLimitEnd_isset) {
    [outProtocol writeFieldBeginWithName: @"uploadLimitEnd" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __uploadLimitEnd];
    [outProtocol writeFieldEnd];
  }
  if (__uploadLimitNextMonth_isset) {
    [outProtocol writeFieldBeginWithName: @"uploadLimitNextMonth" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __uploadLimitNextMonth];
    [outProtocol writeFieldEnd];
  }
  if (__premiumServiceStatus_isset) {
    [outProtocol writeFieldBeginWithName: @"premiumServiceStatus" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __premiumServiceStatus];
    [outProtocol writeFieldEnd];
  }
  if (__premiumOrderNumber_isset) {
    if (__premiumOrderNumber != nil) {
      [outProtocol writeFieldBeginWithName: @"premiumOrderNumber" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __premiumOrderNumber];
      [outProtocol writeFieldEnd];
    }
  }
  if (__premiumCommerceService_isset) {
    if (__premiumCommerceService != nil) {
      [outProtocol writeFieldBeginWithName: @"premiumCommerceService" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __premiumCommerceService];
      [outProtocol writeFieldEnd];
    }
  }
  if (__premiumServiceStart_isset) {
    [outProtocol writeFieldBeginWithName: @"premiumServiceStart" type: TType_I64 fieldID: 7];
    [outProtocol writeI64: __premiumServiceStart];
    [outProtocol writeFieldEnd];
  }
  if (__premiumServiceSKU_isset) {
    if (__premiumServiceSKU != nil) {
      [outProtocol writeFieldBeginWithName: @"premiumServiceSKU" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __premiumServiceSKU];
      [outProtocol writeFieldEnd];
    }
  }
  if (__lastSuccessfulCharge_isset) {
    [outProtocol writeFieldBeginWithName: @"lastSuccessfulCharge" type: TType_I64 fieldID: 9];
    [outProtocol writeI64: __lastSuccessfulCharge];
    [outProtocol writeFieldEnd];
  }
  if (__lastFailedCharge_isset) {
    [outProtocol writeFieldBeginWithName: @"lastFailedCharge" type: TType_I64 fieldID: 10];
    [outProtocol writeI64: __lastFailedCharge];
    [outProtocol writeFieldEnd];
  }
  if (__lastFailedChargeReason_isset) {
    if (__lastFailedChargeReason != nil) {
      [outProtocol writeFieldBeginWithName: @"lastFailedChargeReason" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __lastFailedChargeReason];
      [outProtocol writeFieldEnd];
    }
  }
  if (__nextPaymentDue_isset) {
    [outProtocol writeFieldBeginWithName: @"nextPaymentDue" type: TType_I64 fieldID: 12];
    [outProtocol writeI64: __nextPaymentDue];
    [outProtocol writeFieldEnd];
  }
  if (__premiumLockUntil_isset) {
    [outProtocol writeFieldBeginWithName: @"premiumLockUntil" type: TType_I64 fieldID: 13];
    [outProtocol writeI64: __premiumLockUntil];
    [outProtocol writeFieldEnd];
  }
  if (__updated_isset) {
    [outProtocol writeFieldBeginWithName: @"updated" type: TType_I64 fieldID: 14];
    [outProtocol writeI64: __updated];
    [outProtocol writeFieldEnd];
  }
  if (__premiumSubscriptionNumber_isset) {
    if (__premiumSubscriptionNumber != nil) {
      [outProtocol writeFieldBeginWithName: @"premiumSubscriptionNumber" type: TType_STRING fieldID: 16];
      [outProtocol writeString: __premiumSubscriptionNumber];
      [outProtocol writeFieldEnd];
    }
  }
  if (__lastRequestedCharge_isset) {
    [outProtocol writeFieldBeginWithName: @"lastRequestedCharge" type: TType_I64 fieldID: 17];
    [outProtocol writeI64: __lastRequestedCharge];
    [outProtocol writeFieldEnd];
  }
  if (__currency_isset) {
    if (__currency != nil) {
      [outProtocol writeFieldBeginWithName: @"currency" type: TType_STRING fieldID: 18];
      [outProtocol writeString: __currency];
      [outProtocol writeFieldEnd];
    }
  }
  if (__unitPrice_isset) {
    [outProtocol writeFieldBeginWithName: @"unitPrice" type: TType_I32 fieldID: 19];
    [outProtocol writeI32: __unitPrice];
    [outProtocol writeFieldEnd];
  }
  if (__businessId_isset) {
    [outProtocol writeFieldBeginWithName: @"businessId" type: TType_I32 fieldID: 20];
    [outProtocol writeI32: __businessId];
    [outProtocol writeFieldEnd];
  }
  if (__businessName_isset) {
    if (__businessName != nil) {
      [outProtocol writeFieldBeginWithName: @"businessName" type: TType_STRING fieldID: 21];
      [outProtocol writeString: __businessName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__businessRole_isset) {
    [outProtocol writeFieldBeginWithName: @"businessRole" type: TType_I32 fieldID: 22];
    [outProtocol writeI32: __businessRole];
    [outProtocol writeFieldEnd];
  }
  if (__unitDiscount_isset) {
    [outProtocol writeFieldBeginWithName: @"unitDiscount" type: TType_I32 fieldID: 23];
    [outProtocol writeI32: __unitDiscount];
    [outProtocol writeFieldEnd];
  }
  if (__nextChargeDate_isset) {
    [outProtocol writeFieldBeginWithName: @"nextChargeDate" type: TType_I64 fieldID: 24];
    [outProtocol writeI64: __nextChargeDate];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Accounting("];
  [ms appendString: @"uploadLimit:"];
  [ms appendFormat: @"%qi", __uploadLimit];
  [ms appendString: @",uploadLimitEnd:"];
  [ms appendFormat: @"%qi", __uploadLimitEnd];
  [ms appendString: @",uploadLimitNextMonth:"];
  [ms appendFormat: @"%qi", __uploadLimitNextMonth];
  [ms appendString: @",premiumServiceStatus:"];
  [ms appendFormat: @"%i", __premiumServiceStatus];
  [ms appendString: @",premiumOrderNumber:"];
  [ms appendFormat: @"\"%@\"", __premiumOrderNumber];
  [ms appendString: @",premiumCommerceService:"];
  [ms appendFormat: @"\"%@\"", __premiumCommerceService];
  [ms appendString: @",premiumServiceStart:"];
  [ms appendFormat: @"%qi", __premiumServiceStart];
  [ms appendString: @",premiumServiceSKU:"];
  [ms appendFormat: @"\"%@\"", __premiumServiceSKU];
  [ms appendString: @",lastSuccessfulCharge:"];
  [ms appendFormat: @"%qi", __lastSuccessfulCharge];
  [ms appendString: @",lastFailedCharge:"];
  [ms appendFormat: @"%qi", __lastFailedCharge];
  [ms appendString: @",lastFailedChargeReason:"];
  [ms appendFormat: @"\"%@\"", __lastFailedChargeReason];
  [ms appendString: @",nextPaymentDue:"];
  [ms appendFormat: @"%qi", __nextPaymentDue];
  [ms appendString: @",premiumLockUntil:"];
  [ms appendFormat: @"%qi", __premiumLockUntil];
  [ms appendString: @",updated:"];
  [ms appendFormat: @"%qi", __updated];
  [ms appendString: @",premiumSubscriptionNumber:"];
  [ms appendFormat: @"\"%@\"", __premiumSubscriptionNumber];
  [ms appendString: @",lastRequestedCharge:"];
  [ms appendFormat: @"%qi", __lastRequestedCharge];
  [ms appendString: @",currency:"];
  [ms appendFormat: @"\"%@\"", __currency];
  [ms appendString: @",unitPrice:"];
  [ms appendFormat: @"%i", __unitPrice];
  [ms appendString: @",businessId:"];
  [ms appendFormat: @"%i", __businessId];
  [ms appendString: @",businessName:"];
  [ms appendFormat: @"\"%@\"", __businessName];
  [ms appendString: @",businessRole:"];
  [ms appendFormat: @"%i", __businessRole];
  [ms appendString: @",unitDiscount:"];
  [ms appendFormat: @"%i", __unitDiscount];
  [ms appendString: @",nextChargeDate:"];
  [ms appendFormat: @"%qi", __nextChargeDate];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation EDAMBusinessUserInfo

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithBusinessId: (int32_t) businessId businessName: (NSString *) businessName role: (int) role email: (NSString *) email
{
  self = [super init];
  __businessId = businessId;
  __businessId_isset = YES;
  __businessName = [businessName retain_stub];
  __businessName_isset = YES;
  __role = role;
  __role_isset = YES;
  __email = [email retain_stub];
  __email_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"businessId"])
  {
    __businessId = [decoder decodeInt32ForKey: @"businessId"];
    __businessId_isset = YES;
  }
  if ([decoder containsValueForKey: @"businessName"])
  {
    __businessName = [[decoder decodeObjectForKey: @"businessName"] retain_stub];
    __businessName_isset = YES;
  }
  if ([decoder containsValueForKey: @"role"])
  {
    __role = [decoder decodeIntForKey: @"role"];
    __role_isset = YES;
  }
  if ([decoder containsValueForKey: @"email"])
  {
    __email = [[decoder decodeObjectForKey: @"email"] retain_stub];
    __email_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__businessId_isset)
  {
    [encoder encodeInt32: __businessId forKey: @"businessId"];
  }
  if (__businessName_isset)
  {
    [encoder encodeObject: __businessName forKey: @"businessName"];
  }
  if (__role_isset)
  {
    [encoder encodeInt: __role forKey: @"role"];
  }
  if (__email_isset)
  {
    [encoder encodeObject: __email forKey: @"email"];
  }
}

- (void) dealloc
{
  [__businessName release_stub];
  [__email release_stub];
  [super dealloc_stub];
}

- (int32_t) businessId {
  return __businessId;
}

- (void) setBusinessId: (int32_t) businessId {
  __businessId = businessId;
  __businessId_isset = YES;
}

- (BOOL) businessIdIsSet {
  return __businessId_isset;
}

- (void) unsetBusinessId {
  __businessId_isset = NO;
}

- (NSString *) businessName {
  return [[__businessName retain_stub] autorelease_stub];
}

- (void) setBusinessName: (NSString *) businessName {
  [businessName retain_stub];
  [__businessName release_stub];
  __businessName = businessName;
  __businessName_isset = YES;
}

- (BOOL) businessNameIsSet {
  return __businessName_isset;
}

- (void) unsetBusinessName {
  [__businessName release_stub];
  __businessName = nil;
  __businessName_isset = NO;
}

- (int) role {
  return __role;
}

- (void) setRole: (int) role {
  __role = role;
  __role_isset = YES;
}

- (BOOL) roleIsSet {
  return __role_isset;
}

- (void) unsetRole {
  __role_isset = NO;
}

- (NSString *) email {
  return [[__email retain_stub] autorelease_stub];
}

- (void) setEmail: (NSString *) email {
  [email retain_stub];
  [__email release_stub];
  __email = email;
  __email_isset = YES;
}

- (BOOL) emailIsSet {
  return __email_isset;
}

- (void) unsetEmail {
  [__email release_stub];
  __email = nil;
  __email_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setBusinessId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBusinessName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setRole: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"BusinessUserInfo"];
  if (__businessId_isset) {
    [outProtocol writeFieldBeginWithName: @"businessId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __businessId];
    [outProtocol writeFieldEnd];
  }
  if (__businessName_isset) {
    if (__businessName != nil) {
      [outProtocol writeFieldBeginWithName: @"businessName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __businessName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__role_isset) {
    [outProtocol writeFieldBeginWithName: @"role" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __role];
    [outProtocol writeFieldEnd];
  }
  if (__email_isset) {
    if (__email != nil) {
      [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __email];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BusinessUserInfo("];
  [ms appendString: @"businessId:"];
  [ms appendFormat: @"%i", __businessId];
  [ms appendString: @",businessName:"];
  [ms appendFormat: @"\"%@\"", __businessName];
  [ms appendString: @",role:"];
  [ms appendFormat: @"%i", __role];
  [ms appendString: @",email:"];
  [ms appendFormat: @"\"%@\"", __email];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation EDAMPremiumInfo

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCurrentTime: (EDAMTimestamp) currentTime premium: (BOOL) premium premiumRecurring: (BOOL) premiumRecurring premiumExpirationDate: (EDAMTimestamp) premiumExpirationDate premiumExtendable: (BOOL) premiumExtendable premiumPending: (BOOL) premiumPending premiumCancellationPending: (BOOL) premiumCancellationPending canPurchaseUploadAllowance: (BOOL) canPurchaseUploadAllowance sponsoredGroupName: (NSString *) sponsoredGroupName sponsoredGroupRole: (int) sponsoredGroupRole premiumUpgradable: (BOOL) premiumUpgradable
{
  self = [super init];
  __currentTime = currentTime;
  __currentTime_isset = YES;
  __premium = premium;
  __premium_isset = YES;
  __premiumRecurring = premiumRecurring;
  __premiumRecurring_isset = YES;
  __premiumExpirationDate = premiumExpirationDate;
  __premiumExpirationDate_isset = YES;
  __premiumExtendable = premiumExtendable;
  __premiumExtendable_isset = YES;
  __premiumPending = premiumPending;
  __premiumPending_isset = YES;
  __premiumCancellationPending = premiumCancellationPending;
  __premiumCancellationPending_isset = YES;
  __canPurchaseUploadAllowance = canPurchaseUploadAllowance;
  __canPurchaseUploadAllowance_isset = YES;
  __sponsoredGroupName = [sponsoredGroupName retain_stub];
  __sponsoredGroupName_isset = YES;
  __sponsoredGroupRole = sponsoredGroupRole;
  __sponsoredGroupRole_isset = YES;
  __premiumUpgradable = premiumUpgradable;
  __premiumUpgradable_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"currentTime"])
  {
    __currentTime = [decoder decodeInt64ForKey: @"currentTime"];
    __currentTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"premium"])
  {
    __premium = [decoder decodeBoolForKey: @"premium"];
    __premium_isset = YES;
  }
  if ([decoder containsValueForKey: @"premiumRecurring"])
  {
    __premiumRecurring = [decoder decodeBoolForKey: @"premiumRecurring"];
    __premiumRecurring_isset = YES;
  }
  if ([decoder containsValueForKey: @"premiumExpirationDate"])
  {
    __premiumExpirationDate = [decoder decodeInt64ForKey: @"premiumExpirationDate"];
    __premiumExpirationDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"premiumExtendable"])
  {
    __premiumExtendable = [decoder decodeBoolForKey: @"premiumExtendable"];
    __premiumExtendable_isset = YES;
  }
  if ([decoder containsValueForKey: @"premiumPending"])
  {
    __premiumPending = [decoder decodeBoolForKey: @"premiumPending"];
    __premiumPending_isset = YES;
  }
  if ([decoder containsValueForKey: @"premiumCancellationPending"])
  {
    __premiumCancellationPending = [decoder decodeBoolForKey: @"premiumCancellationPending"];
    __premiumCancellationPending_isset = YES;
  }
  if ([decoder containsValueForKey: @"canPurchaseUploadAllowance"])
  {
    __canPurchaseUploadAllowance = [decoder decodeBoolForKey: @"canPurchaseUploadAllowance"];
    __canPurchaseUploadAllowance_isset = YES;
  }
  if ([decoder containsValueForKey: @"sponsoredGroupName"])
  {
    __sponsoredGroupName = [[decoder decodeObjectForKey: @"sponsoredGroupName"] retain_stub];
    __sponsoredGroupName_isset = YES;
  }
  if ([decoder containsValueForKey: @"sponsoredGroupRole"])
  {
    __sponsoredGroupRole = [decoder decodeIntForKey: @"sponsoredGroupRole"];
    __sponsoredGroupRole_isset = YES;
  }
  if ([decoder containsValueForKey: @"premiumUpgradable"])
  {
    __premiumUpgradable = [decoder decodeBoolForKey: @"premiumUpgradable"];
    __premiumUpgradable_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__currentTime_isset)
  {
    [encoder encodeInt64: __currentTime forKey: @"currentTime"];
  }
  if (__premium_isset)
  {
    [encoder encodeBool: __premium forKey: @"premium"];
  }
  if (__premiumRecurring_isset)
  {
    [encoder encodeBool: __premiumRecurring forKey: @"premiumRecurring"];
  }
  if (__premiumExpirationDate_isset)
  {
    [encoder encodeInt64: __premiumExpirationDate forKey: @"premiumExpirationDate"];
  }
  if (__premiumExtendable_isset)
  {
    [encoder encodeBool: __premiumExtendable forKey: @"premiumExtendable"];
  }
  if (__premiumPending_isset)
  {
    [encoder encodeBool: __premiumPending forKey: @"premiumPending"];
  }
  if (__premiumCancellationPending_isset)
  {
    [encoder encodeBool: __premiumCancellationPending forKey: @"premiumCancellationPending"];
  }
  if (__canPurchaseUploadAllowance_isset)
  {
    [encoder encodeBool: __canPurchaseUploadAllowance forKey: @"canPurchaseUploadAllowance"];
  }
  if (__sponsoredGroupName_isset)
  {
    [encoder encodeObject: __sponsoredGroupName forKey: @"sponsoredGroupName"];
  }
  if (__sponsoredGroupRole_isset)
  {
    [encoder encodeInt: __sponsoredGroupRole forKey: @"sponsoredGroupRole"];
  }
  if (__premiumUpgradable_isset)
  {
    [encoder encodeBool: __premiumUpgradable forKey: @"premiumUpgradable"];
  }
}

- (void) dealloc
{
  [__sponsoredGroupName release_stub];
  [super dealloc_stub];
}

- (int64_t) currentTime {
  return __currentTime;
}

- (void) setCurrentTime: (int64_t) currentTime {
  __currentTime = currentTime;
  __currentTime_isset = YES;
}

- (BOOL) currentTimeIsSet {
  return __currentTime_isset;
}

- (void) unsetCurrentTime {
  __currentTime_isset = NO;
}

- (BOOL) premium {
  return __premium;
}

- (void) setPremium: (BOOL) premium {
  __premium = premium;
  __premium_isset = YES;
}

- (BOOL) premiumIsSet {
  return __premium_isset;
}

- (void) unsetPremium {
  __premium_isset = NO;
}

- (BOOL) premiumRecurring {
  return __premiumRecurring;
}

- (void) setPremiumRecurring: (BOOL) premiumRecurring {
  __premiumRecurring = premiumRecurring;
  __premiumRecurring_isset = YES;
}

- (BOOL) premiumRecurringIsSet {
  return __premiumRecurring_isset;
}

- (void) unsetPremiumRecurring {
  __premiumRecurring_isset = NO;
}

- (int64_t) premiumExpirationDate {
  return __premiumExpirationDate;
}

- (void) setPremiumExpirationDate: (int64_t) premiumExpirationDate {
  __premiumExpirationDate = premiumExpirationDate;
  __premiumExpirationDate_isset = YES;
}

- (BOOL) premiumExpirationDateIsSet {
  return __premiumExpirationDate_isset;
}

- (void) unsetPremiumExpirationDate {
  __premiumExpirationDate_isset = NO;
}

- (BOOL) premiumExtendable {
  return __premiumExtendable;
}

- (void) setPremiumExtendable: (BOOL) premiumExtendable {
  __premiumExtendable = premiumExtendable;
  __premiumExtendable_isset = YES;
}

- (BOOL) premiumExtendableIsSet {
  return __premiumExtendable_isset;
}

- (void) unsetPremiumExtendable {
  __premiumExtendable_isset = NO;
}

- (BOOL) premiumPending {
  return __premiumPending;
}

- (void) setPremiumPending: (BOOL) premiumPending {
  __premiumPending = premiumPending;
  __premiumPending_isset = YES;
}

- (BOOL) premiumPendingIsSet {
  return __premiumPending_isset;
}

- (void) unsetPremiumPending {
  __premiumPending_isset = NO;
}

- (BOOL) premiumCancellationPending {
  return __premiumCancellationPending;
}

- (void) setPremiumCancellationPending: (BOOL) premiumCancellationPending {
  __premiumCancellationPending = premiumCancellationPending;
  __premiumCancellationPending_isset = YES;
}

- (BOOL) premiumCancellationPendingIsSet {
  return __premiumCancellationPending_isset;
}

- (void) unsetPremiumCancellationPending {
  __premiumCancellationPending_isset = NO;
}

- (BOOL) canPurchaseUploadAllowance {
  return __canPurchaseUploadAllowance;
}

- (void) setCanPurchaseUploadAllowance: (BOOL) canPurchaseUploadAllowance {
  __canPurchaseUploadAllowance = canPurchaseUploadAllowance;
  __canPurchaseUploadAllowance_isset = YES;
}

- (BOOL) canPurchaseUploadAllowanceIsSet {
  return __canPurchaseUploadAllowance_isset;
}

- (void) unsetCanPurchaseUploadAllowance {
  __canPurchaseUploadAllowance_isset = NO;
}

- (NSString *) sponsoredGroupName {
  return [[__sponsoredGroupName retain_stub] autorelease_stub];
}

- (void) setSponsoredGroupName: (NSString *) sponsoredGroupName {
  [sponsoredGroupName retain_stub];
  [__sponsoredGroupName release_stub];
  __sponsoredGroupName = sponsoredGroupName;
  __sponsoredGroupName_isset = YES;
}

- (BOOL) sponsoredGroupNameIsSet {
  return __sponsoredGroupName_isset;
}

- (void) unsetSponsoredGroupName {
  [__sponsoredGroupName release_stub];
  __sponsoredGroupName = nil;
  __sponsoredGroupName_isset = NO;
}

- (int) sponsoredGroupRole {
  return __sponsoredGroupRole;
}

- (void) setSponsoredGroupRole: (int) sponsoredGroupRole {
  __sponsoredGroupRole = sponsoredGroupRole;
  __sponsoredGroupRole_isset = YES;
}

- (BOOL) sponsoredGroupRoleIsSet {
  return __sponsoredGroupRole_isset;
}

- (void) unsetSponsoredGroupRole {
  __sponsoredGroupRole_isset = NO;
}

- (BOOL) premiumUpgradable {
  return __premiumUpgradable;
}

- (void) setPremiumUpgradable: (BOOL) premiumUpgradable {
  __premiumUpgradable = premiumUpgradable;
  __premiumUpgradable_isset = YES;
}

- (BOOL) premiumUpgradableIsSet {
  return __premiumUpgradable_isset;
}

- (void) unsetPremiumUpgradable {
  __premiumUpgradable_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCurrentTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setPremium: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setPremiumRecurring: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setPremiumExpirationDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setPremiumExtendable: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setPremiumPending: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setPremiumCancellationPending: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setCanPurchaseUploadAllowance: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSponsoredGroupName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setSponsoredGroupRole: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setPremiumUpgradable: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PremiumInfo"];
  if (__currentTime_isset) {
    [outProtocol writeFieldBeginWithName: @"currentTime" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __currentTime];
    [outProtocol writeFieldEnd];
  }
  if (__premium_isset) {
    [outProtocol writeFieldBeginWithName: @"premium" type: TType_BOOL fieldID: 2];
    [outProtocol writeBool: __premium];
    [outProtocol writeFieldEnd];
  }
  if (__premiumRecurring_isset) {
    [outProtocol writeFieldBeginWithName: @"premiumRecurring" type: TType_BOOL fieldID: 3];
    [outProtocol writeBool: __premiumRecurring];
    [outProtocol writeFieldEnd];
  }
  if (__premiumExpirationDate_isset) {
    [outProtocol writeFieldBeginWithName: @"premiumExpirationDate" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __premiumExpirationDate];
    [outProtocol writeFieldEnd];
  }
  if (__premiumExtendable_isset) {
    [outProtocol writeFieldBeginWithName: @"premiumExtendable" type: TType_BOOL fieldID: 5];
    [outProtocol writeBool: __premiumExtendable];
    [outProtocol writeFieldEnd];
  }
  if (__premiumPending_isset) {
    [outProtocol writeFieldBeginWithName: @"premiumPending" type: TType_BOOL fieldID: 6];
    [outProtocol writeBool: __premiumPending];
    [outProtocol writeFieldEnd];
  }
  if (__premiumCancellationPending_isset) {
    [outProtocol writeFieldBeginWithName: @"premiumCancellationPending" type: TType_BOOL fieldID: 7];
    [outProtocol writeBool: __premiumCancellationPending];
    [outProtocol writeFieldEnd];
  }
  if (__canPurchaseUploadAllowance_isset) {
    [outProtocol writeFieldBeginWithName: @"canPurchaseUploadAllowance" type: TType_BOOL fieldID: 8];
    [outProtocol writeBool: __canPurchaseUploadAllowance];
    [outProtocol writeFieldEnd];
  }
  if (__sponsoredGroupName_isset) {
    if (__sponsoredGroupName != nil) {
      [outProtocol writeFieldBeginWithName: @"sponsoredGroupName" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __sponsoredGroupName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sponsoredGroupRole_isset) {
    [outProtocol writeFieldBeginWithName: @"sponsoredGroupRole" type: TType_I32 fieldID: 10];
    [outProtocol writeI32: __sponsoredGroupRole];
    [outProtocol writeFieldEnd];
  }
  if (__premiumUpgradable_isset) {
    [outProtocol writeFieldBeginWithName: @"premiumUpgradable" type: TType_BOOL fieldID: 11];
    [outProtocol writeBool: __premiumUpgradable];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"PremiumInfo("];
  [ms appendString: @"currentTime:"];
  [ms appendFormat: @"%qi", __currentTime];
  [ms appendString: @",premium:"];
  [ms appendFormat: @"%i", __premium];
  [ms appendString: @",premiumRecurring:"];
  [ms appendFormat: @"%i", __premiumRecurring];
  [ms appendString: @",premiumExpirationDate:"];
  [ms appendFormat: @"%qi", __premiumExpirationDate];
  [ms appendString: @",premiumExtendable:"];
  [ms appendFormat: @"%i", __premiumExtendable];
  [ms appendString: @",premiumPending:"];
  [ms appendFormat: @"%i", __premiumPending];
  [ms appendString: @",premiumCancellationPending:"];
  [ms appendFormat: @"%i", __premiumCancellationPending];
  [ms appendString: @",canPurchaseUploadAllowance:"];
  [ms appendFormat: @"%i", __canPurchaseUploadAllowance];
  [ms appendString: @",sponsoredGroupName:"];
  [ms appendFormat: @"\"%@\"", __sponsoredGroupName];
  [ms appendString: @",sponsoredGroupRole:"];
  [ms appendFormat: @"%i", __sponsoredGroupRole];
  [ms appendString: @",premiumUpgradable:"];
  [ms appendFormat: @"%i", __premiumUpgradable];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation EDAMUser

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (EDAMUserID) id username: (NSString *) username email: (NSString *) email name: (NSString *) name timezone: (NSString *) timezone privilege: (int) privilege created: (EDAMTimestamp) created updated: (EDAMTimestamp) updated deleted: (EDAMTimestamp) deleted active: (BOOL) active shardId: (NSString *) shardId attributes: (EDAMUserAttributes *) attributes accounting: (EDAMAccounting *) accounting premiumInfo: (EDAMPremiumInfo *) premiumInfo businessUserInfo: (EDAMBusinessUserInfo *) businessUserInfo
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __username = [username retain_stub];
  __username_isset = YES;
  __email = [email retain_stub];
  __email_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __timezone = [timezone retain_stub];
  __timezone_isset = YES;
  __privilege = privilege;
  __privilege_isset = YES;
  __created = created;
  __created_isset = YES;
  __updated = updated;
  __updated_isset = YES;
  __deleted = deleted;
  __deleted_isset = YES;
  __active = active;
  __active_isset = YES;
  __shardId = [shardId retain_stub];
  __shardId_isset = YES;
  __attributes = [attributes retain_stub];
  __attributes_isset = YES;
  __accounting = [accounting retain_stub];
  __accounting_isset = YES;
  __premiumInfo = [premiumInfo retain_stub];
  __premiumInfo_isset = YES;
  __businessUserInfo = [businessUserInfo retain_stub];
  __businessUserInfo_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt32ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"username"])
  {
    __username = [[decoder decodeObjectForKey: @"username"] retain_stub];
    __username_isset = YES;
  }
  if ([decoder containsValueForKey: @"email"])
  {
    __email = [[decoder decodeObjectForKey: @"email"] retain_stub];
    __email_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"timezone"])
  {
    __timezone = [[decoder decodeObjectForKey: @"timezone"] retain_stub];
    __timezone_isset = YES;
  }
  if ([decoder containsValueForKey: @"privilege"])
  {
    __privilege = [decoder decodeIntForKey: @"privilege"];
    __privilege_isset = YES;
  }
  if ([decoder containsValueForKey: @"created"])
  {
    __created = [decoder decodeInt64ForKey: @"created"];
    __created_isset = YES;
  }
  if ([decoder containsValueForKey: @"updated"])
  {
    __updated = [decoder decodeInt64ForKey: @"updated"];
    __updated_isset = YES;
  }
  if ([decoder containsValueForKey: @"deleted"])
  {
    __deleted = [decoder decodeInt64ForKey: @"deleted"];
    __deleted_isset = YES;
  }
  if ([decoder containsValueForKey: @"active"])
  {
    __active = [decoder decodeBoolForKey: @"active"];
    __active_isset = YES;
  }
  if ([decoder containsValueForKey: @"shardId"])
  {
    __shardId = [[decoder decodeObjectForKey: @"shardId"] retain_stub];
    __shardId_isset = YES;
  }
  if ([decoder containsValueForKey: @"attributes"])
  {
    __attributes = [[decoder decodeObjectForKey: @"attributes"] retain_stub];
    __attributes_isset = YES;
  }
  if ([decoder containsValueForKey: @"accounting"])
  {
    __accounting = [[decoder decodeObjectForKey: @"accounting"] retain_stub];
    __accounting_isset = YES;
  }
  if ([decoder containsValueForKey: @"premiumInfo"])
  {
    __premiumInfo = [[decoder decodeObjectForKey: @"premiumInfo"] retain_stub];
    __premiumInfo_isset = YES;
  }
  if ([decoder containsValueForKey: @"businessUserInfo"])
  {
    __businessUserInfo = [[decoder decodeObjectForKey: @"businessUserInfo"] retain_stub];
    __businessUserInfo_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt32: __id forKey: @"id"];
  }
  if (__username_isset)
  {
    [encoder encodeObject: __username forKey: @"username"];
  }
  if (__email_isset)
  {
    [encoder encodeObject: __email forKey: @"email"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__timezone_isset)
  {
    [encoder encodeObject: __timezone forKey: @"timezone"];
  }
  if (__privilege_isset)
  {
    [encoder encodeInt: __privilege forKey: @"privilege"];
  }
  if (__created_isset)
  {
    [encoder encodeInt64: __created forKey: @"created"];
  }
  if (__updated_isset)
  {
    [encoder encodeInt64: __updated forKey: @"updated"];
  }
  if (__deleted_isset)
  {
    [encoder encodeInt64: __deleted forKey: @"deleted"];
  }
  if (__active_isset)
  {
    [encoder encodeBool: __active forKey: @"active"];
  }
  if (__shardId_isset)
  {
    [encoder encodeObject: __shardId forKey: @"shardId"];
  }
  if (__attributes_isset)
  {
    [encoder encodeObject: __attributes forKey: @"attributes"];
  }
  if (__accounting_isset)
  {
    [encoder encodeObject: __accounting forKey: @"accounting"];
  }
  if (__premiumInfo_isset)
  {
    [encoder encodeObject: __premiumInfo forKey: @"premiumInfo"];
  }
  if (__businessUserInfo_isset)
  {
    [encoder encodeObject: __businessUserInfo forKey: @"businessUserInfo"];
  }
}

- (void) dealloc
{
  [__username release_stub];
  [__email release_stub];
  [__name release_stub];
  [__timezone release_stub];
  [__shardId release_stub];
  [__attributes release_stub];
  [__accounting release_stub];
  [__premiumInfo release_stub];
  [__businessUserInfo release_stub];
  [super dealloc_stub];
}

- (int32_t) id {
  return __id;
}

- (void) setId: (int32_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (NSString *) username {
  return [[__username retain_stub] autorelease_stub];
}

- (void) setUsername: (NSString *) username {
  [username retain_stub];
  [__username release_stub];
  __username = username;
  __username_isset = YES;
}

- (BOOL) usernameIsSet {
  return __username_isset;
}

- (void) unsetUsername {
  [__username release_stub];
  __username = nil;
  __username_isset = NO;
}

- (NSString *) email {
  return [[__email retain_stub] autorelease_stub];
}

- (void) setEmail: (NSString *) email {
  [email retain_stub];
  [__email release_stub];
  __email = email;
  __email_isset = YES;
}

- (BOOL) emailIsSet {
  return __email_isset;
}

- (void) unsetEmail {
  [__email release_stub];
  __email = nil;
  __email_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) timezone {
  return [[__timezone retain_stub] autorelease_stub];
}

- (void) setTimezone: (NSString *) timezone {
  [timezone retain_stub];
  [__timezone release_stub];
  __timezone = timezone;
  __timezone_isset = YES;
}

- (BOOL) timezoneIsSet {
  return __timezone_isset;
}

- (void) unsetTimezone {
  [__timezone release_stub];
  __timezone = nil;
  __timezone_isset = NO;
}

- (int) privilege {
  return __privilege;
}

- (void) setPrivilege: (int) privilege {
  __privilege = privilege;
  __privilege_isset = YES;
}

- (BOOL) privilegeIsSet {
  return __privilege_isset;
}

- (void) unsetPrivilege {
  __privilege_isset = NO;
}

- (int64_t) created {
  return __created;
}

- (void) setCreated: (int64_t) created {
  __created = created;
  __created_isset = YES;
}

- (BOOL) createdIsSet {
  return __created_isset;
}

- (void) unsetCreated {
  __created_isset = NO;
}

- (int64_t) updated {
  return __updated;
}

- (void) setUpdated: (int64_t) updated {
  __updated = updated;
  __updated_isset = YES;
}

- (BOOL) updatedIsSet {
  return __updated_isset;
}

- (void) unsetUpdated {
  __updated_isset = NO;
}

- (int64_t) deleted {
  return __deleted;
}

- (void) setDeleted: (int64_t) deleted {
  __deleted = deleted;
  __deleted_isset = YES;
}

- (BOOL) deletedIsSet {
  return __deleted_isset;
}

- (void) unsetDeleted {
  __deleted_isset = NO;
}

- (BOOL) active {
  return __active;
}

- (void) setActive: (BOOL) active {
  __active = active;
  __active_isset = YES;
}

- (BOOL) activeIsSet {
  return __active_isset;
}

- (void) unsetActive {
  __active_isset = NO;
}

- (NSString *) shardId {
  return [[__shardId retain_stub] autorelease_stub];
}

- (void) setShardId: (NSString *) shardId {
  [shardId retain_stub];
  [__shardId release_stub];
  __shardId = shardId;
  __shardId_isset = YES;
}

- (BOOL) shardIdIsSet {
  return __shardId_isset;
}

- (void) unsetShardId {
  [__shardId release_stub];
  __shardId = nil;
  __shardId_isset = NO;
}

- (EDAMUserAttributes *) attributes {
  return [[__attributes retain_stub] autorelease_stub];
}

- (void) setAttributes: (EDAMUserAttributes *) attributes {
  [attributes retain_stub];
  [__attributes release_stub];
  __attributes = attributes;
  __attributes_isset = YES;
}

- (BOOL) attributesIsSet {
  return __attributes_isset;
}

- (void) unsetAttributes {
  [__attributes release_stub];
  __attributes = nil;
  __attributes_isset = NO;
}

- (EDAMAccounting *) accounting {
  return [[__accounting retain_stub] autorelease_stub];
}

- (void) setAccounting: (EDAMAccounting *) accounting {
  [accounting retain_stub];
  [__accounting release_stub];
  __accounting = accounting;
  __accounting_isset = YES;
}

- (BOOL) accountingIsSet {
  return __accounting_isset;
}

- (void) unsetAccounting {
  [__accounting release_stub];
  __accounting = nil;
  __accounting_isset = NO;
}

- (EDAMPremiumInfo *) premiumInfo {
  return [[__premiumInfo retain_stub] autorelease_stub];
}

- (void) setPremiumInfo: (EDAMPremiumInfo *) premiumInfo {
  [premiumInfo retain_stub];
  [__premiumInfo release_stub];
  __premiumInfo = premiumInfo;
  __premiumInfo_isset = YES;
}

- (BOOL) premiumInfoIsSet {
  return __premiumInfo_isset;
}

- (void) unsetPremiumInfo {
  [__premiumInfo release_stub];
  __premiumInfo = nil;
  __premiumInfo_isset = NO;
}

- (EDAMBusinessUserInfo *) businessUserInfo {
  return [[__businessUserInfo retain_stub] autorelease_stub];
}

- (void) setBusinessUserInfo: (EDAMBusinessUserInfo *) businessUserInfo {
  [businessUserInfo retain_stub];
  [__businessUserInfo release_stub];
  __businessUserInfo = businessUserInfo;
  __businessUserInfo_isset = YES;
}

- (BOOL) businessUserInfoIsSet {
  return __businessUserInfo_isset;
}

- (void) unsetBusinessUserInfo {
  [__businessUserInfo release_stub];
  __businessUserInfo = nil;
  __businessUserInfo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUsername: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTimezone: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setPrivilege: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCreated: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUpdated: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDeleted: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setActive: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setShardId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_STRUCT) {
          EDAMUserAttributes *fieldValue = [[EDAMUserAttributes alloc] init];
          [fieldValue read: inProtocol];
          [self setAttributes: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_STRUCT) {
          EDAMAccounting *fieldValue = [[EDAMAccounting alloc] init];
          [fieldValue read: inProtocol];
          [self setAccounting: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_STRUCT) {
          EDAMPremiumInfo *fieldValue = [[EDAMPremiumInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setPremiumInfo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 18:
        if (fieldType == TType_STRUCT) {
          EDAMBusinessUserInfo *fieldValue = [[EDAMBusinessUserInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setBusinessUserInfo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"User"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __id];
    [outProtocol writeFieldEnd];
  }
  if (__username_isset) {
    if (__username != nil) {
      [outProtocol writeFieldBeginWithName: @"username" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __username];
      [outProtocol writeFieldEnd];
    }
  }
  if (__email_isset) {
    if (__email != nil) {
      [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __email];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__timezone_isset) {
    if (__timezone != nil) {
      [outProtocol writeFieldBeginWithName: @"timezone" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __timezone];
      [outProtocol writeFieldEnd];
    }
  }
  if (__privilege_isset) {
    [outProtocol writeFieldBeginWithName: @"privilege" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __privilege];
    [outProtocol writeFieldEnd];
  }
  if (__created_isset) {
    [outProtocol writeFieldBeginWithName: @"created" type: TType_I64 fieldID: 9];
    [outProtocol writeI64: __created];
    [outProtocol writeFieldEnd];
  }
  if (__updated_isset) {
    [outProtocol writeFieldBeginWithName: @"updated" type: TType_I64 fieldID: 10];
    [outProtocol writeI64: __updated];
    [outProtocol writeFieldEnd];
  }
  if (__deleted_isset) {
    [outProtocol writeFieldBeginWithName: @"deleted" type: TType_I64 fieldID: 11];
    [outProtocol writeI64: __deleted];
    [outProtocol writeFieldEnd];
  }
  if (__active_isset) {
    [outProtocol writeFieldBeginWithName: @"active" type: TType_BOOL fieldID: 13];
    [outProtocol writeBool: __active];
    [outProtocol writeFieldEnd];
  }
  if (__shardId_isset) {
    if (__shardId != nil) {
      [outProtocol writeFieldBeginWithName: @"shardId" type: TType_STRING fieldID: 14];
      [outProtocol writeString: __shardId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__attributes_isset) {
    if (__attributes != nil) {
      [outProtocol writeFieldBeginWithName: @"attributes" type: TType_STRUCT fieldID: 15];
      [__attributes write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__accounting_isset) {
    if (__accounting != nil) {
      [outProtocol writeFieldBeginWithName: @"accounting" type: TType_STRUCT fieldID: 16];
      [__accounting write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__premiumInfo_isset) {
    if (__premiumInfo != nil) {
      [outProtocol writeFieldBeginWithName: @"premiumInfo" type: TType_STRUCT fieldID: 17];
      [__premiumInfo write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__businessUserInfo_isset) {
    if (__businessUserInfo != nil) {
      [outProtocol writeFieldBeginWithName: @"businessUserInfo" type: TType_STRUCT fieldID: 18];
      [__businessUserInfo write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"User("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%i", __id];
  [ms appendString: @",username:"];
  [ms appendFormat: @"\"%@\"", __username];
  [ms appendString: @",email:"];
  [ms appendFormat: @"\"%@\"", __email];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",timezone:"];
  [ms appendFormat: @"\"%@\"", __timezone];
  [ms appendString: @",privilege:"];
  [ms appendFormat: @"%i", __privilege];
  [ms appendString: @",created:"];
  [ms appendFormat: @"%qi", __created];
  [ms appendString: @",updated:"];
  [ms appendFormat: @"%qi", __updated];
  [ms appendString: @",deleted:"];
  [ms appendFormat: @"%qi", __deleted];
  [ms appendString: @",active:"];
  [ms appendFormat: @"%i", __active];
  [ms appendString: @",shardId:"];
  [ms appendFormat: @"\"%@\"", __shardId];
  [ms appendString: @",attributes:"];
  [ms appendFormat: @"%@", __attributes];
  [ms appendString: @",accounting:"];
  [ms appendFormat: @"%@", __accounting];
  [ms appendString: @",premiumInfo:"];
  [ms appendFormat: @"%@", __premiumInfo];
  [ms appendString: @",businessUserInfo:"];
  [ms appendFormat: @"%@", __businessUserInfo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation EDAMTag

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithGuid: (EDAMGuid) guid name: (NSString *) name parentGuid: (EDAMGuid) parentGuid updateSequenceNum: (int32_t) updateSequenceNum
{
  self = [super init];
  __guid = [guid retain_stub];
  __guid_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __parentGuid = [parentGuid retain_stub];
  __parentGuid_isset = YES;
  __updateSequenceNum = updateSequenceNum;
  __updateSequenceNum_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"guid"])
  {
    __guid = [[decoder decodeObjectForKey: @"guid"] retain_stub];
    __guid_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"parentGuid"])
  {
    __parentGuid = [[decoder decodeObjectForKey: @"parentGuid"] retain_stub];
    __parentGuid_isset = YES;
  }
  if ([decoder containsValueForKey: @"updateSequenceNum"])
  {
    __updateSequenceNum = [decoder decodeInt32ForKey: @"updateSequenceNum"];
    __updateSequenceNum_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__guid_isset)
  {
    [encoder encodeObject: __guid forKey: @"guid"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__parentGuid_isset)
  {
    [encoder encodeObject: __parentGuid forKey: @"parentGuid"];
  }
  if (__updateSequenceNum_isset)
  {
    [encoder encodeInt32: __updateSequenceNum forKey: @"updateSequenceNum"];
  }
}

- (void) dealloc
{
  [__guid release_stub];
  [__name release_stub];
  [__parentGuid release_stub];
  [super dealloc_stub];
}

- (NSString *) guid {
  return [[__guid retain_stub] autorelease_stub];
}

- (void) setGuid: (NSString *) guid {
  [guid retain_stub];
  [__guid release_stub];
  __guid = guid;
  __guid_isset = YES;
}

- (BOOL) guidIsSet {
  return __guid_isset;
}

- (void) unsetGuid {
  [__guid release_stub];
  __guid = nil;
  __guid_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) parentGuid {
  return [[__parentGuid retain_stub] autorelease_stub];
}

- (void) setParentGuid: (NSString *) parentGuid {
  [parentGuid retain_stub];
  [__parentGuid release_stub];
  __parentGuid = parentGuid;
  __parentGuid_isset = YES;
}

- (BOOL) parentGuidIsSet {
  return __parentGuid_isset;
}

- (void) unsetParentGuid {
  [__parentGuid release_stub];
  __parentGuid = nil;
  __parentGuid_isset = NO;
}

- (int32_t) updateSequenceNum {
  return __updateSequenceNum;
}

- (void) setUpdateSequenceNum: (int32_t) updateSequenceNum {
  __updateSequenceNum = updateSequenceNum;
  __updateSequenceNum_isset = YES;
}

- (BOOL) updateSequenceNumIsSet {
  return __updateSequenceNum_isset;
}

- (void) unsetUpdateSequenceNum {
  __updateSequenceNum_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGuid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setParentGuid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setUpdateSequenceNum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Tag"];
  if (__guid_isset) {
    if (__guid != nil) {
      [outProtocol writeFieldBeginWithName: @"guid" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __guid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__parentGuid_isset) {
    if (__parentGuid != nil) {
      [outProtocol writeFieldBeginWithName: @"parentGuid" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __parentGuid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__updateSequenceNum_isset) {
    [outProtocol writeFieldBeginWithName: @"updateSequenceNum" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __updateSequenceNum];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Tag("];
  [ms appendString: @"guid:"];
  [ms appendFormat: @"\"%@\"", __guid];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",parentGuid:"];
  [ms appendFormat: @"\"%@\"", __parentGuid];
  [ms appendString: @",updateSequenceNum:"];
  [ms appendFormat: @"%i", __updateSequenceNum];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation EDAMLazyMap

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithKeysOnly: (NSMutableSet *) keysOnly fullMap: (NSMutableDictionary *) fullMap
{
  self = [super init];
  __keysOnly = [keysOnly retain_stub];
  __keysOnly_isset = YES;
  __fullMap = [fullMap retain_stub];
  __fullMap_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"keysOnly"])
  {
    __keysOnly = [[decoder decodeObjectForKey: @"keysOnly"] retain_stub];
    __keysOnly_isset = YES;
  }
  if ([decoder containsValueForKey: @"fullMap"])
  {
    __fullMap = [[decoder decodeObjectForKey: @"fullMap"] retain_stub];
    __fullMap_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__keysOnly_isset)
  {
    [encoder encodeObject: __keysOnly forKey: @"keysOnly"];
  }
  if (__fullMap_isset)
  {
    [encoder encodeObject: __fullMap forKey: @"fullMap"];
  }
}

- (void) dealloc
{
  [__keysOnly release_stub];
  [__fullMap release_stub];
  [super dealloc_stub];
}

- (NSMutableSet *) keysOnly {
  return [[__keysOnly retain_stub] autorelease_stub];
}

- (void) setKeysOnly: (NSMutableSet *) keysOnly {
  [keysOnly retain_stub];
  [__keysOnly release_stub];
  __keysOnly = keysOnly;
  __keysOnly_isset = YES;
}

- (BOOL) keysOnlyIsSet {
  return __keysOnly_isset;
}

- (void) unsetKeysOnly {
  [__keysOnly release_stub];
  __keysOnly = nil;
  __keysOnly_isset = NO;
}

- (NSMutableDictionary *) fullMap {
  return [[__fullMap retain_stub] autorelease_stub];
}

- (void) setFullMap: (NSMutableDictionary *) fullMap {
  [fullMap retain_stub];
  [__fullMap release_stub];
  __fullMap = fullMap;
  __fullMap_isset = YES;
}

- (BOOL) fullMapIsSet {
  return __fullMap_isset;
}

- (void) unsetFullMap {
  [__fullMap release_stub];
  __fullMap = nil;
  __fullMap_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_SET) {
          int _size10;
          [inProtocol readSetBeginReturningElementType: NULL size: &_size10];
          NSMutableSet * fieldValue = [[NSMutableSet alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            NSString * _elem12 = [inProtocol readString];
            [fieldValue addObject: _elem12];
          }
          [inProtocol readSetEnd];
          [self setKeysOnly: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_MAP) {
          int _size13;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size13];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size13];
          int _i14;
          for (_i14 = 0; _i14 < _size13; ++_i14)
          {
            NSString * _key15 = [inProtocol readString];
            NSString * _val16 = [inProtocol readString];
            [fieldValue setObject: _val16 forKey: _key15];
          }
          [inProtocol readMapEnd];
          [self setFullMap: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LazyMap"];
  if (__keysOnly_isset) {
    if (__keysOnly != nil) {
      [outProtocol writeFieldBeginWithName: @"keysOnly" type: TType_SET fieldID: 1];
      {
        [outProtocol writeSetBeginWithElementType: TType_STRING size: [__keysOnly count]];
        NSEnumerator * _iter17 = [__keysOnly objectEnumerator];
        id obj18;
        while ((obj18 = [_iter17 nextObject]))
        {
          [outProtocol writeString: obj18];
        }
        [outProtocol writeSetEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__fullMap_isset) {
    if (__fullMap != nil) {
      [outProtocol writeFieldBeginWithName: @"fullMap" type: TType_MAP fieldID: 2];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__fullMap count]];
        NSEnumerator * _iter19 = [__fullMap keyEnumerator];
        id key20;
        while ((key20 = [_iter19 nextObject]))
        {
          [outProtocol writeString: key20];
          [outProtocol writeString: [__fullMap objectForKey: key20]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"LazyMap("];
  [ms appendString: @"keysOnly:"];
  [ms appendFormat: @"%@", __keysOnly];
  [ms appendString: @",fullMap:"];
  [ms appendFormat: @"%@", __fullMap];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation EDAMResourceAttributes

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSourceURL: (NSString *) sourceURL timestamp: (EDAMTimestamp) timestamp latitude: (double) latitude longitude: (double) longitude altitude: (double) altitude cameraMake: (NSString *) cameraMake cameraModel: (NSString *) cameraModel clientWillIndex: (BOOL) clientWillIndex recoType: (NSString *) recoType fileName: (NSString *) fileName attachment: (BOOL) attachment applicationData: (EDAMLazyMap *) applicationData
{
  self = [super init];
  __sourceURL = [sourceURL retain_stub];
  __sourceURL_isset = YES;
  __timestamp = timestamp;
  __timestamp_isset = YES;
  __latitude = latitude;
  __latitude_isset = YES;
  __longitude = longitude;
  __longitude_isset = YES;
  __altitude = altitude;
  __altitude_isset = YES;
  __cameraMake = [cameraMake retain_stub];
  __cameraMake_isset = YES;
  __cameraModel = [cameraModel retain_stub];
  __cameraModel_isset = YES;
  __clientWillIndex = clientWillIndex;
  __clientWillIndex_isset = YES;
  __recoType = [recoType retain_stub];
  __recoType_isset = YES;
  __fileName = [fileName retain_stub];
  __fileName_isset = YES;
  __attachment = attachment;
  __attachment_isset = YES;
  __applicationData = [applicationData retain_stub];
  __applicationData_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sourceURL"])
  {
    __sourceURL = [[decoder decodeObjectForKey: @"sourceURL"] retain_stub];
    __sourceURL_isset = YES;
  }
  if ([decoder containsValueForKey: @"timestamp"])
  {
    __timestamp = [decoder decodeInt64ForKey: @"timestamp"];
    __timestamp_isset = YES;
  }
  if ([decoder containsValueForKey: @"latitude"])
  {
    __latitude = [decoder decodeDoubleForKey: @"latitude"];
    __latitude_isset = YES;
  }
  if ([decoder containsValueForKey: @"longitude"])
  {
    __longitude = [decoder decodeDoubleForKey: @"longitude"];
    __longitude_isset = YES;
  }
  if ([decoder containsValueForKey: @"altitude"])
  {
    __altitude = [decoder decodeDoubleForKey: @"altitude"];
    __altitude_isset = YES;
  }
  if ([decoder containsValueForKey: @"cameraMake"])
  {
    __cameraMake = [[decoder decodeObjectForKey: @"cameraMake"] retain_stub];
    __cameraMake_isset = YES;
  }
  if ([decoder containsValueForKey: @"cameraModel"])
  {
    __cameraModel = [[decoder decodeObjectForKey: @"cameraModel"] retain_stub];
    __cameraModel_isset = YES;
  }
  if ([decoder containsValueForKey: @"clientWillIndex"])
  {
    __clientWillIndex = [decoder decodeBoolForKey: @"clientWillIndex"];
    __clientWillIndex_isset = YES;
  }
  if ([decoder containsValueForKey: @"recoType"])
  {
    __recoType = [[decoder decodeObjectForKey: @"recoType"] retain_stub];
    __recoType_isset = YES;
  }
  if ([decoder containsValueForKey: @"fileName"])
  {
    __fileName = [[decoder decodeObjectForKey: @"fileName"] retain_stub];
    __fileName_isset = YES;
  }
  if ([decoder containsValueForKey: @"attachment"])
  {
    __attachment = [decoder decodeBoolForKey: @"attachment"];
    __attachment_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationData"])
  {
    __applicationData = [[decoder decodeObjectForKey: @"applicationData"] retain_stub];
    __applicationData_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sourceURL_isset)
  {
    [encoder encodeObject: __sourceURL forKey: @"sourceURL"];
  }
  if (__timestamp_isset)
  {
    [encoder encodeInt64: __timestamp forKey: @"timestamp"];
  }
  if (__latitude_isset)
  {
    [encoder encodeDouble: __latitude forKey: @"latitude"];
  }
  if (__longitude_isset)
  {
    [encoder encodeDouble: __longitude forKey: @"longitude"];
  }
  if (__altitude_isset)
  {
    [encoder encodeDouble: __altitude forKey: @"altitude"];
  }
  if (__cameraMake_isset)
  {
    [encoder encodeObject: __cameraMake forKey: @"cameraMake"];
  }
  if (__cameraModel_isset)
  {
    [encoder encodeObject: __cameraModel forKey: @"cameraModel"];
  }
  if (__clientWillIndex_isset)
  {
    [encoder encodeBool: __clientWillIndex forKey: @"clientWillIndex"];
  }
  if (__recoType_isset)
  {
    [encoder encodeObject: __recoType forKey: @"recoType"];
  }
  if (__fileName_isset)
  {
    [encoder encodeObject: __fileName forKey: @"fileName"];
  }
  if (__attachment_isset)
  {
    [encoder encodeBool: __attachment forKey: @"attachment"];
  }
  if (__applicationData_isset)
  {
    [encoder encodeObject: __applicationData forKey: @"applicationData"];
  }
}

- (void) dealloc
{
  [__sourceURL release_stub];
  [__cameraMake release_stub];
  [__cameraModel release_stub];
  [__recoType release_stub];
  [__fileName release_stub];
  [__applicationData release_stub];
  [super dealloc_stub];
}

- (NSString *) sourceURL {
  return [[__sourceURL retain_stub] autorelease_stub];
}

- (void) setSourceURL: (NSString *) sourceURL {
  [sourceURL retain_stub];
  [__sourceURL release_stub];
  __sourceURL = sourceURL;
  __sourceURL_isset = YES;
}

- (BOOL) sourceURLIsSet {
  return __sourceURL_isset;
}

- (void) unsetSourceURL {
  [__sourceURL release_stub];
  __sourceURL = nil;
  __sourceURL_isset = NO;
}

- (int64_t) timestamp {
  return __timestamp;
}

- (void) setTimestamp: (int64_t) timestamp {
  __timestamp = timestamp;
  __timestamp_isset = YES;
}

- (BOOL) timestampIsSet {
  return __timestamp_isset;
}

- (void) unsetTimestamp {
  __timestamp_isset = NO;
}

- (double) latitude {
  return __latitude;
}

- (void) setLatitude: (double) latitude {
  __latitude = latitude;
  __latitude_isset = YES;
}

- (BOOL) latitudeIsSet {
  return __latitude_isset;
}

- (void) unsetLatitude {
  __latitude_isset = NO;
}

- (double) longitude {
  return __longitude;
}

- (void) setLongitude: (double) longitude {
  __longitude = longitude;
  __longitude_isset = YES;
}

- (BOOL) longitudeIsSet {
  return __longitude_isset;
}

- (void) unsetLongitude {
  __longitude_isset = NO;
}

- (double) altitude {
  return __altitude;
}

- (void) setAltitude: (double) altitude {
  __altitude = altitude;
  __altitude_isset = YES;
}

- (BOOL) altitudeIsSet {
  return __altitude_isset;
}

- (void) unsetAltitude {
  __altitude_isset = NO;
}

- (NSString *) cameraMake {
  return [[__cameraMake retain_stub] autorelease_stub];
}

- (void) setCameraMake: (NSString *) cameraMake {
  [cameraMake retain_stub];
  [__cameraMake release_stub];
  __cameraMake = cameraMake;
  __cameraMake_isset = YES;
}

- (BOOL) cameraMakeIsSet {
  return __cameraMake_isset;
}

- (void) unsetCameraMake {
  [__cameraMake release_stub];
  __cameraMake = nil;
  __cameraMake_isset = NO;
}

- (NSString *) cameraModel {
  return [[__cameraModel retain_stub] autorelease_stub];
}

- (void) setCameraModel: (NSString *) cameraModel {
  [cameraModel retain_stub];
  [__cameraModel release_stub];
  __cameraModel = cameraModel;
  __cameraModel_isset = YES;
}

- (BOOL) cameraModelIsSet {
  return __cameraModel_isset;
}

- (void) unsetCameraModel {
  [__cameraModel release_stub];
  __cameraModel = nil;
  __cameraModel_isset = NO;
}

- (BOOL) clientWillIndex {
  return __clientWillIndex;
}

- (void) setClientWillIndex: (BOOL) clientWillIndex {
  __clientWillIndex = clientWillIndex;
  __clientWillIndex_isset = YES;
}

- (BOOL) clientWillIndexIsSet {
  return __clientWillIndex_isset;
}

- (void) unsetClientWillIndex {
  __clientWillIndex_isset = NO;
}

- (NSString *) recoType {
  return [[__recoType retain_stub] autorelease_stub];
}

- (void) setRecoType: (NSString *) recoType {
  [recoType retain_stub];
  [__recoType release_stub];
  __recoType = recoType;
  __recoType_isset = YES;
}

- (BOOL) recoTypeIsSet {
  return __recoType_isset;
}

- (void) unsetRecoType {
  [__recoType release_stub];
  __recoType = nil;
  __recoType_isset = NO;
}

- (NSString *) fileName {
  return [[__fileName retain_stub] autorelease_stub];
}

- (void) setFileName: (NSString *) fileName {
  [fileName retain_stub];
  [__fileName release_stub];
  __fileName = fileName;
  __fileName_isset = YES;
}

- (BOOL) fileNameIsSet {
  return __fileName_isset;
}

- (void) unsetFileName {
  [__fileName release_stub];
  __fileName = nil;
  __fileName_isset = NO;
}

- (BOOL) attachment {
  return __attachment;
}

- (void) setAttachment: (BOOL) attachment {
  __attachment = attachment;
  __attachment_isset = YES;
}

- (BOOL) attachmentIsSet {
  return __attachment_isset;
}

- (void) unsetAttachment {
  __attachment_isset = NO;
}

- (EDAMLazyMap *) applicationData {
  return [[__applicationData retain_stub] autorelease_stub];
}

- (void) setApplicationData: (EDAMLazyMap *) applicationData {
  [applicationData retain_stub];
  [__applicationData release_stub];
  __applicationData = applicationData;
  __applicationData_isset = YES;
}

- (BOOL) applicationDataIsSet {
  return __applicationData_isset;
}

- (void) unsetApplicationData {
  [__applicationData release_stub];
  __applicationData = nil;
  __applicationData_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSourceURL: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTimestamp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setLatitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setLongitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setAltitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCameraMake: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCameraModel: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setClientWillIndex: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRecoType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFileName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setAttachment: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRUCT) {
          EDAMLazyMap *fieldValue = [[EDAMLazyMap alloc] init];
          [fieldValue read: inProtocol];
          [self setApplicationData: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ResourceAttributes"];
  if (__sourceURL_isset) {
    if (__sourceURL != nil) {
      [outProtocol writeFieldBeginWithName: @"sourceURL" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __sourceURL];
      [outProtocol writeFieldEnd];
    }
  }
  if (__timestamp_isset) {
    [outProtocol writeFieldBeginWithName: @"timestamp" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __timestamp];
    [outProtocol writeFieldEnd];
  }
  if (__latitude_isset) {
    [outProtocol writeFieldBeginWithName: @"latitude" type: TType_DOUBLE fieldID: 3];
    [outProtocol writeDouble: __latitude];
    [outProtocol writeFieldEnd];
  }
  if (__longitude_isset) {
    [outProtocol writeFieldBeginWithName: @"longitude" type: TType_DOUBLE fieldID: 4];
    [outProtocol writeDouble: __longitude];
    [outProtocol writeFieldEnd];
  }
  if (__altitude_isset) {
    [outProtocol writeFieldBeginWithName: @"altitude" type: TType_DOUBLE fieldID: 5];
    [outProtocol writeDouble: __altitude];
    [outProtocol writeFieldEnd];
  }
  if (__cameraMake_isset) {
    if (__cameraMake != nil) {
      [outProtocol writeFieldBeginWithName: @"cameraMake" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __cameraMake];
      [outProtocol writeFieldEnd];
    }
  }
  if (__cameraModel_isset) {
    if (__cameraModel != nil) {
      [outProtocol writeFieldBeginWithName: @"cameraModel" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __cameraModel];
      [outProtocol writeFieldEnd];
    }
  }
  if (__clientWillIndex_isset) {
    [outProtocol writeFieldBeginWithName: @"clientWillIndex" type: TType_BOOL fieldID: 8];
    [outProtocol writeBool: __clientWillIndex];
    [outProtocol writeFieldEnd];
  }
  if (__recoType_isset) {
    if (__recoType != nil) {
      [outProtocol writeFieldBeginWithName: @"recoType" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __recoType];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fileName_isset) {
    if (__fileName != nil) {
      [outProtocol writeFieldBeginWithName: @"fileName" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __fileName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__attachment_isset) {
    [outProtocol writeFieldBeginWithName: @"attachment" type: TType_BOOL fieldID: 11];
    [outProtocol writeBool: __attachment];
    [outProtocol writeFieldEnd];
  }
  if (__applicationData_isset) {
    if (__applicationData != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationData" type: TType_STRUCT fieldID: 12];
      [__applicationData write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ResourceAttributes("];
  [ms appendString: @"sourceURL:"];
  [ms appendFormat: @"\"%@\"", __sourceURL];
  [ms appendString: @",timestamp:"];
  [ms appendFormat: @"%qi", __timestamp];
  [ms appendString: @",latitude:"];
  [ms appendFormat: @"%f", __latitude];
  [ms appendString: @",longitude:"];
  [ms appendFormat: @"%f", __longitude];
  [ms appendString: @",altitude:"];
  [ms appendFormat: @"%f", __altitude];
  [ms appendString: @",cameraMake:"];
  [ms appendFormat: @"\"%@\"", __cameraMake];
  [ms appendString: @",cameraModel:"];
  [ms appendFormat: @"\"%@\"", __cameraModel];
  [ms appendString: @",clientWillIndex:"];
  [ms appendFormat: @"%i", __clientWillIndex];
  [ms appendString: @",recoType:"];
  [ms appendFormat: @"\"%@\"", __recoType];
  [ms appendString: @",fileName:"];
  [ms appendFormat: @"\"%@\"", __fileName];
  [ms appendString: @",attachment:"];
  [ms appendFormat: @"%i", __attachment];
  [ms appendString: @",applicationData:"];
  [ms appendFormat: @"%@", __applicationData];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation EDAMResource

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithGuid: (EDAMGuid) guid noteGuid: (EDAMGuid) noteGuid data: (EDAMData *) data mime: (NSString *) mime width: (int16_t) width height: (int16_t) height duration: (int16_t) duration active: (BOOL) active recognition: (EDAMData *) recognition attributes: (EDAMResourceAttributes *) attributes updateSequenceNum: (int32_t) updateSequenceNum alternateData: (EDAMData *) alternateData
{
  self = [super init];
  __guid = [guid retain_stub];
  __guid_isset = YES;
  __noteGuid = [noteGuid retain_stub];
  __noteGuid_isset = YES;
  __data = [data retain_stub];
  __data_isset = YES;
  __mime = [mime retain_stub];
  __mime_isset = YES;
  __width = width;
  __width_isset = YES;
  __height = height;
  __height_isset = YES;
  __duration = duration;
  __duration_isset = YES;
  __active = active;
  __active_isset = YES;
  __recognition = [recognition retain_stub];
  __recognition_isset = YES;
  __attributes = [attributes retain_stub];
  __attributes_isset = YES;
  __updateSequenceNum = updateSequenceNum;
  __updateSequenceNum_isset = YES;
  __alternateData = [alternateData retain_stub];
  __alternateData_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"guid"])
  {
    __guid = [[decoder decodeObjectForKey: @"guid"] retain_stub];
    __guid_isset = YES;
  }
  if ([decoder containsValueForKey: @"noteGuid"])
  {
    __noteGuid = [[decoder decodeObjectForKey: @"noteGuid"] retain_stub];
    __noteGuid_isset = YES;
  }
  if ([decoder containsValueForKey: @"data"])
  {
    __data = [[decoder decodeObjectForKey: @"data"] retain_stub];
    __data_isset = YES;
  }
  if ([decoder containsValueForKey: @"mime"])
  {
    __mime = [[decoder decodeObjectForKey: @"mime"] retain_stub];
    __mime_isset = YES;
  }
  if ([decoder containsValueForKey: @"width"])
  {
    __width = [decoder decodeIntForKey: @"width"];
    __width_isset = YES;
  }
  if ([decoder containsValueForKey: @"height"])
  {
    __height = [decoder decodeIntForKey: @"height"];
    __height_isset = YES;
  }
  if ([decoder containsValueForKey: @"duration"])
  {
    __duration = [decoder decodeIntForKey: @"duration"];
    __duration_isset = YES;
  }
  if ([decoder containsValueForKey: @"active"])
  {
    __active = [decoder decodeBoolForKey: @"active"];
    __active_isset = YES;
  }
  if ([decoder containsValueForKey: @"recognition"])
  {
    __recognition = [[decoder decodeObjectForKey: @"recognition"] retain_stub];
    __recognition_isset = YES;
  }
  if ([decoder containsValueForKey: @"attributes"])
  {
    __attributes = [[decoder decodeObjectForKey: @"attributes"] retain_stub];
    __attributes_isset = YES;
  }
  if ([decoder containsValueForKey: @"updateSequenceNum"])
  {
    __updateSequenceNum = [decoder decodeInt32ForKey: @"updateSequenceNum"];
    __updateSequenceNum_isset = YES;
  }
  if ([decoder containsValueForKey: @"alternateData"])
  {
    __alternateData = [[decoder decodeObjectForKey: @"alternateData"] retain_stub];
    __alternateData_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__guid_isset)
  {
    [encoder encodeObject: __guid forKey: @"guid"];
  }
  if (__noteGuid_isset)
  {
    [encoder encodeObject: __noteGuid forKey: @"noteGuid"];
  }
  if (__data_isset)
  {
    [encoder encodeObject: __data forKey: @"data"];
  }
  if (__mime_isset)
  {
    [encoder encodeObject: __mime forKey: @"mime"];
  }
  if (__width_isset)
  {
    [encoder encodeInt: __width forKey: @"width"];
  }
  if (__height_isset)
  {
    [encoder encodeInt: __height forKey: @"height"];
  }
  if (__duration_isset)
  {
    [encoder encodeInt: __duration forKey: @"duration"];
  }
  if (__active_isset)
  {
    [encoder encodeBool: __active forKey: @"active"];
  }
  if (__recognition_isset)
  {
    [encoder encodeObject: __recognition forKey: @"recognition"];
  }
  if (__attributes_isset)
  {
    [encoder encodeObject: __attributes forKey: @"attributes"];
  }
  if (__updateSequenceNum_isset)
  {
    [encoder encodeInt32: __updateSequenceNum forKey: @"updateSequenceNum"];
  }
  if (__alternateData_isset)
  {
    [encoder encodeObject: __alternateData forKey: @"alternateData"];
  }
}

- (void) dealloc
{
  [__guid release_stub];
  [__noteGuid release_stub];
  [__data release_stub];
  [__mime release_stub];
  [__recognition release_stub];
  [__attributes release_stub];
  [__alternateData release_stub];
  [super dealloc_stub];
}

- (NSString *) guid {
  return [[__guid retain_stub] autorelease_stub];
}

- (void) setGuid: (NSString *) guid {
  [guid retain_stub];
  [__guid release_stub];
  __guid = guid;
  __guid_isset = YES;
}

- (BOOL) guidIsSet {
  return __guid_isset;
}

- (void) unsetGuid {
  [__guid release_stub];
  __guid = nil;
  __guid_isset = NO;
}

- (NSString *) noteGuid {
  return [[__noteGuid retain_stub] autorelease_stub];
}

- (void) setNoteGuid: (NSString *) noteGuid {
  [noteGuid retain_stub];
  [__noteGuid release_stub];
  __noteGuid = noteGuid;
  __noteGuid_isset = YES;
}

- (BOOL) noteGuidIsSet {
  return __noteGuid_isset;
}

- (void) unsetNoteGuid {
  [__noteGuid release_stub];
  __noteGuid = nil;
  __noteGuid_isset = NO;
}

- (EDAMData *) data {
  return [[__data retain_stub] autorelease_stub];
}

- (void) setData: (EDAMData *) data {
  [data retain_stub];
  [__data release_stub];
  __data = data;
  __data_isset = YES;
}

- (BOOL) dataIsSet {
  return __data_isset;
}

- (void) unsetData {
  [__data release_stub];
  __data = nil;
  __data_isset = NO;
}

- (NSString *) mime {
  return [[__mime retain_stub] autorelease_stub];
}

- (void) setMime: (NSString *) mime {
  [mime retain_stub];
  [__mime release_stub];
  __mime = mime;
  __mime_isset = YES;
}

- (BOOL) mimeIsSet {
  return __mime_isset;
}

- (void) unsetMime {
  [__mime release_stub];
  __mime = nil;
  __mime_isset = NO;
}

- (int16_t) width {
  return __width;
}

- (void) setWidth: (int16_t) width {
  __width = width;
  __width_isset = YES;
}

- (BOOL) widthIsSet {
  return __width_isset;
}

- (void) unsetWidth {
  __width_isset = NO;
}

- (int16_t) height {
  return __height;
}

- (void) setHeight: (int16_t) height {
  __height = height;
  __height_isset = YES;
}

- (BOOL) heightIsSet {
  return __height_isset;
}

- (void) unsetHeight {
  __height_isset = NO;
}

- (int16_t) duration {
  return __duration;
}

- (void) setDuration: (int16_t) duration {
  __duration = duration;
  __duration_isset = YES;
}

- (BOOL) durationIsSet {
  return __duration_isset;
}

- (void) unsetDuration {
  __duration_isset = NO;
}

- (BOOL) active {
  return __active;
}

- (void) setActive: (BOOL) active {
  __active = active;
  __active_isset = YES;
}

- (BOOL) activeIsSet {
  return __active_isset;
}

- (void) unsetActive {
  __active_isset = NO;
}

- (EDAMData *) recognition {
  return [[__recognition retain_stub] autorelease_stub];
}

- (void) setRecognition: (EDAMData *) recognition {
  [recognition retain_stub];
  [__recognition release_stub];
  __recognition = recognition;
  __recognition_isset = YES;
}

- (BOOL) recognitionIsSet {
  return __recognition_isset;
}

- (void) unsetRecognition {
  [__recognition release_stub];
  __recognition = nil;
  __recognition_isset = NO;
}

- (EDAMResourceAttributes *) attributes {
  return [[__attributes retain_stub] autorelease_stub];
}

- (void) setAttributes: (EDAMResourceAttributes *) attributes {
  [attributes retain_stub];
  [__attributes release_stub];
  __attributes = attributes;
  __attributes_isset = YES;
}

- (BOOL) attributesIsSet {
  return __attributes_isset;
}

- (void) unsetAttributes {
  [__attributes release_stub];
  __attributes = nil;
  __attributes_isset = NO;
}

- (int32_t) updateSequenceNum {
  return __updateSequenceNum;
}

- (void) setUpdateSequenceNum: (int32_t) updateSequenceNum {
  __updateSequenceNum = updateSequenceNum;
  __updateSequenceNum_isset = YES;
}

- (BOOL) updateSequenceNumIsSet {
  return __updateSequenceNum_isset;
}

- (void) unsetUpdateSequenceNum {
  __updateSequenceNum_isset = NO;
}

- (EDAMData *) alternateData {
  return [[__alternateData retain_stub] autorelease_stub];
}

- (void) setAlternateData: (EDAMData *) alternateData {
  [alternateData retain_stub];
  [__alternateData release_stub];
  __alternateData = alternateData;
  __alternateData_isset = YES;
}

- (BOOL) alternateDataIsSet {
  return __alternateData_isset;
}

- (void) unsetAlternateData {
  [__alternateData release_stub];
  __alternateData = nil;
  __alternateData_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGuid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNoteGuid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          EDAMData *fieldValue = [[EDAMData alloc] init];
          [fieldValue read: inProtocol];
          [self setData: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I16) {
          int16_t fieldValue = [inProtocol readI16];
          [self setWidth: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I16) {
          int16_t fieldValue = [inProtocol readI16];
          [self setHeight: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I16) {
          int16_t fieldValue = [inProtocol readI16];
          [self setDuration: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setActive: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRUCT) {
          EDAMData *fieldValue = [[EDAMData alloc] init];
          [fieldValue read: inProtocol];
          [self setRecognition: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRUCT) {
          EDAMResourceAttributes *fieldValue = [[EDAMResourceAttributes alloc] init];
          [fieldValue read: inProtocol];
          [self setAttributes: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setUpdateSequenceNum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRUCT) {
          EDAMData *fieldValue = [[EDAMData alloc] init];
          [fieldValue read: inProtocol];
          [self setAlternateData: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Resource"];
  if (__guid_isset) {
    if (__guid != nil) {
      [outProtocol writeFieldBeginWithName: @"guid" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __guid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__noteGuid_isset) {
    if (__noteGuid != nil) {
      [outProtocol writeFieldBeginWithName: @"noteGuid" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __noteGuid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__data_isset) {
    if (__data != nil) {
      [outProtocol writeFieldBeginWithName: @"data" type: TType_STRUCT fieldID: 3];
      [__data write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mime_isset) {
    if (__mime != nil) {
      [outProtocol writeFieldBeginWithName: @"mime" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __mime];
      [outProtocol writeFieldEnd];
    }
  }
  if (__width_isset) {
    [outProtocol writeFieldBeginWithName: @"width" type: TType_I16 fieldID: 5];
    [outProtocol writeI16: __width];
    [outProtocol writeFieldEnd];
  }
  if (__height_isset) {
    [outProtocol writeFieldBeginWithName: @"height" type: TType_I16 fieldID: 6];
    [outProtocol writeI16: __height];
    [outProtocol writeFieldEnd];
  }
  if (__duration_isset) {
    [outProtocol writeFieldBeginWithName: @"duration" type: TType_I16 fieldID: 7];
    [outProtocol writeI16: __duration];
    [outProtocol writeFieldEnd];
  }
  if (__active_isset) {
    [outProtocol writeFieldBeginWithName: @"active" type: TType_BOOL fieldID: 8];
    [outProtocol writeBool: __active];
    [outProtocol writeFieldEnd];
  }
  if (__recognition_isset) {
    if (__recognition != nil) {
      [outProtocol writeFieldBeginWithName: @"recognition" type: TType_STRUCT fieldID: 9];
      [__recognition write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__attributes_isset) {
    if (__attributes != nil) {
      [outProtocol writeFieldBeginWithName: @"attributes" type: TType_STRUCT fieldID: 11];
      [__attributes write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__updateSequenceNum_isset) {
    [outProtocol writeFieldBeginWithName: @"updateSequenceNum" type: TType_I32 fieldID: 12];
    [outProtocol writeI32: __updateSequenceNum];
    [outProtocol writeFieldEnd];
  }
  if (__alternateData_isset) {
    if (__alternateData != nil) {
      [outProtocol writeFieldBeginWithName: @"alternateData" type: TType_STRUCT fieldID: 13];
      [__alternateData write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Resource("];
  [ms appendString: @"guid:"];
  [ms appendFormat: @"\"%@\"", __guid];
  [ms appendString: @",noteGuid:"];
  [ms appendFormat: @"\"%@\"", __noteGuid];
  [ms appendString: @",data:"];
  [ms appendFormat: @"%@", __data];
  [ms appendString: @",mime:"];
  [ms appendFormat: @"\"%@\"", __mime];
  [ms appendString: @",width:"];
  [ms appendFormat: @"%hi", __width];
  [ms appendString: @",height:"];
  [ms appendFormat: @"%hi", __height];
  [ms appendString: @",duration:"];
  [ms appendFormat: @"%hi", __duration];
  [ms appendString: @",active:"];
  [ms appendFormat: @"%i", __active];
  [ms appendString: @",recognition:"];
  [ms appendFormat: @"%@", __recognition];
  [ms appendString: @",attributes:"];
  [ms appendFormat: @"%@", __attributes];
  [ms appendString: @",updateSequenceNum:"];
  [ms appendFormat: @"%i", __updateSequenceNum];
  [ms appendString: @",alternateData:"];
  [ms appendFormat: @"%@", __alternateData];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation EDAMNoteAttributes

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSubjectDate: (EDAMTimestamp) subjectDate latitude: (double) latitude longitude: (double) longitude altitude: (double) altitude author: (NSString *) author source: (NSString *) source sourceURL: (NSString *) sourceURL sourceApplication: (NSString *) sourceApplication shareDate: (EDAMTimestamp) shareDate reminderOrder: (int64_t) reminderOrder reminderDoneTime: (EDAMTimestamp) reminderDoneTime reminderTime: (EDAMTimestamp) reminderTime placeName: (NSString *) placeName contentClass: (NSString *) contentClass applicationData: (EDAMLazyMap *) applicationData lastEditedBy: (NSString *) lastEditedBy classifications: (NSMutableDictionary *) classifications creatorId: (EDAMUserID) creatorId lastEditorId: (EDAMUserID) lastEditorId
{
  self = [super init];
  __subjectDate = subjectDate;
  __subjectDate_isset = YES;
  __latitude = latitude;
  __latitude_isset = YES;
  __longitude = longitude;
  __longitude_isset = YES;
  __altitude = altitude;
  __altitude_isset = YES;
  __author = [author retain_stub];
  __author_isset = YES;
  __source = [source retain_stub];
  __source_isset = YES;
  __sourceURL = [sourceURL retain_stub];
  __sourceURL_isset = YES;
  __sourceApplication = [sourceApplication retain_stub];
  __sourceApplication_isset = YES;
  __shareDate = shareDate;
  __shareDate_isset = YES;
  __reminderOrder = reminderOrder;
  __reminderOrder_isset = YES;
  __reminderDoneTime = reminderDoneTime;
  __reminderDoneTime_isset = YES;
  __reminderTime = reminderTime;
  __reminderTime_isset = YES;
  __placeName = [placeName retain_stub];
  __placeName_isset = YES;
  __contentClass = [contentClass retain_stub];
  __contentClass_isset = YES;
  __applicationData = [applicationData retain_stub];
  __applicationData_isset = YES;
  __lastEditedBy = [lastEditedBy retain_stub];
  __lastEditedBy_isset = YES;
  __classifications = [classifications retain_stub];
  __classifications_isset = YES;
  __creatorId = creatorId;
  __creatorId_isset = YES;
  __lastEditorId = lastEditorId;
  __lastEditorId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"subjectDate"])
  {
    __subjectDate = [decoder decodeInt64ForKey: @"subjectDate"];
    __subjectDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"latitude"])
  {
    __latitude = [decoder decodeDoubleForKey: @"latitude"];
    __latitude_isset = YES;
  }
  if ([decoder containsValueForKey: @"longitude"])
  {
    __longitude = [decoder decodeDoubleForKey: @"longitude"];
    __longitude_isset = YES;
  }
  if ([decoder containsValueForKey: @"altitude"])
  {
    __altitude = [decoder decodeDoubleForKey: @"altitude"];
    __altitude_isset = YES;
  }
  if ([decoder containsValueForKey: @"author"])
  {
    __author = [[decoder decodeObjectForKey: @"author"] retain_stub];
    __author_isset = YES;
  }
  if ([decoder containsValueForKey: @"source"])
  {
    __source = [[decoder decodeObjectForKey: @"source"] retain_stub];
    __source_isset = YES;
  }
  if ([decoder containsValueForKey: @"sourceURL"])
  {
    __sourceURL = [[decoder decodeObjectForKey: @"sourceURL"] retain_stub];
    __sourceURL_isset = YES;
  }
  if ([decoder containsValueForKey: @"sourceApplication"])
  {
    __sourceApplication = [[decoder decodeObjectForKey: @"sourceApplication"] retain_stub];
    __sourceApplication_isset = YES;
  }
  if ([decoder containsValueForKey: @"shareDate"])
  {
    __shareDate = [decoder decodeInt64ForKey: @"shareDate"];
    __shareDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"reminderOrder"])
  {
    __reminderOrder = [decoder decodeInt64ForKey: @"reminderOrder"];
    __reminderOrder_isset = YES;
  }
  if ([decoder containsValueForKey: @"reminderDoneTime"])
  {
    __reminderDoneTime = [decoder decodeInt64ForKey: @"reminderDoneTime"];
    __reminderDoneTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"reminderTime"])
  {
    __reminderTime = [decoder decodeInt64ForKey: @"reminderTime"];
    __reminderTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"placeName"])
  {
    __placeName = [[decoder decodeObjectForKey: @"placeName"] retain_stub];
    __placeName_isset = YES;
  }
  if ([decoder containsValueForKey: @"contentClass"])
  {
    __contentClass = [[decoder decodeObjectForKey: @"contentClass"] retain_stub];
    __contentClass_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationData"])
  {
    __applicationData = [[decoder decodeObjectForKey: @"applicationData"] retain_stub];
    __applicationData_isset = YES;
  }
  if ([decoder containsValueForKey: @"lastEditedBy"])
  {
    __lastEditedBy = [[decoder decodeObjectForKey: @"lastEditedBy"] retain_stub];
    __lastEditedBy_isset = YES;
  }
  if ([decoder containsValueForKey: @"classifications"])
  {
    __classifications = [[decoder decodeObjectForKey: @"classifications"] retain_stub];
    __classifications_isset = YES;
  }
  if ([decoder containsValueForKey: @"creatorId"])
  {
    __creatorId = [decoder decodeInt32ForKey: @"creatorId"];
    __creatorId_isset = YES;
  }
  if ([decoder containsValueForKey: @"lastEditorId"])
  {
    __lastEditorId = [decoder decodeInt32ForKey: @"lastEditorId"];
    __lastEditorId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__subjectDate_isset)
  {
    [encoder encodeInt64: __subjectDate forKey: @"subjectDate"];
  }
  if (__latitude_isset)
  {
    [encoder encodeDouble: __latitude forKey: @"latitude"];
  }
  if (__longitude_isset)
  {
    [encoder encodeDouble: __longitude forKey: @"longitude"];
  }
  if (__altitude_isset)
  {
    [encoder encodeDouble: __altitude forKey: @"altitude"];
  }
  if (__author_isset)
  {
    [encoder encodeObject: __author forKey: @"author"];
  }
  if (__source_isset)
  {
    [encoder encodeObject: __source forKey: @"source"];
  }
  if (__sourceURL_isset)
  {
    [encoder encodeObject: __sourceURL forKey: @"sourceURL"];
  }
  if (__sourceApplication_isset)
  {
    [encoder encodeObject: __sourceApplication forKey: @"sourceApplication"];
  }
  if (__shareDate_isset)
  {
    [encoder encodeInt64: __shareDate forKey: @"shareDate"];
  }
  if (__reminderOrder_isset)
  {
    [encoder encodeInt64: __reminderOrder forKey: @"reminderOrder"];
  }
  if (__reminderDoneTime_isset)
  {
    [encoder encodeInt64: __reminderDoneTime forKey: @"reminderDoneTime"];
  }
  if (__reminderTime_isset)
  {
    [encoder encodeInt64: __reminderTime forKey: @"reminderTime"];
  }
  if (__placeName_isset)
  {
    [encoder encodeObject: __placeName forKey: @"placeName"];
  }
  if (__contentClass_isset)
  {
    [encoder encodeObject: __contentClass forKey: @"contentClass"];
  }
  if (__applicationData_isset)
  {
    [encoder encodeObject: __applicationData forKey: @"applicationData"];
  }
  if (__lastEditedBy_isset)
  {
    [encoder encodeObject: __lastEditedBy forKey: @"lastEditedBy"];
  }
  if (__classifications_isset)
  {
    [encoder encodeObject: __classifications forKey: @"classifications"];
  }
  if (__creatorId_isset)
  {
    [encoder encodeInt32: __creatorId forKey: @"creatorId"];
  }
  if (__lastEditorId_isset)
  {
    [encoder encodeInt32: __lastEditorId forKey: @"lastEditorId"];
  }
}

- (void) dealloc
{
  [__author release_stub];
  [__source release_stub];
  [__sourceURL release_stub];
  [__sourceApplication release_stub];
  [__placeName release_stub];
  [__contentClass release_stub];
  [__applicationData release_stub];
  [__lastEditedBy release_stub];
  [__classifications release_stub];
  [super dealloc_stub];
}

- (int64_t) subjectDate {
  return __subjectDate;
}

- (void) setSubjectDate: (int64_t) subjectDate {
  __subjectDate = subjectDate;
  __subjectDate_isset = YES;
}

- (BOOL) subjectDateIsSet {
  return __subjectDate_isset;
}

- (void) unsetSubjectDate {
  __subjectDate_isset = NO;
}

- (double) latitude {
  return __latitude;
}

- (void) setLatitude: (double) latitude {
  __latitude = latitude;
  __latitude_isset = YES;
}

- (BOOL) latitudeIsSet {
  return __latitude_isset;
}

- (void) unsetLatitude {
  __latitude_isset = NO;
}

- (double) longitude {
  return __longitude;
}

- (void) setLongitude: (double) longitude {
  __longitude = longitude;
  __longitude_isset = YES;
}

- (BOOL) longitudeIsSet {
  return __longitude_isset;
}

- (void) unsetLongitude {
  __longitude_isset = NO;
}

- (double) altitude {
  return __altitude;
}

- (void) setAltitude: (double) altitude {
  __altitude = altitude;
  __altitude_isset = YES;
}

- (BOOL) altitudeIsSet {
  return __altitude_isset;
}

- (void) unsetAltitude {
  __altitude_isset = NO;
}

- (NSString *) author {
  return [[__author retain_stub] autorelease_stub];
}

- (void) setAuthor: (NSString *) author {
  [author retain_stub];
  [__author release_stub];
  __author = author;
  __author_isset = YES;
}

- (BOOL) authorIsSet {
  return __author_isset;
}

- (void) unsetAuthor {
  [__author release_stub];
  __author = nil;
  __author_isset = NO;
}

- (NSString *) source {
  return [[__source retain_stub] autorelease_stub];
}

- (void) setSource: (NSString *) source {
  [source retain_stub];
  [__source release_stub];
  __source = source;
  __source_isset = YES;
}

- (BOOL) sourceIsSet {
  return __source_isset;
}

- (void) unsetSource {
  [__source release_stub];
  __source = nil;
  __source_isset = NO;
}

- (NSString *) sourceURL {
  return [[__sourceURL retain_stub] autorelease_stub];
}

- (void) setSourceURL: (NSString *) sourceURL {
  [sourceURL retain_stub];
  [__sourceURL release_stub];
  __sourceURL = sourceURL;
  __sourceURL_isset = YES;
}

- (BOOL) sourceURLIsSet {
  return __sourceURL_isset;
}

- (void) unsetSourceURL {
  [__sourceURL release_stub];
  __sourceURL = nil;
  __sourceURL_isset = NO;
}

- (NSString *) sourceApplication {
  return [[__sourceApplication retain_stub] autorelease_stub];
}

- (void) setSourceApplication: (NSString *) sourceApplication {
  [sourceApplication retain_stub];
  [__sourceApplication release_stub];
  __sourceApplication = sourceApplication;
  __sourceApplication_isset = YES;
}

- (BOOL) sourceApplicationIsSet {
  return __sourceApplication_isset;
}

- (void) unsetSourceApplication {
  [__sourceApplication release_stub];
  __sourceApplication = nil;
  __sourceApplication_isset = NO;
}

- (int64_t) shareDate {
  return __shareDate;
}

- (void) setShareDate: (int64_t) shareDate {
  __shareDate = shareDate;
  __shareDate_isset = YES;
}

- (BOOL) shareDateIsSet {
  return __shareDate_isset;
}

- (void) unsetShareDate {
  __shareDate_isset = NO;
}

- (int64_t) reminderOrder {
  return __reminderOrder;
}

- (void) setReminderOrder: (int64_t) reminderOrder {
  __reminderOrder = reminderOrder;
  __reminderOrder_isset = YES;
}

- (BOOL) reminderOrderIsSet {
  return __reminderOrder_isset;
}

- (void) unsetReminderOrder {
  __reminderOrder_isset = NO;
}

- (int64_t) reminderDoneTime {
  return __reminderDoneTime;
}

- (void) setReminderDoneTime: (int64_t) reminderDoneTime {
  __reminderDoneTime = reminderDoneTime;
  __reminderDoneTime_isset = YES;
}

- (BOOL) reminderDoneTimeIsSet {
  return __reminderDoneTime_isset;
}

- (void) unsetReminderDoneTime {
  __reminderDoneTime_isset = NO;
}

- (int64_t) reminderTime {
  return __reminderTime;
}

- (void) setReminderTime: (int64_t) reminderTime {
  __reminderTime = reminderTime;
  __reminderTime_isset = YES;
}

- (BOOL) reminderTimeIsSet {
  return __reminderTime_isset;
}

- (void) unsetReminderTime {
  __reminderTime_isset = NO;
}

- (NSString *) placeName {
  return [[__placeName retain_stub] autorelease_stub];
}

- (void) setPlaceName: (NSString *) placeName {
  [placeName retain_stub];
  [__placeName release_stub];
  __placeName = placeName;
  __placeName_isset = YES;
}

- (BOOL) placeNameIsSet {
  return __placeName_isset;
}

- (void) unsetPlaceName {
  [__placeName release_stub];
  __placeName = nil;
  __placeName_isset = NO;
}

- (NSString *) contentClass {
  return [[__contentClass retain_stub] autorelease_stub];
}

- (void) setContentClass: (NSString *) contentClass {
  [contentClass retain_stub];
  [__contentClass release_stub];
  __contentClass = contentClass;
  __contentClass_isset = YES;
}

- (BOOL) contentClassIsSet {
  return __contentClass_isset;
}

- (void) unsetContentClass {
  [__contentClass release_stub];
  __contentClass = nil;
  __contentClass_isset = NO;
}

- (EDAMLazyMap *) applicationData {
  return [[__applicationData retain_stub] autorelease_stub];
}

- (void) setApplicationData: (EDAMLazyMap *) applicationData {
  [applicationData retain_stub];
  [__applicationData release_stub];
  __applicationData = applicationData;
  __applicationData_isset = YES;
}

- (BOOL) applicationDataIsSet {
  return __applicationData_isset;
}

- (void) unsetApplicationData {
  [__applicationData release_stub];
  __applicationData = nil;
  __applicationData_isset = NO;
}

- (NSString *) lastEditedBy {
  return [[__lastEditedBy retain_stub] autorelease_stub];
}

- (void) setLastEditedBy: (NSString *) lastEditedBy {
  [lastEditedBy retain_stub];
  [__lastEditedBy release_stub];
  __lastEditedBy = lastEditedBy;
  __lastEditedBy_isset = YES;
}

- (BOOL) lastEditedByIsSet {
  return __lastEditedBy_isset;
}

- (void) unsetLastEditedBy {
  [__lastEditedBy release_stub];
  __lastEditedBy = nil;
  __lastEditedBy_isset = NO;
}

- (NSMutableDictionary *) classifications {
  return [[__classifications retain_stub] autorelease_stub];
}

- (void) setClassifications: (NSMutableDictionary *) classifications {
  [classifications retain_stub];
  [__classifications release_stub];
  __classifications = classifications;
  __classifications_isset = YES;
}

- (BOOL) classificationsIsSet {
  return __classifications_isset;
}

- (void) unsetClassifications {
  [__classifications release_stub];
  __classifications = nil;
  __classifications_isset = NO;
}

- (int32_t) creatorId {
  return __creatorId;
}

- (void) setCreatorId: (int32_t) creatorId {
  __creatorId = creatorId;
  __creatorId_isset = YES;
}

- (BOOL) creatorIdIsSet {
  return __creatorId_isset;
}

- (void) unsetCreatorId {
  __creatorId_isset = NO;
}

- (int32_t) lastEditorId {
  return __lastEditorId;
}

- (void) setLastEditorId: (int32_t) lastEditorId {
  __lastEditorId = lastEditorId;
  __lastEditorId_isset = YES;
}

- (BOOL) lastEditorIdIsSet {
  return __lastEditorId_isset;
}

- (void) unsetLastEditorId {
  __lastEditorId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setSubjectDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setLatitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setLongitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setAltitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAuthor: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSource: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSourceURL: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSourceApplication: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setShareDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 18:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setReminderOrder: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 19:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setReminderDoneTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 20:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setReminderTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 21:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPlaceName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 22:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setContentClass: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 23:
        if (fieldType == TType_STRUCT) {
          EDAMLazyMap *fieldValue = [[EDAMLazyMap alloc] init];
          [fieldValue read: inProtocol];
          [self setApplicationData: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 24:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLastEditedBy: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 26:
        if (fieldType == TType_MAP) {
          int _size21;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size21];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size21];
          int _i22;
          for (_i22 = 0; _i22 < _size21; ++_i22)
          {
            NSString * _key23 = [inProtocol readString];
            NSString * _val24 = [inProtocol readString];
            [fieldValue setObject: _val24 forKey: _key23];
          }
          [inProtocol readMapEnd];
          [self setClassifications: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 27:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCreatorId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 28:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setLastEditorId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"NoteAttributes"];
  if (__subjectDate_isset) {
    [outProtocol writeFieldBeginWithName: @"subjectDate" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __subjectDate];
    [outProtocol writeFieldEnd];
  }
  if (__latitude_isset) {
    [outProtocol writeFieldBeginWithName: @"latitude" type: TType_DOUBLE fieldID: 10];
    [outProtocol writeDouble: __latitude];
    [outProtocol writeFieldEnd];
  }
  if (__longitude_isset) {
    [outProtocol writeFieldBeginWithName: @"longitude" type: TType_DOUBLE fieldID: 11];
    [outProtocol writeDouble: __longitude];
    [outProtocol writeFieldEnd];
  }
  if (__altitude_isset) {
    [outProtocol writeFieldBeginWithName: @"altitude" type: TType_DOUBLE fieldID: 12];
    [outProtocol writeDouble: __altitude];
    [outProtocol writeFieldEnd];
  }
  if (__author_isset) {
    if (__author != nil) {
      [outProtocol writeFieldBeginWithName: @"author" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __author];
      [outProtocol writeFieldEnd];
    }
  }
  if (__source_isset) {
    if (__source != nil) {
      [outProtocol writeFieldBeginWithName: @"source" type: TType_STRING fieldID: 14];
      [outProtocol writeString: __source];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sourceURL_isset) {
    if (__sourceURL != nil) {
      [outProtocol writeFieldBeginWithName: @"sourceURL" type: TType_STRING fieldID: 15];
      [outProtocol writeString: __sourceURL];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sourceApplication_isset) {
    if (__sourceApplication != nil) {
      [outProtocol writeFieldBeginWithName: @"sourceApplication" type: TType_STRING fieldID: 16];
      [outProtocol writeString: __sourceApplication];
      [outProtocol writeFieldEnd];
    }
  }
  if (__shareDate_isset) {
    [outProtocol writeFieldBeginWithName: @"shareDate" type: TType_I64 fieldID: 17];
    [outProtocol writeI64: __shareDate];
    [outProtocol writeFieldEnd];
  }
  if (__reminderOrder_isset) {
    [outProtocol writeFieldBeginWithName: @"reminderOrder" type: TType_I64 fieldID: 18];
    [outProtocol writeI64: __reminderOrder];
    [outProtocol writeFieldEnd];
  }
  if (__reminderDoneTime_isset) {
    [outProtocol writeFieldBeginWithName: @"reminderDoneTime" type: TType_I64 fieldID: 19];
    [outProtocol writeI64: __reminderDoneTime];
    [outProtocol writeFieldEnd];
  }
  if (__reminderTime_isset) {
    [outProtocol writeFieldBeginWithName: @"reminderTime" type: TType_I64 fieldID: 20];
    [outProtocol writeI64: __reminderTime];
    [outProtocol writeFieldEnd];
  }
  if (__placeName_isset) {
    if (__placeName != nil) {
      [outProtocol writeFieldBeginWithName: @"placeName" type: TType_STRING fieldID: 21];
      [outProtocol writeString: __placeName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__contentClass_isset) {
    if (__contentClass != nil) {
      [outProtocol writeFieldBeginWithName: @"contentClass" type: TType_STRING fieldID: 22];
      [outProtocol writeString: __contentClass];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationData_isset) {
    if (__applicationData != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationData" type: TType_STRUCT fieldID: 23];
      [__applicationData write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__lastEditedBy_isset) {
    if (__lastEditedBy != nil) {
      [outProtocol writeFieldBeginWithName: @"lastEditedBy" type: TType_STRING fieldID: 24];
      [outProtocol writeString: __lastEditedBy];
      [outProtocol writeFieldEnd];
    }
  }
  if (__classifications_isset) {
    if (__classifications != nil) {
      [outProtocol writeFieldBeginWithName: @"classifications" type: TType_MAP fieldID: 26];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__classifications count]];
        NSEnumerator * _iter25 = [__classifications keyEnumerator];
        id key26;
        while ((key26 = [_iter25 nextObject]))
        {
          [outProtocol writeString: key26];
          [outProtocol writeString: [__classifications objectForKey: key26]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__creatorId_isset) {
    [outProtocol writeFieldBeginWithName: @"creatorId" type: TType_I32 fieldID: 27];
    [outProtocol writeI32: __creatorId];
    [outProtocol writeFieldEnd];
  }
  if (__lastEditorId_isset) {
    [outProtocol writeFieldBeginWithName: @"lastEditorId" type: TType_I32 fieldID: 28];
    [outProtocol writeI32: __lastEditorId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NoteAttributes("];
  [ms appendString: @"subjectDate:"];
  [ms appendFormat: @"%qi", __subjectDate];
  [ms appendString: @",latitude:"];
  [ms appendFormat: @"%f", __latitude];
  [ms appendString: @",longitude:"];
  [ms appendFormat: @"%f", __longitude];
  [ms appendString: @",altitude:"];
  [ms appendFormat: @"%f", __altitude];
  [ms appendString: @",author:"];
  [ms appendFormat: @"\"%@\"", __author];
  [ms appendString: @",source:"];
  [ms appendFormat: @"\"%@\"", __source];
  [ms appendString: @",sourceURL:"];
  [ms appendFormat: @"\"%@\"", __sourceURL];
  [ms appendString: @",sourceApplication:"];
  [ms appendFormat: @"\"%@\"", __sourceApplication];
  [ms appendString: @",shareDate:"];
  [ms appendFormat: @"%qi", __shareDate];
  [ms appendString: @",reminderOrder:"];
  [ms appendFormat: @"%qi", __reminderOrder];
  [ms appendString: @",reminderDoneTime:"];
  [ms appendFormat: @"%qi", __reminderDoneTime];
  [ms appendString: @",reminderTime:"];
  [ms appendFormat: @"%qi", __reminderTime];
  [ms appendString: @",placeName:"];
  [ms appendFormat: @"\"%@\"", __placeName];
  [ms appendString: @",contentClass:"];
  [ms appendFormat: @"\"%@\"", __contentClass];
  [ms appendString: @",applicationData:"];
  [ms appendFormat: @"%@", __applicationData];
  [ms appendString: @",lastEditedBy:"];
  [ms appendFormat: @"\"%@\"", __lastEditedBy];
  [ms appendString: @",classifications:"];
  [ms appendFormat: @"%@", __classifications];
  [ms appendString: @",creatorId:"];
  [ms appendFormat: @"%i", __creatorId];
  [ms appendString: @",lastEditorId:"];
  [ms appendFormat: @"%i", __lastEditorId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation EDAMNote

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithGuid: (EDAMGuid) guid title: (NSString *) title content: (NSString *) content contentHash: (NSData *) contentHash contentLength: (int32_t) contentLength created: (EDAMTimestamp) created updated: (EDAMTimestamp) updated deleted: (EDAMTimestamp) deleted active: (BOOL) active updateSequenceNum: (int32_t) updateSequenceNum notebookGuid: (NSString *) notebookGuid tagGuids: (NSMutableArray *) tagGuids resources: (NSMutableArray *) resources attributes: (EDAMNoteAttributes *) attributes tagNames: (NSMutableArray *) tagNames
{
  self = [super init];
  __guid = [guid retain_stub];
  __guid_isset = YES;
  __title = [title retain_stub];
  __title_isset = YES;
  __content = [content retain_stub];
  __content_isset = YES;
  __contentHash = [contentHash retain_stub];
  __contentHash_isset = YES;
  __contentLength = contentLength;
  __contentLength_isset = YES;
  __created = created;
  __created_isset = YES;
  __updated = updated;
  __updated_isset = YES;
  __deleted = deleted;
  __deleted_isset = YES;
  __active = active;
  __active_isset = YES;
  __updateSequenceNum = updateSequenceNum;
  __updateSequenceNum_isset = YES;
  __notebookGuid = [notebookGuid retain_stub];
  __notebookGuid_isset = YES;
  __tagGuids = [tagGuids retain_stub];
  __tagGuids_isset = YES;
  __resources = [resources retain_stub];
  __resources_isset = YES;
  __attributes = [attributes retain_stub];
  __attributes_isset = YES;
  __tagNames = [tagNames retain_stub];
  __tagNames_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"guid"])
  {
    __guid = [[decoder decodeObjectForKey: @"guid"] retain_stub];
    __guid_isset = YES;
  }
  if ([decoder containsValueForKey: @"title"])
  {
    __title = [[decoder decodeObjectForKey: @"title"] retain_stub];
    __title_isset = YES;
  }
  if ([decoder containsValueForKey: @"content"])
  {
    __content = [[decoder decodeObjectForKey: @"content"] retain_stub];
    __content_isset = YES;
  }
  if ([decoder containsValueForKey: @"contentHash"])
  {
    __contentHash = [[decoder decodeObjectForKey: @"contentHash"] retain_stub];
    __contentHash_isset = YES;
  }
  if ([decoder containsValueForKey: @"contentLength"])
  {
    __contentLength = [decoder decodeInt32ForKey: @"contentLength"];
    __contentLength_isset = YES;
  }
  if ([decoder containsValueForKey: @"created"])
  {
    __created = [decoder decodeInt64ForKey: @"created"];
    __created_isset = YES;
  }
  if ([decoder containsValueForKey: @"updated"])
  {
    __updated = [decoder decodeInt64ForKey: @"updated"];
    __updated_isset = YES;
  }
  if ([decoder containsValueForKey: @"deleted"])
  {
    __deleted = [decoder decodeInt64ForKey: @"deleted"];
    __deleted_isset = YES;
  }
  if ([decoder containsValueForKey: @"active"])
  {
    __active = [decoder decodeBoolForKey: @"active"];
    __active_isset = YES;
  }
  if ([decoder containsValueForKey: @"updateSequenceNum"])
  {
    __updateSequenceNum = [decoder decodeInt32ForKey: @"updateSequenceNum"];
    __updateSequenceNum_isset = YES;
  }
  if ([decoder containsValueForKey: @"notebookGuid"])
  {
    __notebookGuid = [[decoder decodeObjectForKey: @"notebookGuid"] retain_stub];
    __notebookGuid_isset = YES;
  }
  if ([decoder containsValueForKey: @"tagGuids"])
  {
    __tagGuids = [[decoder decodeObjectForKey: @"tagGuids"] retain_stub];
    __tagGuids_isset = YES;
  }
  if ([decoder containsValueForKey: @"resources"])
  {
    __resources = [[decoder decodeObjectForKey: @"resources"] retain_stub];
    __resources_isset = YES;
  }
  if ([decoder containsValueForKey: @"attributes"])
  {
    __attributes = [[decoder decodeObjectForKey: @"attributes"] retain_stub];
    __attributes_isset = YES;
  }
  if ([decoder containsValueForKey: @"tagNames"])
  {
    __tagNames = [[decoder decodeObjectForKey: @"tagNames"] retain_stub];
    __tagNames_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__guid_isset)
  {
    [encoder encodeObject: __guid forKey: @"guid"];
  }
  if (__title_isset)
  {
    [encoder encodeObject: __title forKey: @"title"];
  }
  if (__content_isset)
  {
    [encoder encodeObject: __content forKey: @"content"];
  }
  if (__contentHash_isset)
  {
    [encoder encodeObject: __contentHash forKey: @"contentHash"];
  }
  if (__contentLength_isset)
  {
    [encoder encodeInt32: __contentLength forKey: @"contentLength"];
  }
  if (__created_isset)
  {
    [encoder encodeInt64: __created forKey: @"created"];
  }
  if (__updated_isset)
  {
    [encoder encodeInt64: __updated forKey: @"updated"];
  }
  if (__deleted_isset)
  {
    [encoder encodeInt64: __deleted forKey: @"deleted"];
  }
  if (__active_isset)
  {
    [encoder encodeBool: __active forKey: @"active"];
  }
  if (__updateSequenceNum_isset)
  {
    [encoder encodeInt32: __updateSequenceNum forKey: @"updateSequenceNum"];
  }
  if (__notebookGuid_isset)
  {
    [encoder encodeObject: __notebookGuid forKey: @"notebookGuid"];
  }
  if (__tagGuids_isset)
  {
    [encoder encodeObject: __tagGuids forKey: @"tagGuids"];
  }
  if (__resources_isset)
  {
    [encoder encodeObject: __resources forKey: @"resources"];
  }
  if (__attributes_isset)
  {
    [encoder encodeObject: __attributes forKey: @"attributes"];
  }
  if (__tagNames_isset)
  {
    [encoder encodeObject: __tagNames forKey: @"tagNames"];
  }
}

- (void) dealloc
{
  [__guid release_stub];
  [__title release_stub];
  [__content release_stub];
  [__contentHash release_stub];
  [__notebookGuid release_stub];
  [__tagGuids release_stub];
  [__resources release_stub];
  [__attributes release_stub];
  [__tagNames release_stub];
  [super dealloc_stub];
}

- (NSString *) guid {
  return [[__guid retain_stub] autorelease_stub];
}

- (void) setGuid: (NSString *) guid {
  [guid retain_stub];
  [__guid release_stub];
  __guid = guid;
  __guid_isset = YES;
}

- (BOOL) guidIsSet {
  return __guid_isset;
}

- (void) unsetGuid {
  [__guid release_stub];
  __guid = nil;
  __guid_isset = NO;
}

- (NSString *) title {
  return [[__title retain_stub] autorelease_stub];
}

- (void) setTitle: (NSString *) title {
  [title retain_stub];
  [__title release_stub];
  __title = title;
  __title_isset = YES;
}

- (BOOL) titleIsSet {
  return __title_isset;
}

- (void) unsetTitle {
  [__title release_stub];
  __title = nil;
  __title_isset = NO;
}

- (NSString *) content {
  return [[__content retain_stub] autorelease_stub];
}

- (void) setContent: (NSString *) content {
  [content retain_stub];
  [__content release_stub];
  __content = content;
  __content_isset = YES;
}

- (BOOL) contentIsSet {
  return __content_isset;
}

- (void) unsetContent {
  [__content release_stub];
  __content = nil;
  __content_isset = NO;
}

- (NSData *) contentHash {
  return [[__contentHash retain_stub] autorelease_stub];
}

- (void) setContentHash: (NSData *) contentHash {
  [contentHash retain_stub];
  [__contentHash release_stub];
  __contentHash = contentHash;
  __contentHash_isset = YES;
}

- (BOOL) contentHashIsSet {
  return __contentHash_isset;
}

- (void) unsetContentHash {
  [__contentHash release_stub];
  __contentHash = nil;
  __contentHash_isset = NO;
}

- (int32_t) contentLength {
  return __contentLength;
}

- (void) setContentLength: (int32_t) contentLength {
  __contentLength = contentLength;
  __contentLength_isset = YES;
}

- (BOOL) contentLengthIsSet {
  return __contentLength_isset;
}

- (void) unsetContentLength {
  __contentLength_isset = NO;
}

- (int64_t) created {
  return __created;
}

- (void) setCreated: (int64_t) created {
  __created = created;
  __created_isset = YES;
}

- (BOOL) createdIsSet {
  return __created_isset;
}

- (void) unsetCreated {
  __created_isset = NO;
}

- (int64_t) updated {
  return __updated;
}

- (void) setUpdated: (int64_t) updated {
  __updated = updated;
  __updated_isset = YES;
}

- (BOOL) updatedIsSet {
  return __updated_isset;
}

- (void) unsetUpdated {
  __updated_isset = NO;
}

- (int64_t) deleted {
  return __deleted;
}

- (void) setDeleted: (int64_t) deleted {
  __deleted = deleted;
  __deleted_isset = YES;
}

- (BOOL) deletedIsSet {
  return __deleted_isset;
}

- (void) unsetDeleted {
  __deleted_isset = NO;
}

- (BOOL) active {
  return __active;
}

- (void) setActive: (BOOL) active {
  __active = active;
  __active_isset = YES;
}

- (BOOL) activeIsSet {
  return __active_isset;
}

- (void) unsetActive {
  __active_isset = NO;
}

- (int32_t) updateSequenceNum {
  return __updateSequenceNum;
}

- (void) setUpdateSequenceNum: (int32_t) updateSequenceNum {
  __updateSequenceNum = updateSequenceNum;
  __updateSequenceNum_isset = YES;
}

- (BOOL) updateSequenceNumIsSet {
  return __updateSequenceNum_isset;
}

- (void) unsetUpdateSequenceNum {
  __updateSequenceNum_isset = NO;
}

- (NSString *) notebookGuid {
  return [[__notebookGuid retain_stub] autorelease_stub];
}

- (void) setNotebookGuid: (NSString *) notebookGuid {
  [notebookGuid retain_stub];
  [__notebookGuid release_stub];
  __notebookGuid = notebookGuid;
  __notebookGuid_isset = YES;
}

- (BOOL) notebookGuidIsSet {
  return __notebookGuid_isset;
}

- (void) unsetNotebookGuid {
  [__notebookGuid release_stub];
  __notebookGuid = nil;
  __notebookGuid_isset = NO;
}

- (NSMutableArray *) tagGuids {
  return [[__tagGuids retain_stub] autorelease_stub];
}

- (void) setTagGuids: (NSMutableArray *) tagGuids {
  [tagGuids retain_stub];
  [__tagGuids release_stub];
  __tagGuids = tagGuids;
  __tagGuids_isset = YES;
}

- (BOOL) tagGuidsIsSet {
  return __tagGuids_isset;
}

- (void) unsetTagGuids {
  [__tagGuids release_stub];
  __tagGuids = nil;
  __tagGuids_isset = NO;
}

- (NSMutableArray *) resources {
  return [[__resources retain_stub] autorelease_stub];
}

- (void) setResources: (NSMutableArray *) resources {
  [resources retain_stub];
  [__resources release_stub];
  __resources = resources;
  __resources_isset = YES;
}

- (BOOL) resourcesIsSet {
  return __resources_isset;
}

- (void) unsetResources {
  [__resources release_stub];
  __resources = nil;
  __resources_isset = NO;
}

- (EDAMNoteAttributes *) attributes {
  return [[__attributes retain_stub] autorelease_stub];
}

- (void) setAttributes: (EDAMNoteAttributes *) attributes {
  [attributes retain_stub];
  [__attributes release_stub];
  __attributes = attributes;
  __attributes_isset = YES;
}

- (BOOL) attributesIsSet {
  return __attributes_isset;
}

- (void) unsetAttributes {
  [__attributes release_stub];
  __attributes = nil;
  __attributes_isset = NO;
}

- (NSMutableArray *) tagNames {
  return [[__tagNames retain_stub] autorelease_stub];
}

- (void) setTagNames: (NSMutableArray *) tagNames {
  [tagNames retain_stub];
  [__tagNames release_stub];
  __tagNames = tagNames;
  __tagNames_isset = YES;
}

- (BOOL) tagNamesIsSet {
  return __tagNames_isset;
}

- (void) unsetTagNames {
  [__tagNames release_stub];
  __tagNames = nil;
  __tagNames_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGuid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setContent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setContentHash: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setContentLength: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCreated: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUpdated: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDeleted: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setActive: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setUpdateSequenceNum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNotebookGuid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_LIST) {
          int _size27;
          [inProtocol readListBeginReturningElementType: NULL size: &_size27];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size27];
          int _i28;
          for (_i28 = 0; _i28 < _size27; ++_i28)
          {
            NSString * _elem29 = [inProtocol readString];
            [fieldValue addObject: _elem29];
          }
          [inProtocol readListEnd];
          [self setTagGuids: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_LIST) {
          int _size30;
          [inProtocol readListBeginReturningElementType: NULL size: &_size30];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size30];
          int _i31;
          for (_i31 = 0; _i31 < _size30; ++_i31)
          {
            EDAMResource *_elem32 = [[EDAMResource alloc] init];
            [_elem32 read: inProtocol];
            [fieldValue addObject: _elem32];
            [_elem32 release_stub];
          }
          [inProtocol readListEnd];
          [self setResources: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRUCT) {
          EDAMNoteAttributes *fieldValue = [[EDAMNoteAttributes alloc] init];
          [fieldValue read: inProtocol];
          [self setAttributes: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_LIST) {
          int _size33;
          [inProtocol readListBeginReturningElementType: NULL size: &_size33];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size33];
          int _i34;
          for (_i34 = 0; _i34 < _size33; ++_i34)
          {
            NSString * _elem35 = [inProtocol readString];
            [fieldValue addObject: _elem35];
          }
          [inProtocol readListEnd];
          [self setTagNames: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Note"];
  if (__guid_isset) {
    if (__guid != nil) {
      [outProtocol writeFieldBeginWithName: @"guid" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __guid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__title_isset) {
    if (__title != nil) {
      [outProtocol writeFieldBeginWithName: @"title" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __title];
      [outProtocol writeFieldEnd];
    }
  }
  if (__content_isset) {
    if (__content != nil) {
      [outProtocol writeFieldBeginWithName: @"content" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __content];
      [outProtocol writeFieldEnd];
    }
  }
  if (__contentHash_isset) {
    if (__contentHash != nil) {
      [outProtocol writeFieldBeginWithName: @"contentHash" type: TType_STRING fieldID: 4];
      [outProtocol writeBinary: __contentHash];
      [outProtocol writeFieldEnd];
    }
  }
  if (__contentLength_isset) {
    [outProtocol writeFieldBeginWithName: @"contentLength" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __contentLength];
    [outProtocol writeFieldEnd];
  }
  if (__created_isset) {
    [outProtocol writeFieldBeginWithName: @"created" type: TType_I64 fieldID: 6];
    [outProtocol writeI64: __created];
    [outProtocol writeFieldEnd];
  }
  if (__updated_isset) {
    [outProtocol writeFieldBeginWithName: @"updated" type: TType_I64 fieldID: 7];
    [outProtocol writeI64: __updated];
    [outProtocol writeFieldEnd];
  }
  if (__deleted_isset) {
    [outProtocol writeFieldBeginWithName: @"deleted" type: TType_I64 fieldID: 8];
    [outProtocol writeI64: __deleted];
    [outProtocol writeFieldEnd];
  }
  if (__active_isset) {
    [outProtocol writeFieldBeginWithName: @"active" type: TType_BOOL fieldID: 9];
    [outProtocol writeBool: __active];
    [outProtocol writeFieldEnd];
  }
  if (__updateSequenceNum_isset) {
    [outProtocol writeFieldBeginWithName: @"updateSequenceNum" type: TType_I32 fieldID: 10];
    [outProtocol writeI32: __updateSequenceNum];
    [outProtocol writeFieldEnd];
  }
  if (__notebookGuid_isset) {
    if (__notebookGuid != nil) {
      [outProtocol writeFieldBeginWithName: @"notebookGuid" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __notebookGuid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__tagGuids_isset) {
    if (__tagGuids != nil) {
      [outProtocol writeFieldBeginWithName: @"tagGuids" type: TType_LIST fieldID: 12];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__tagGuids count]];
        int i37;
        for (i37 = 0; i37 < [__tagGuids count]; i37++)
        {
          [outProtocol writeString: [__tagGuids objectAtIndex: i37]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__resources_isset) {
    if (__resources != nil) {
      [outProtocol writeFieldBeginWithName: @"resources" type: TType_LIST fieldID: 13];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__resources count]];
        int i39;
        for (i39 = 0; i39 < [__resources count]; i39++)
        {
          [[__resources objectAtIndex: i39] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__attributes_isset) {
    if (__attributes != nil) {
      [outProtocol writeFieldBeginWithName: @"attributes" type: TType_STRUCT fieldID: 14];
      [__attributes write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__tagNames_isset) {
    if (__tagNames != nil) {
      [outProtocol writeFieldBeginWithName: @"tagNames" type: TType_LIST fieldID: 15];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__tagNames count]];
        int i41;
        for (i41 = 0; i41 < [__tagNames count]; i41++)
        {
          [outProtocol writeString: [__tagNames objectAtIndex: i41]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Note("];
  [ms appendString: @"guid:"];
  [ms appendFormat: @"\"%@\"", __guid];
  [ms appendString: @",title:"];
  [ms appendFormat: @"\"%@\"", __title];
  [ms appendString: @",content:"];
  [ms appendFormat: @"\"%@\"", __content];
  [ms appendString: @",contentHash:"];
  [ms appendFormat: @"\"%@\"", __contentHash];
  [ms appendString: @",contentLength:"];
  [ms appendFormat: @"%i", __contentLength];
  [ms appendString: @",created:"];
  [ms appendFormat: @"%qi", __created];
  [ms appendString: @",updated:"];
  [ms appendFormat: @"%qi", __updated];
  [ms appendString: @",deleted:"];
  [ms appendFormat: @"%qi", __deleted];
  [ms appendString: @",active:"];
  [ms appendFormat: @"%i", __active];
  [ms appendString: @",updateSequenceNum:"];
  [ms appendFormat: @"%i", __updateSequenceNum];
  [ms appendString: @",notebookGuid:"];
  [ms appendFormat: @"\"%@\"", __notebookGuid];
  [ms appendString: @",tagGuids:"];
  [ms appendFormat: @"%@", __tagGuids];
  [ms appendString: @",resources:"];
  [ms appendFormat: @"%@", __resources];
  [ms appendString: @",attributes:"];
  [ms appendFormat: @"%@", __attributes];
  [ms appendString: @",tagNames:"];
  [ms appendFormat: @"%@", __tagNames];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation EDAMPublishing

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUri: (NSString *) uri order: (int) order ascending: (BOOL) ascending publicDescription: (NSString *) publicDescription
{
  self = [super init];
  __uri = [uri retain_stub];
  __uri_isset = YES;
  __order = order;
  __order_isset = YES;
  __ascending = ascending;
  __ascending_isset = YES;
  __publicDescription = [publicDescription retain_stub];
  __publicDescription_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"uri"])
  {
    __uri = [[decoder decodeObjectForKey: @"uri"] retain_stub];
    __uri_isset = YES;
  }
  if ([decoder containsValueForKey: @"order"])
  {
    __order = [decoder decodeIntForKey: @"order"];
    __order_isset = YES;
  }
  if ([decoder containsValueForKey: @"ascending"])
  {
    __ascending = [decoder decodeBoolForKey: @"ascending"];
    __ascending_isset = YES;
  }
  if ([decoder containsValueForKey: @"publicDescription"])
  {
    __publicDescription = [[decoder decodeObjectForKey: @"publicDescription"] retain_stub];
    __publicDescription_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__uri_isset)
  {
    [encoder encodeObject: __uri forKey: @"uri"];
  }
  if (__order_isset)
  {
    [encoder encodeInt: __order forKey: @"order"];
  }
  if (__ascending_isset)
  {
    [encoder encodeBool: __ascending forKey: @"ascending"];
  }
  if (__publicDescription_isset)
  {
    [encoder encodeObject: __publicDescription forKey: @"publicDescription"];
  }
}

- (void) dealloc
{
  [__uri release_stub];
  [__publicDescription release_stub];
  [super dealloc_stub];
}

- (NSString *) uri {
  return [[__uri retain_stub] autorelease_stub];
}

- (void) setUri: (NSString *) uri {
  [uri retain_stub];
  [__uri release_stub];
  __uri = uri;
  __uri_isset = YES;
}

- (BOOL) uriIsSet {
  return __uri_isset;
}

- (void) unsetUri {
  [__uri release_stub];
  __uri = nil;
  __uri_isset = NO;
}

- (int) order {
  return __order;
}

- (void) setOrder: (int) order {
  __order = order;
  __order_isset = YES;
}

- (BOOL) orderIsSet {
  return __order_isset;
}

- (void) unsetOrder {
  __order_isset = NO;
}

- (BOOL) ascending {
  return __ascending;
}

- (void) setAscending: (BOOL) ascending {
  __ascending = ascending;
  __ascending_isset = YES;
}

- (BOOL) ascendingIsSet {
  return __ascending_isset;
}

- (void) unsetAscending {
  __ascending_isset = NO;
}

- (NSString *) publicDescription {
  return [[__publicDescription retain_stub] autorelease_stub];
}

- (void) setPublicDescription: (NSString *) publicDescription {
  [publicDescription retain_stub];
  [__publicDescription release_stub];
  __publicDescription = publicDescription;
  __publicDescription_isset = YES;
}

- (BOOL) publicDescriptionIsSet {
  return __publicDescription_isset;
}

- (void) unsetPublicDescription {
  [__publicDescription release_stub];
  __publicDescription = nil;
  __publicDescription_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUri: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setOrder: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setAscending: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPublicDescription: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Publishing"];
  if (__uri_isset) {
    if (__uri != nil) {
      [outProtocol writeFieldBeginWithName: @"uri" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __uri];
      [outProtocol writeFieldEnd];
    }
  }
  if (__order_isset) {
    [outProtocol writeFieldBeginWithName: @"order" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __order];
    [outProtocol writeFieldEnd];
  }
  if (__ascending_isset) {
    [outProtocol writeFieldBeginWithName: @"ascending" type: TType_BOOL fieldID: 3];
    [outProtocol writeBool: __ascending];
    [outProtocol writeFieldEnd];
  }
  if (__publicDescription_isset) {
    if (__publicDescription != nil) {
      [outProtocol writeFieldBeginWithName: @"publicDescription" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __publicDescription];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Publishing("];
  [ms appendString: @"uri:"];
  [ms appendFormat: @"\"%@\"", __uri];
  [ms appendString: @",order:"];
  [ms appendFormat: @"%i", __order];
  [ms appendString: @",ascending:"];
  [ms appendFormat: @"%i", __ascending];
  [ms appendString: @",publicDescription:"];
  [ms appendFormat: @"\"%@\"", __publicDescription];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation EDAMBusinessNotebook

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithNotebookDescription: (NSString *) notebookDescription privilege: (int) privilege recommended: (BOOL) recommended
{
  self = [super init];
  __notebookDescription = [notebookDescription retain_stub];
  __notebookDescription_isset = YES;
  __privilege = privilege;
  __privilege_isset = YES;
  __recommended = recommended;
  __recommended_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"notebookDescription"])
  {
    __notebookDescription = [[decoder decodeObjectForKey: @"notebookDescription"] retain_stub];
    __notebookDescription_isset = YES;
  }
  if ([decoder containsValueForKey: @"privilege"])
  {
    __privilege = [decoder decodeIntForKey: @"privilege"];
    __privilege_isset = YES;
  }
  if ([decoder containsValueForKey: @"recommended"])
  {
    __recommended = [decoder decodeBoolForKey: @"recommended"];
    __recommended_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__notebookDescription_isset)
  {
    [encoder encodeObject: __notebookDescription forKey: @"notebookDescription"];
  }
  if (__privilege_isset)
  {
    [encoder encodeInt: __privilege forKey: @"privilege"];
  }
  if (__recommended_isset)
  {
    [encoder encodeBool: __recommended forKey: @"recommended"];
  }
}

- (void) dealloc
{
  [__notebookDescription release_stub];
  [super dealloc_stub];
}

- (NSString *) notebookDescription {
  return [[__notebookDescription retain_stub] autorelease_stub];
}

- (void) setNotebookDescription: (NSString *) notebookDescription {
  [notebookDescription retain_stub];
  [__notebookDescription release_stub];
  __notebookDescription = notebookDescription;
  __notebookDescription_isset = YES;
}

- (BOOL) notebookDescriptionIsSet {
  return __notebookDescription_isset;
}

- (void) unsetNotebookDescription {
  [__notebookDescription release_stub];
  __notebookDescription = nil;
  __notebookDescription_isset = NO;
}

- (int) privilege {
  return __privilege;
}

- (void) setPrivilege: (int) privilege {
  __privilege = privilege;
  __privilege_isset = YES;
}

- (BOOL) privilegeIsSet {
  return __privilege_isset;
}

- (void) unsetPrivilege {
  __privilege_isset = NO;
}

- (BOOL) recommended {
  return __recommended;
}

- (void) setRecommended: (BOOL) recommended {
  __recommended = recommended;
  __recommended_isset = YES;
}

- (BOOL) recommendedIsSet {
  return __recommended_isset;
}

- (void) unsetRecommended {
  __recommended_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNotebookDescription: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setPrivilege: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setRecommended: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"BusinessNotebook"];
  if (__notebookDescription_isset) {
    if (__notebookDescription != nil) {
      [outProtocol writeFieldBeginWithName: @"notebookDescription" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __notebookDescription];
      [outProtocol writeFieldEnd];
    }
  }
  if (__privilege_isset) {
    [outProtocol writeFieldBeginWithName: @"privilege" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __privilege];
    [outProtocol writeFieldEnd];
  }
  if (__recommended_isset) {
    [outProtocol writeFieldBeginWithName: @"recommended" type: TType_BOOL fieldID: 3];
    [outProtocol writeBool: __recommended];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BusinessNotebook("];
  [ms appendString: @"notebookDescription:"];
  [ms appendFormat: @"\"%@\"", __notebookDescription];
  [ms appendString: @",privilege:"];
  [ms appendFormat: @"%i", __privilege];
  [ms appendString: @",recommended:"];
  [ms appendFormat: @"%i", __recommended];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation EDAMSavedSearchScope

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithIncludeAccount: (BOOL) includeAccount includePersonalLinkedNotebooks: (BOOL) includePersonalLinkedNotebooks includeBusinessLinkedNotebooks: (BOOL) includeBusinessLinkedNotebooks
{
  self = [super init];
  __includeAccount = includeAccount;
  __includeAccount_isset = YES;
  __includePersonalLinkedNotebooks = includePersonalLinkedNotebooks;
  __includePersonalLinkedNotebooks_isset = YES;
  __includeBusinessLinkedNotebooks = includeBusinessLinkedNotebooks;
  __includeBusinessLinkedNotebooks_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"includeAccount"])
  {
    __includeAccount = [decoder decodeBoolForKey: @"includeAccount"];
    __includeAccount_isset = YES;
  }
  if ([decoder containsValueForKey: @"includePersonalLinkedNotebooks"])
  {
    __includePersonalLinkedNotebooks = [decoder decodeBoolForKey: @"includePersonalLinkedNotebooks"];
    __includePersonalLinkedNotebooks_isset = YES;
  }
  if ([decoder containsValueForKey: @"includeBusinessLinkedNotebooks"])
  {
    __includeBusinessLinkedNotebooks = [decoder decodeBoolForKey: @"includeBusinessLinkedNotebooks"];
    __includeBusinessLinkedNotebooks_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__includeAccount_isset)
  {
    [encoder encodeBool: __includeAccount forKey: @"includeAccount"];
  }
  if (__includePersonalLinkedNotebooks_isset)
  {
    [encoder encodeBool: __includePersonalLinkedNotebooks forKey: @"includePersonalLinkedNotebooks"];
  }
  if (__includeBusinessLinkedNotebooks_isset)
  {
    [encoder encodeBool: __includeBusinessLinkedNotebooks forKey: @"includeBusinessLinkedNotebooks"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) includeAccount {
  return __includeAccount;
}

- (void) setIncludeAccount: (BOOL) includeAccount {
  __includeAccount = includeAccount;
  __includeAccount_isset = YES;
}

- (BOOL) includeAccountIsSet {
  return __includeAccount_isset;
}

- (void) unsetIncludeAccount {
  __includeAccount_isset = NO;
}

- (BOOL) includePersonalLinkedNotebooks {
  return __includePersonalLinkedNotebooks;
}

- (void) setIncludePersonalLinkedNotebooks: (BOOL) includePersonalLinkedNotebooks {
  __includePersonalLinkedNotebooks = includePersonalLinkedNotebooks;
  __includePersonalLinkedNotebooks_isset = YES;
}

- (BOOL) includePersonalLinkedNotebooksIsSet {
  return __includePersonalLinkedNotebooks_isset;
}

- (void) unsetIncludePersonalLinkedNotebooks {
  __includePersonalLinkedNotebooks_isset = NO;
}

- (BOOL) includeBusinessLinkedNotebooks {
  return __includeBusinessLinkedNotebooks;
}

- (void) setIncludeBusinessLinkedNotebooks: (BOOL) includeBusinessLinkedNotebooks {
  __includeBusinessLinkedNotebooks = includeBusinessLinkedNotebooks;
  __includeBusinessLinkedNotebooks_isset = YES;
}

- (BOOL) includeBusinessLinkedNotebooksIsSet {
  return __includeBusinessLinkedNotebooks_isset;
}

- (void) unsetIncludeBusinessLinkedNotebooks {
  __includeBusinessLinkedNotebooks_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIncludeAccount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIncludePersonalLinkedNotebooks: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIncludeBusinessLinkedNotebooks: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SavedSearchScope"];
  if (__includeAccount_isset) {
    [outProtocol writeFieldBeginWithName: @"includeAccount" type: TType_BOOL fieldID: 1];
    [outProtocol writeBool: __includeAccount];
    [outProtocol writeFieldEnd];
  }
  if (__includePersonalLinkedNotebooks_isset) {
    [outProtocol writeFieldBeginWithName: @"includePersonalLinkedNotebooks" type: TType_BOOL fieldID: 2];
    [outProtocol writeBool: __includePersonalLinkedNotebooks];
    [outProtocol writeFieldEnd];
  }
  if (__includeBusinessLinkedNotebooks_isset) {
    [outProtocol writeFieldBeginWithName: @"includeBusinessLinkedNotebooks" type: TType_BOOL fieldID: 3];
    [outProtocol writeBool: __includeBusinessLinkedNotebooks];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SavedSearchScope("];
  [ms appendString: @"includeAccount:"];
  [ms appendFormat: @"%i", __includeAccount];
  [ms appendString: @",includePersonalLinkedNotebooks:"];
  [ms appendFormat: @"%i", __includePersonalLinkedNotebooks];
  [ms appendString: @",includeBusinessLinkedNotebooks:"];
  [ms appendFormat: @"%i", __includeBusinessLinkedNotebooks];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation EDAMSavedSearch

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithGuid: (EDAMGuid) guid name: (NSString *) name query: (NSString *) query format: (int) format updateSequenceNum: (int32_t) updateSequenceNum scope: (EDAMSavedSearchScope *) scope
{
  self = [super init];
  __guid = [guid retain_stub];
  __guid_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __query = [query retain_stub];
  __query_isset = YES;
  __format = format;
  __format_isset = YES;
  __updateSequenceNum = updateSequenceNum;
  __updateSequenceNum_isset = YES;
  __scope = [scope retain_stub];
  __scope_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"guid"])
  {
    __guid = [[decoder decodeObjectForKey: @"guid"] retain_stub];
    __guid_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"query"])
  {
    __query = [[decoder decodeObjectForKey: @"query"] retain_stub];
    __query_isset = YES;
  }
  if ([decoder containsValueForKey: @"format"])
  {
    __format = [decoder decodeIntForKey: @"format"];
    __format_isset = YES;
  }
  if ([decoder containsValueForKey: @"updateSequenceNum"])
  {
    __updateSequenceNum = [decoder decodeInt32ForKey: @"updateSequenceNum"];
    __updateSequenceNum_isset = YES;
  }
  if ([decoder containsValueForKey: @"scope"])
  {
    __scope = [[decoder decodeObjectForKey: @"scope"] retain_stub];
    __scope_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__guid_isset)
  {
    [encoder encodeObject: __guid forKey: @"guid"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__query_isset)
  {
    [encoder encodeObject: __query forKey: @"query"];
  }
  if (__format_isset)
  {
    [encoder encodeInt: __format forKey: @"format"];
  }
  if (__updateSequenceNum_isset)
  {
    [encoder encodeInt32: __updateSequenceNum forKey: @"updateSequenceNum"];
  }
  if (__scope_isset)
  {
    [encoder encodeObject: __scope forKey: @"scope"];
  }
}

- (void) dealloc
{
  [__guid release_stub];
  [__name release_stub];
  [__query release_stub];
  [__scope release_stub];
  [super dealloc_stub];
}

- (NSString *) guid {
  return [[__guid retain_stub] autorelease_stub];
}

- (void) setGuid: (NSString *) guid {
  [guid retain_stub];
  [__guid release_stub];
  __guid = guid;
  __guid_isset = YES;
}

- (BOOL) guidIsSet {
  return __guid_isset;
}

- (void) unsetGuid {
  [__guid release_stub];
  __guid = nil;
  __guid_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) query {
  return [[__query retain_stub] autorelease_stub];
}

- (void) setQuery: (NSString *) query {
  [query retain_stub];
  [__query release_stub];
  __query = query;
  __query_isset = YES;
}

- (BOOL) queryIsSet {
  return __query_isset;
}

- (void) unsetQuery {
  [__query release_stub];
  __query = nil;
  __query_isset = NO;
}

- (int) format {
  return __format;
}

- (void) setFormat: (int) format {
  __format = format;
  __format_isset = YES;
}

- (BOOL) formatIsSet {
  return __format_isset;
}

- (void) unsetFormat {
  __format_isset = NO;
}

- (int32_t) updateSequenceNum {
  return __updateSequenceNum;
}

- (void) setUpdateSequenceNum: (int32_t) updateSequenceNum {
  __updateSequenceNum = updateSequenceNum;
  __updateSequenceNum_isset = YES;
}

- (BOOL) updateSequenceNumIsSet {
  return __updateSequenceNum_isset;
}

- (void) unsetUpdateSequenceNum {
  __updateSequenceNum_isset = NO;
}

- (EDAMSavedSearchScope *) scope {
  return [[__scope retain_stub] autorelease_stub];
}

- (void) setScope: (EDAMSavedSearchScope *) scope {
  [scope retain_stub];
  [__scope release_stub];
  __scope = scope;
  __scope_isset = YES;
}

- (BOOL) scopeIsSet {
  return __scope_isset;
}

- (void) unsetScope {
  [__scope release_stub];
  __scope = nil;
  __scope_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGuid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setQuery: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setFormat: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setUpdateSequenceNum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRUCT) {
          EDAMSavedSearchScope *fieldValue = [[EDAMSavedSearchScope alloc] init];
          [fieldValue read: inProtocol];
          [self setScope: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SavedSearch"];
  if (__guid_isset) {
    if (__guid != nil) {
      [outProtocol writeFieldBeginWithName: @"guid" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __guid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__query_isset) {
    if (__query != nil) {
      [outProtocol writeFieldBeginWithName: @"query" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __query];
      [outProtocol writeFieldEnd];
    }
  }
  if (__format_isset) {
    [outProtocol writeFieldBeginWithName: @"format" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __format];
    [outProtocol writeFieldEnd];
  }
  if (__updateSequenceNum_isset) {
    [outProtocol writeFieldBeginWithName: @"updateSequenceNum" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __updateSequenceNum];
    [outProtocol writeFieldEnd];
  }
  if (__scope_isset) {
    if (__scope != nil) {
      [outProtocol writeFieldBeginWithName: @"scope" type: TType_STRUCT fieldID: 6];
      [__scope write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SavedSearch("];
  [ms appendString: @"guid:"];
  [ms appendFormat: @"\"%@\"", __guid];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",query:"];
  [ms appendFormat: @"\"%@\"", __query];
  [ms appendString: @",format:"];
  [ms appendFormat: @"%i", __format];
  [ms appendString: @",updateSequenceNum:"];
  [ms appendFormat: @"%i", __updateSequenceNum];
  [ms appendString: @",scope:"];
  [ms appendFormat: @"%@", __scope];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation EDAMSharedNotebookRecipientSettings

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReminderNotifyEmail: (BOOL) reminderNotifyEmail reminderNotifyInApp: (BOOL) reminderNotifyInApp
{
  self = [super init];
  __reminderNotifyEmail = reminderNotifyEmail;
  __reminderNotifyEmail_isset = YES;
  __reminderNotifyInApp = reminderNotifyInApp;
  __reminderNotifyInApp_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"reminderNotifyEmail"])
  {
    __reminderNotifyEmail = [decoder decodeBoolForKey: @"reminderNotifyEmail"];
    __reminderNotifyEmail_isset = YES;
  }
  if ([decoder containsValueForKey: @"reminderNotifyInApp"])
  {
    __reminderNotifyInApp = [decoder decodeBoolForKey: @"reminderNotifyInApp"];
    __reminderNotifyInApp_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__reminderNotifyEmail_isset)
  {
    [encoder encodeBool: __reminderNotifyEmail forKey: @"reminderNotifyEmail"];
  }
  if (__reminderNotifyInApp_isset)
  {
    [encoder encodeBool: __reminderNotifyInApp forKey: @"reminderNotifyInApp"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) reminderNotifyEmail {
  return __reminderNotifyEmail;
}

- (void) setReminderNotifyEmail: (BOOL) reminderNotifyEmail {
  __reminderNotifyEmail = reminderNotifyEmail;
  __reminderNotifyEmail_isset = YES;
}

- (BOOL) reminderNotifyEmailIsSet {
  return __reminderNotifyEmail_isset;
}

- (void) unsetReminderNotifyEmail {
  __reminderNotifyEmail_isset = NO;
}

- (BOOL) reminderNotifyInApp {
  return __reminderNotifyInApp;
}

- (void) setReminderNotifyInApp: (BOOL) reminderNotifyInApp {
  __reminderNotifyInApp = reminderNotifyInApp;
  __reminderNotifyInApp_isset = YES;
}

- (BOOL) reminderNotifyInAppIsSet {
  return __reminderNotifyInApp_isset;
}

- (void) unsetReminderNotifyInApp {
  __reminderNotifyInApp_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setReminderNotifyEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setReminderNotifyInApp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SharedNotebookRecipientSettings"];
  if (__reminderNotifyEmail_isset) {
    [outProtocol writeFieldBeginWithName: @"reminderNotifyEmail" type: TType_BOOL fieldID: 1];
    [outProtocol writeBool: __reminderNotifyEmail];
    [outProtocol writeFieldEnd];
  }
  if (__reminderNotifyInApp_isset) {
    [outProtocol writeFieldBeginWithName: @"reminderNotifyInApp" type: TType_BOOL fieldID: 2];
    [outProtocol writeBool: __reminderNotifyInApp];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SharedNotebookRecipientSettings("];
  [ms appendString: @"reminderNotifyEmail:"];
  [ms appendFormat: @"%i", __reminderNotifyEmail];
  [ms appendString: @",reminderNotifyInApp:"];
  [ms appendFormat: @"%i", __reminderNotifyInApp];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation EDAMSharedNotebook

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (int64_t) id userId: (int32_t) userId notebookGuid: (NSString *) notebookGuid email: (NSString *) email notebookModifiable: (BOOL) notebookModifiable requireLogin: (BOOL) requireLogin serviceCreated: (EDAMTimestamp) serviceCreated serviceUpdated: (EDAMTimestamp) serviceUpdated shareKey: (NSString *) shareKey username: (NSString *) username privilege: (int) privilege allowPreview: (BOOL) allowPreview recipientSettings: (EDAMSharedNotebookRecipientSettings *) recipientSettings
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __userId = userId;
  __userId_isset = YES;
  __notebookGuid = [notebookGuid retain_stub];
  __notebookGuid_isset = YES;
  __email = [email retain_stub];
  __email_isset = YES;
  __notebookModifiable = notebookModifiable;
  __notebookModifiable_isset = YES;
  __requireLogin = requireLogin;
  __requireLogin_isset = YES;
  __serviceCreated = serviceCreated;
  __serviceCreated_isset = YES;
  __serviceUpdated = serviceUpdated;
  __serviceUpdated_isset = YES;
  __shareKey = [shareKey retain_stub];
  __shareKey_isset = YES;
  __username = [username retain_stub];
  __username_isset = YES;
  __privilege = privilege;
  __privilege_isset = YES;
  __allowPreview = allowPreview;
  __allowPreview_isset = YES;
  __recipientSettings = [recipientSettings retain_stub];
  __recipientSettings_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"userId"])
  {
    __userId = [decoder decodeInt32ForKey: @"userId"];
    __userId_isset = YES;
  }
  if ([decoder containsValueForKey: @"notebookGuid"])
  {
    __notebookGuid = [[decoder decodeObjectForKey: @"notebookGuid"] retain_stub];
    __notebookGuid_isset = YES;
  }
  if ([decoder containsValueForKey: @"email"])
  {
    __email = [[decoder decodeObjectForKey: @"email"] retain_stub];
    __email_isset = YES;
  }
  if ([decoder containsValueForKey: @"notebookModifiable"])
  {
    __notebookModifiable = [decoder decodeBoolForKey: @"notebookModifiable"];
    __notebookModifiable_isset = YES;
  }
  if ([decoder containsValueForKey: @"requireLogin"])
  {
    __requireLogin = [decoder decodeBoolForKey: @"requireLogin"];
    __requireLogin_isset = YES;
  }
  if ([decoder containsValueForKey: @"serviceCreated"])
  {
    __serviceCreated = [decoder decodeInt64ForKey: @"serviceCreated"];
    __serviceCreated_isset = YES;
  }
  if ([decoder containsValueForKey: @"serviceUpdated"])
  {
    __serviceUpdated = [decoder decodeInt64ForKey: @"serviceUpdated"];
    __serviceUpdated_isset = YES;
  }
  if ([decoder containsValueForKey: @"shareKey"])
  {
    __shareKey = [[decoder decodeObjectForKey: @"shareKey"] retain_stub];
    __shareKey_isset = YES;
  }
  if ([decoder containsValueForKey: @"username"])
  {
    __username = [[decoder decodeObjectForKey: @"username"] retain_stub];
    __username_isset = YES;
  }
  if ([decoder containsValueForKey: @"privilege"])
  {
    __privilege = [decoder decodeIntForKey: @"privilege"];
    __privilege_isset = YES;
  }
  if ([decoder containsValueForKey: @"allowPreview"])
  {
    __allowPreview = [decoder decodeBoolForKey: @"allowPreview"];
    __allowPreview_isset = YES;
  }
  if ([decoder containsValueForKey: @"recipientSettings"])
  {
    __recipientSettings = [[decoder decodeObjectForKey: @"recipientSettings"] retain_stub];
    __recipientSettings_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__userId_isset)
  {
    [encoder encodeInt32: __userId forKey: @"userId"];
  }
  if (__notebookGuid_isset)
  {
    [encoder encodeObject: __notebookGuid forKey: @"notebookGuid"];
  }
  if (__email_isset)
  {
    [encoder encodeObject: __email forKey: @"email"];
  }
  if (__notebookModifiable_isset)
  {
    [encoder encodeBool: __notebookModifiable forKey: @"notebookModifiable"];
  }
  if (__requireLogin_isset)
  {
    [encoder encodeBool: __requireLogin forKey: @"requireLogin"];
  }
  if (__serviceCreated_isset)
  {
    [encoder encodeInt64: __serviceCreated forKey: @"serviceCreated"];
  }
  if (__serviceUpdated_isset)
  {
    [encoder encodeInt64: __serviceUpdated forKey: @"serviceUpdated"];
  }
  if (__shareKey_isset)
  {
    [encoder encodeObject: __shareKey forKey: @"shareKey"];
  }
  if (__username_isset)
  {
    [encoder encodeObject: __username forKey: @"username"];
  }
  if (__privilege_isset)
  {
    [encoder encodeInt: __privilege forKey: @"privilege"];
  }
  if (__allowPreview_isset)
  {
    [encoder encodeBool: __allowPreview forKey: @"allowPreview"];
  }
  if (__recipientSettings_isset)
  {
    [encoder encodeObject: __recipientSettings forKey: @"recipientSettings"];
  }
}

- (void) dealloc
{
  [__notebookGuid release_stub];
  [__email release_stub];
  [__shareKey release_stub];
  [__username release_stub];
  [__recipientSettings release_stub];
  [super dealloc_stub];
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (int32_t) userId {
  return __userId;
}

- (void) setUserId: (int32_t) userId {
  __userId = userId;
  __userId_isset = YES;
}

- (BOOL) userIdIsSet {
  return __userId_isset;
}

- (void) unsetUserId {
  __userId_isset = NO;
}

- (NSString *) notebookGuid {
  return [[__notebookGuid retain_stub] autorelease_stub];
}

- (void) setNotebookGuid: (NSString *) notebookGuid {
  [notebookGuid retain_stub];
  [__notebookGuid release_stub];
  __notebookGuid = notebookGuid;
  __notebookGuid_isset = YES;
}

- (BOOL) notebookGuidIsSet {
  return __notebookGuid_isset;
}

- (void) unsetNotebookGuid {
  [__notebookGuid release_stub];
  __notebookGuid = nil;
  __notebookGuid_isset = NO;
}

- (NSString *) email {
  return [[__email retain_stub] autorelease_stub];
}

- (void) setEmail: (NSString *) email {
  [email retain_stub];
  [__email release_stub];
  __email = email;
  __email_isset = YES;
}

- (BOOL) emailIsSet {
  return __email_isset;
}

- (void) unsetEmail {
  [__email release_stub];
  __email = nil;
  __email_isset = NO;
}

- (BOOL) notebookModifiable {
  return __notebookModifiable;
}

- (void) setNotebookModifiable: (BOOL) notebookModifiable {
  __notebookModifiable = notebookModifiable;
  __notebookModifiable_isset = YES;
}

- (BOOL) notebookModifiableIsSet {
  return __notebookModifiable_isset;
}

- (void) unsetNotebookModifiable {
  __notebookModifiable_isset = NO;
}

- (BOOL) requireLogin {
  return __requireLogin;
}

- (void) setRequireLogin: (BOOL) requireLogin {
  __requireLogin = requireLogin;
  __requireLogin_isset = YES;
}

- (BOOL) requireLoginIsSet {
  return __requireLogin_isset;
}

- (void) unsetRequireLogin {
  __requireLogin_isset = NO;
}

- (int64_t) serviceCreated {
  return __serviceCreated;
}

- (void) setServiceCreated: (int64_t) serviceCreated {
  __serviceCreated = serviceCreated;
  __serviceCreated_isset = YES;
}

- (BOOL) serviceCreatedIsSet {
  return __serviceCreated_isset;
}

- (void) unsetServiceCreated {
  __serviceCreated_isset = NO;
}

- (int64_t) serviceUpdated {
  return __serviceUpdated;
}

- (void) setServiceUpdated: (int64_t) serviceUpdated {
  __serviceUpdated = serviceUpdated;
  __serviceUpdated_isset = YES;
}

- (BOOL) serviceUpdatedIsSet {
  return __serviceUpdated_isset;
}

- (void) unsetServiceUpdated {
  __serviceUpdated_isset = NO;
}

- (NSString *) shareKey {
  return [[__shareKey retain_stub] autorelease_stub];
}

- (void) setShareKey: (NSString *) shareKey {
  [shareKey retain_stub];
  [__shareKey release_stub];
  __shareKey = shareKey;
  __shareKey_isset = YES;
}

- (BOOL) shareKeyIsSet {
  return __shareKey_isset;
}

- (void) unsetShareKey {
  [__shareKey release_stub];
  __shareKey = nil;
  __shareKey_isset = NO;
}

- (NSString *) username {
  return [[__username retain_stub] autorelease_stub];
}

- (void) setUsername: (NSString *) username {
  [username retain_stub];
  [__username release_stub];
  __username = username;
  __username_isset = YES;
}

- (BOOL) usernameIsSet {
  return __username_isset;
}

- (void) unsetUsername {
  [__username release_stub];
  __username = nil;
  __username_isset = NO;
}

- (int) privilege {
  return __privilege;
}

- (void) setPrivilege: (int) privilege {
  __privilege = privilege;
  __privilege_isset = YES;
}

- (BOOL) privilegeIsSet {
  return __privilege_isset;
}

- (void) unsetPrivilege {
  __privilege_isset = NO;
}

- (BOOL) allowPreview {
  return __allowPreview;
}

- (void) setAllowPreview: (BOOL) allowPreview {
  __allowPreview = allowPreview;
  __allowPreview_isset = YES;
}

- (BOOL) allowPreviewIsSet {
  return __allowPreview_isset;
}

- (void) unsetAllowPreview {
  __allowPreview_isset = NO;
}

- (EDAMSharedNotebookRecipientSettings *) recipientSettings {
  return [[__recipientSettings retain_stub] autorelease_stub];
}

- (void) setRecipientSettings: (EDAMSharedNotebookRecipientSettings *) recipientSettings {
  [recipientSettings retain_stub];
  [__recipientSettings release_stub];
  __recipientSettings = recipientSettings;
  __recipientSettings_isset = YES;
}

- (BOOL) recipientSettingsIsSet {
  return __recipientSettings_isset;
}

- (void) unsetRecipientSettings {
  [__recipientSettings release_stub];
  __recipientSettings = nil;
  __recipientSettings_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setUserId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNotebookGuid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setNotebookModifiable: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setRequireLogin: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setServiceCreated: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setServiceUpdated: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setShareKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUsername: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setPrivilege: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setAllowPreview: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRUCT) {
          EDAMSharedNotebookRecipientSettings *fieldValue = [[EDAMSharedNotebookRecipientSettings alloc] init];
          [fieldValue read: inProtocol];
          [self setRecipientSettings: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SharedNotebook"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__userId_isset) {
    [outProtocol writeFieldBeginWithName: @"userId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __userId];
    [outProtocol writeFieldEnd];
  }
  if (__notebookGuid_isset) {
    if (__notebookGuid != nil) {
      [outProtocol writeFieldBeginWithName: @"notebookGuid" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __notebookGuid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__email_isset) {
    if (__email != nil) {
      [outProtocol writeFieldBeginWithName: @"email" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __email];
      [outProtocol writeFieldEnd];
    }
  }
  if (__notebookModifiable_isset) {
    [outProtocol writeFieldBeginWithName: @"notebookModifiable" type: TType_BOOL fieldID: 5];
    [outProtocol writeBool: __notebookModifiable];
    [outProtocol writeFieldEnd];
  }
  if (__requireLogin_isset) {
    [outProtocol writeFieldBeginWithName: @"requireLogin" type: TType_BOOL fieldID: 6];
    [outProtocol writeBool: __requireLogin];
    [outProtocol writeFieldEnd];
  }
  if (__serviceCreated_isset) {
    [outProtocol writeFieldBeginWithName: @"serviceCreated" type: TType_I64 fieldID: 7];
    [outProtocol writeI64: __serviceCreated];
    [outProtocol writeFieldEnd];
  }
  if (__serviceUpdated_isset) {
    [outProtocol writeFieldBeginWithName: @"serviceUpdated" type: TType_I64 fieldID: 10];
    [outProtocol writeI64: __serviceUpdated];
    [outProtocol writeFieldEnd];
  }
  if (__shareKey_isset) {
    if (__shareKey != nil) {
      [outProtocol writeFieldBeginWithName: @"shareKey" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __shareKey];
      [outProtocol writeFieldEnd];
    }
  }
  if (__username_isset) {
    if (__username != nil) {
      [outProtocol writeFieldBeginWithName: @"username" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __username];
      [outProtocol writeFieldEnd];
    }
  }
  if (__privilege_isset) {
    [outProtocol writeFieldBeginWithName: @"privilege" type: TType_I32 fieldID: 11];
    [outProtocol writeI32: __privilege];
    [outProtocol writeFieldEnd];
  }
  if (__allowPreview_isset) {
    [outProtocol writeFieldBeginWithName: @"allowPreview" type: TType_BOOL fieldID: 12];
    [outProtocol writeBool: __allowPreview];
    [outProtocol writeFieldEnd];
  }
  if (__recipientSettings_isset) {
    if (__recipientSettings != nil) {
      [outProtocol writeFieldBeginWithName: @"recipientSettings" type: TType_STRUCT fieldID: 13];
      [__recipientSettings write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SharedNotebook("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",userId:"];
  [ms appendFormat: @"%i", __userId];
  [ms appendString: @",notebookGuid:"];
  [ms appendFormat: @"\"%@\"", __notebookGuid];
  [ms appendString: @",email:"];
  [ms appendFormat: @"\"%@\"", __email];
  [ms appendString: @",notebookModifiable:"];
  [ms appendFormat: @"%i", __notebookModifiable];
  [ms appendString: @",requireLogin:"];
  [ms appendFormat: @"%i", __requireLogin];
  [ms appendString: @",serviceCreated:"];
  [ms appendFormat: @"%qi", __serviceCreated];
  [ms appendString: @",serviceUpdated:"];
  [ms appendFormat: @"%qi", __serviceUpdated];
  [ms appendString: @",shareKey:"];
  [ms appendFormat: @"\"%@\"", __shareKey];
  [ms appendString: @",username:"];
  [ms appendFormat: @"\"%@\"", __username];
  [ms appendString: @",privilege:"];
  [ms appendFormat: @"%i", __privilege];
  [ms appendString: @",allowPreview:"];
  [ms appendFormat: @"%i", __allowPreview];
  [ms appendString: @",recipientSettings:"];
  [ms appendFormat: @"%@", __recipientSettings];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation EDAMNotebookRestrictions

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithNoReadNotes: (BOOL) noReadNotes noCreateNotes: (BOOL) noCreateNotes noUpdateNotes: (BOOL) noUpdateNotes noExpungeNotes: (BOOL) noExpungeNotes noShareNotes: (BOOL) noShareNotes noEmailNotes: (BOOL) noEmailNotes noSendMessageToRecipients: (BOOL) noSendMessageToRecipients noUpdateNotebook: (BOOL) noUpdateNotebook noExpungeNotebook: (BOOL) noExpungeNotebook noSetDefaultNotebook: (BOOL) noSetDefaultNotebook noSetNotebookStack: (BOOL) noSetNotebookStack noPublishToPublic: (BOOL) noPublishToPublic noPublishToBusinessLibrary: (BOOL) noPublishToBusinessLibrary noCreateTags: (BOOL) noCreateTags noUpdateTags: (BOOL) noUpdateTags noExpungeTags: (BOOL) noExpungeTags noSetParentTag: (BOOL) noSetParentTag noCreateSharedNotebooks: (BOOL) noCreateSharedNotebooks updateWhichSharedNotebookRestrictions: (int) updateWhichSharedNotebookRestrictions expungeWhichSharedNotebookRestrictions: (int) expungeWhichSharedNotebookRestrictions
{
  self = [super init];
  __noReadNotes = noReadNotes;
  __noReadNotes_isset = YES;
  __noCreateNotes = noCreateNotes;
  __noCreateNotes_isset = YES;
  __noUpdateNotes = noUpdateNotes;
  __noUpdateNotes_isset = YES;
  __noExpungeNotes = noExpungeNotes;
  __noExpungeNotes_isset = YES;
  __noShareNotes = noShareNotes;
  __noShareNotes_isset = YES;
  __noEmailNotes = noEmailNotes;
  __noEmailNotes_isset = YES;
  __noSendMessageToRecipients = noSendMessageToRecipients;
  __noSendMessageToRecipients_isset = YES;
  __noUpdateNotebook = noUpdateNotebook;
  __noUpdateNotebook_isset = YES;
  __noExpungeNotebook = noExpungeNotebook;
  __noExpungeNotebook_isset = YES;
  __noSetDefaultNotebook = noSetDefaultNotebook;
  __noSetDefaultNotebook_isset = YES;
  __noSetNotebookStack = noSetNotebookStack;
  __noSetNotebookStack_isset = YES;
  __noPublishToPublic = noPublishToPublic;
  __noPublishToPublic_isset = YES;
  __noPublishToBusinessLibrary = noPublishToBusinessLibrary;
  __noPublishToBusinessLibrary_isset = YES;
  __noCreateTags = noCreateTags;
  __noCreateTags_isset = YES;
  __noUpdateTags = noUpdateTags;
  __noUpdateTags_isset = YES;
  __noExpungeTags = noExpungeTags;
  __noExpungeTags_isset = YES;
  __noSetParentTag = noSetParentTag;
  __noSetParentTag_isset = YES;
  __noCreateSharedNotebooks = noCreateSharedNotebooks;
  __noCreateSharedNotebooks_isset = YES;
  __updateWhichSharedNotebookRestrictions = updateWhichSharedNotebookRestrictions;
  __updateWhichSharedNotebookRestrictions_isset = YES;
  __expungeWhichSharedNotebookRestrictions = expungeWhichSharedNotebookRestrictions;
  __expungeWhichSharedNotebookRestrictions_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"noReadNotes"])
  {
    __noReadNotes = [decoder decodeBoolForKey: @"noReadNotes"];
    __noReadNotes_isset = YES;
  }
  if ([decoder containsValueForKey: @"noCreateNotes"])
  {
    __noCreateNotes = [decoder decodeBoolForKey: @"noCreateNotes"];
    __noCreateNotes_isset = YES;
  }
  if ([decoder containsValueForKey: @"noUpdateNotes"])
  {
    __noUpdateNotes = [decoder decodeBoolForKey: @"noUpdateNotes"];
    __noUpdateNotes_isset = YES;
  }
  if ([decoder containsValueForKey: @"noExpungeNotes"])
  {
    __noExpungeNotes = [decoder decodeBoolForKey: @"noExpungeNotes"];
    __noExpungeNotes_isset = YES;
  }
  if ([decoder containsValueForKey: @"noShareNotes"])
  {
    __noShareNotes = [decoder decodeBoolForKey: @"noShareNotes"];
    __noShareNotes_isset = YES;
  }
  if ([decoder containsValueForKey: @"noEmailNotes"])
  {
    __noEmailNotes = [decoder decodeBoolForKey: @"noEmailNotes"];
    __noEmailNotes_isset = YES;
  }
  if ([decoder containsValueForKey: @"noSendMessageToRecipients"])
  {
    __noSendMessageToRecipients = [decoder decodeBoolForKey: @"noSendMessageToRecipients"];
    __noSendMessageToRecipients_isset = YES;
  }
  if ([decoder containsValueForKey: @"noUpdateNotebook"])
  {
    __noUpdateNotebook = [decoder decodeBoolForKey: @"noUpdateNotebook"];
    __noUpdateNotebook_isset = YES;
  }
  if ([decoder containsValueForKey: @"noExpungeNotebook"])
  {
    __noExpungeNotebook = [decoder decodeBoolForKey: @"noExpungeNotebook"];
    __noExpungeNotebook_isset = YES;
  }
  if ([decoder containsValueForKey: @"noSetDefaultNotebook"])
  {
    __noSetDefaultNotebook = [decoder decodeBoolForKey: @"noSetDefaultNotebook"];
    __noSetDefaultNotebook_isset = YES;
  }
  if ([decoder containsValueForKey: @"noSetNotebookStack"])
  {
    __noSetNotebookStack = [decoder decodeBoolForKey: @"noSetNotebookStack"];
    __noSetNotebookStack_isset = YES;
  }
  if ([decoder containsValueForKey: @"noPublishToPublic"])
  {
    __noPublishToPublic = [decoder decodeBoolForKey: @"noPublishToPublic"];
    __noPublishToPublic_isset = YES;
  }
  if ([decoder containsValueForKey: @"noPublishToBusinessLibrary"])
  {
    __noPublishToBusinessLibrary = [decoder decodeBoolForKey: @"noPublishToBusinessLibrary"];
    __noPublishToBusinessLibrary_isset = YES;
  }
  if ([decoder containsValueForKey: @"noCreateTags"])
  {
    __noCreateTags = [decoder decodeBoolForKey: @"noCreateTags"];
    __noCreateTags_isset = YES;
  }
  if ([decoder containsValueForKey: @"noUpdateTags"])
  {
    __noUpdateTags = [decoder decodeBoolForKey: @"noUpdateTags"];
    __noUpdateTags_isset = YES;
  }
  if ([decoder containsValueForKey: @"noExpungeTags"])
  {
    __noExpungeTags = [decoder decodeBoolForKey: @"noExpungeTags"];
    __noExpungeTags_isset = YES;
  }
  if ([decoder containsValueForKey: @"noSetParentTag"])
  {
    __noSetParentTag = [decoder decodeBoolForKey: @"noSetParentTag"];
    __noSetParentTag_isset = YES;
  }
  if ([decoder containsValueForKey: @"noCreateSharedNotebooks"])
  {
    __noCreateSharedNotebooks = [decoder decodeBoolForKey: @"noCreateSharedNotebooks"];
    __noCreateSharedNotebooks_isset = YES;
  }
  if ([decoder containsValueForKey: @"updateWhichSharedNotebookRestrictions"])
  {
    __updateWhichSharedNotebookRestrictions = [decoder decodeIntForKey: @"updateWhichSharedNotebookRestrictions"];
    __updateWhichSharedNotebookRestrictions_isset = YES;
  }
  if ([decoder containsValueForKey: @"expungeWhichSharedNotebookRestrictions"])
  {
    __expungeWhichSharedNotebookRestrictions = [decoder decodeIntForKey: @"expungeWhichSharedNotebookRestrictions"];
    __expungeWhichSharedNotebookRestrictions_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__noReadNotes_isset)
  {
    [encoder encodeBool: __noReadNotes forKey: @"noReadNotes"];
  }
  if (__noCreateNotes_isset)
  {
    [encoder encodeBool: __noCreateNotes forKey: @"noCreateNotes"];
  }
  if (__noUpdateNotes_isset)
  {
    [encoder encodeBool: __noUpdateNotes forKey: @"noUpdateNotes"];
  }
  if (__noExpungeNotes_isset)
  {
    [encoder encodeBool: __noExpungeNotes forKey: @"noExpungeNotes"];
  }
  if (__noShareNotes_isset)
  {
    [encoder encodeBool: __noShareNotes forKey: @"noShareNotes"];
  }
  if (__noEmailNotes_isset)
  {
    [encoder encodeBool: __noEmailNotes forKey: @"noEmailNotes"];
  }
  if (__noSendMessageToRecipients_isset)
  {
    [encoder encodeBool: __noSendMessageToRecipients forKey: @"noSendMessageToRecipients"];
  }
  if (__noUpdateNotebook_isset)
  {
    [encoder encodeBool: __noUpdateNotebook forKey: @"noUpdateNotebook"];
  }
  if (__noExpungeNotebook_isset)
  {
    [encoder encodeBool: __noExpungeNotebook forKey: @"noExpungeNotebook"];
  }
  if (__noSetDefaultNotebook_isset)
  {
    [encoder encodeBool: __noSetDefaultNotebook forKey: @"noSetDefaultNotebook"];
  }
  if (__noSetNotebookStack_isset)
  {
    [encoder encodeBool: __noSetNotebookStack forKey: @"noSetNotebookStack"];
  }
  if (__noPublishToPublic_isset)
  {
    [encoder encodeBool: __noPublishToPublic forKey: @"noPublishToPublic"];
  }
  if (__noPublishToBusinessLibrary_isset)
  {
    [encoder encodeBool: __noPublishToBusinessLibrary forKey: @"noPublishToBusinessLibrary"];
  }
  if (__noCreateTags_isset)
  {
    [encoder encodeBool: __noCreateTags forKey: @"noCreateTags"];
  }
  if (__noUpdateTags_isset)
  {
    [encoder encodeBool: __noUpdateTags forKey: @"noUpdateTags"];
  }
  if (__noExpungeTags_isset)
  {
    [encoder encodeBool: __noExpungeTags forKey: @"noExpungeTags"];
  }
  if (__noSetParentTag_isset)
  {
    [encoder encodeBool: __noSetParentTag forKey: @"noSetParentTag"];
  }
  if (__noCreateSharedNotebooks_isset)
  {
    [encoder encodeBool: __noCreateSharedNotebooks forKey: @"noCreateSharedNotebooks"];
  }
  if (__updateWhichSharedNotebookRestrictions_isset)
  {
    [encoder encodeInt: __updateWhichSharedNotebookRestrictions forKey: @"updateWhichSharedNotebookRestrictions"];
  }
  if (__expungeWhichSharedNotebookRestrictions_isset)
  {
    [encoder encodeInt: __expungeWhichSharedNotebookRestrictions forKey: @"expungeWhichSharedNotebookRestrictions"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) noReadNotes {
  return __noReadNotes;
}

- (void) setNoReadNotes: (BOOL) noReadNotes {
  __noReadNotes = noReadNotes;
  __noReadNotes_isset = YES;
}

- (BOOL) noReadNotesIsSet {
  return __noReadNotes_isset;
}

- (void) unsetNoReadNotes {
  __noReadNotes_isset = NO;
}

- (BOOL) noCreateNotes {
  return __noCreateNotes;
}

- (void) setNoCreateNotes: (BOOL) noCreateNotes {
  __noCreateNotes = noCreateNotes;
  __noCreateNotes_isset = YES;
}

- (BOOL) noCreateNotesIsSet {
  return __noCreateNotes_isset;
}

- (void) unsetNoCreateNotes {
  __noCreateNotes_isset = NO;
}

- (BOOL) noUpdateNotes {
  return __noUpdateNotes;
}

- (void) setNoUpdateNotes: (BOOL) noUpdateNotes {
  __noUpdateNotes = noUpdateNotes;
  __noUpdateNotes_isset = YES;
}

- (BOOL) noUpdateNotesIsSet {
  return __noUpdateNotes_isset;
}

- (void) unsetNoUpdateNotes {
  __noUpdateNotes_isset = NO;
}

- (BOOL) noExpungeNotes {
  return __noExpungeNotes;
}

- (void) setNoExpungeNotes: (BOOL) noExpungeNotes {
  __noExpungeNotes = noExpungeNotes;
  __noExpungeNotes_isset = YES;
}

- (BOOL) noExpungeNotesIsSet {
  return __noExpungeNotes_isset;
}

- (void) unsetNoExpungeNotes {
  __noExpungeNotes_isset = NO;
}

- (BOOL) noShareNotes {
  return __noShareNotes;
}

- (void) setNoShareNotes: (BOOL) noShareNotes {
  __noShareNotes = noShareNotes;
  __noShareNotes_isset = YES;
}

- (BOOL) noShareNotesIsSet {
  return __noShareNotes_isset;
}

- (void) unsetNoShareNotes {
  __noShareNotes_isset = NO;
}

- (BOOL) noEmailNotes {
  return __noEmailNotes;
}

- (void) setNoEmailNotes: (BOOL) noEmailNotes {
  __noEmailNotes = noEmailNotes;
  __noEmailNotes_isset = YES;
}

- (BOOL) noEmailNotesIsSet {
  return __noEmailNotes_isset;
}

- (void) unsetNoEmailNotes {
  __noEmailNotes_isset = NO;
}

- (BOOL) noSendMessageToRecipients {
  return __noSendMessageToRecipients;
}

- (void) setNoSendMessageToRecipients: (BOOL) noSendMessageToRecipients {
  __noSendMessageToRecipients = noSendMessageToRecipients;
  __noSendMessageToRecipients_isset = YES;
}

- (BOOL) noSendMessageToRecipientsIsSet {
  return __noSendMessageToRecipients_isset;
}

- (void) unsetNoSendMessageToRecipients {
  __noSendMessageToRecipients_isset = NO;
}

- (BOOL) noUpdateNotebook {
  return __noUpdateNotebook;
}

- (void) setNoUpdateNotebook: (BOOL) noUpdateNotebook {
  __noUpdateNotebook = noUpdateNotebook;
  __noUpdateNotebook_isset = YES;
}

- (BOOL) noUpdateNotebookIsSet {
  return __noUpdateNotebook_isset;
}

- (void) unsetNoUpdateNotebook {
  __noUpdateNotebook_isset = NO;
}

- (BOOL) noExpungeNotebook {
  return __noExpungeNotebook;
}

- (void) setNoExpungeNotebook: (BOOL) noExpungeNotebook {
  __noExpungeNotebook = noExpungeNotebook;
  __noExpungeNotebook_isset = YES;
}

- (BOOL) noExpungeNotebookIsSet {
  return __noExpungeNotebook_isset;
}

- (void) unsetNoExpungeNotebook {
  __noExpungeNotebook_isset = NO;
}

- (BOOL) noSetDefaultNotebook {
  return __noSetDefaultNotebook;
}

- (void) setNoSetDefaultNotebook: (BOOL) noSetDefaultNotebook {
  __noSetDefaultNotebook = noSetDefaultNotebook;
  __noSetDefaultNotebook_isset = YES;
}

- (BOOL) noSetDefaultNotebookIsSet {
  return __noSetDefaultNotebook_isset;
}

- (void) unsetNoSetDefaultNotebook {
  __noSetDefaultNotebook_isset = NO;
}

- (BOOL) noSetNotebookStack {
  return __noSetNotebookStack;
}

- (void) setNoSetNotebookStack: (BOOL) noSetNotebookStack {
  __noSetNotebookStack = noSetNotebookStack;
  __noSetNotebookStack_isset = YES;
}

- (BOOL) noSetNotebookStackIsSet {
  return __noSetNotebookStack_isset;
}

- (void) unsetNoSetNotebookStack {
  __noSetNotebookStack_isset = NO;
}

- (BOOL) noPublishToPublic {
  return __noPublishToPublic;
}

- (void) setNoPublishToPublic: (BOOL) noPublishToPublic {
  __noPublishToPublic = noPublishToPublic;
  __noPublishToPublic_isset = YES;
}

- (BOOL) noPublishToPublicIsSet {
  return __noPublishToPublic_isset;
}

- (void) unsetNoPublishToPublic {
  __noPublishToPublic_isset = NO;
}

- (BOOL) noPublishToBusinessLibrary {
  return __noPublishToBusinessLibrary;
}

- (void) setNoPublishToBusinessLibrary: (BOOL) noPublishToBusinessLibrary {
  __noPublishToBusinessLibrary = noPublishToBusinessLibrary;
  __noPublishToBusinessLibrary_isset = YES;
}

- (BOOL) noPublishToBusinessLibraryIsSet {
  return __noPublishToBusinessLibrary_isset;
}

- (void) unsetNoPublishToBusinessLibrary {
  __noPublishToBusinessLibrary_isset = NO;
}

- (BOOL) noCreateTags {
  return __noCreateTags;
}

- (void) setNoCreateTags: (BOOL) noCreateTags {
  __noCreateTags = noCreateTags;
  __noCreateTags_isset = YES;
}

- (BOOL) noCreateTagsIsSet {
  return __noCreateTags_isset;
}

- (void) unsetNoCreateTags {
  __noCreateTags_isset = NO;
}

- (BOOL) noUpdateTags {
  return __noUpdateTags;
}

- (void) setNoUpdateTags: (BOOL) noUpdateTags {
  __noUpdateTags = noUpdateTags;
  __noUpdateTags_isset = YES;
}

- (BOOL) noUpdateTagsIsSet {
  return __noUpdateTags_isset;
}

- (void) unsetNoUpdateTags {
  __noUpdateTags_isset = NO;
}

- (BOOL) noExpungeTags {
  return __noExpungeTags;
}

- (void) setNoExpungeTags: (BOOL) noExpungeTags {
  __noExpungeTags = noExpungeTags;
  __noExpungeTags_isset = YES;
}

- (BOOL) noExpungeTagsIsSet {
  return __noExpungeTags_isset;
}

- (void) unsetNoExpungeTags {
  __noExpungeTags_isset = NO;
}

- (BOOL) noSetParentTag {
  return __noSetParentTag;
}

- (void) setNoSetParentTag: (BOOL) noSetParentTag {
  __noSetParentTag = noSetParentTag;
  __noSetParentTag_isset = YES;
}

- (BOOL) noSetParentTagIsSet {
  return __noSetParentTag_isset;
}

- (void) unsetNoSetParentTag {
  __noSetParentTag_isset = NO;
}

- (BOOL) noCreateSharedNotebooks {
  return __noCreateSharedNotebooks;
}

- (void) setNoCreateSharedNotebooks: (BOOL) noCreateSharedNotebooks {
  __noCreateSharedNotebooks = noCreateSharedNotebooks;
  __noCreateSharedNotebooks_isset = YES;
}

- (BOOL) noCreateSharedNotebooksIsSet {
  return __noCreateSharedNotebooks_isset;
}

- (void) unsetNoCreateSharedNotebooks {
  __noCreateSharedNotebooks_isset = NO;
}

- (int) updateWhichSharedNotebookRestrictions {
  return __updateWhichSharedNotebookRestrictions;
}

- (void) setUpdateWhichSharedNotebookRestrictions: (int) updateWhichSharedNotebookRestrictions {
  __updateWhichSharedNotebookRestrictions = updateWhichSharedNotebookRestrictions;
  __updateWhichSharedNotebookRestrictions_isset = YES;
}

- (BOOL) updateWhichSharedNotebookRestrictionsIsSet {
  return __updateWhichSharedNotebookRestrictions_isset;
}

- (void) unsetUpdateWhichSharedNotebookRestrictions {
  __updateWhichSharedNotebookRestrictions_isset = NO;
}

- (int) expungeWhichSharedNotebookRestrictions {
  return __expungeWhichSharedNotebookRestrictions;
}

- (void) setExpungeWhichSharedNotebookRestrictions: (int) expungeWhichSharedNotebookRestrictions {
  __expungeWhichSharedNotebookRestrictions = expungeWhichSharedNotebookRestrictions;
  __expungeWhichSharedNotebookRestrictions_isset = YES;
}

- (BOOL) expungeWhichSharedNotebookRestrictionsIsSet {
  return __expungeWhichSharedNotebookRestrictions_isset;
}

- (void) unsetExpungeWhichSharedNotebookRestrictions {
  __expungeWhichSharedNotebookRestrictions_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setNoReadNotes: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setNoCreateNotes: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setNoUpdateNotes: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setNoExpungeNotes: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setNoShareNotes: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setNoEmailNotes: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setNoSendMessageToRecipients: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setNoUpdateNotebook: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setNoExpungeNotebook: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setNoSetDefaultNotebook: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setNoSetNotebookStack: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setNoPublishToPublic: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setNoPublishToBusinessLibrary: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setNoCreateTags: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setNoUpdateTags: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setNoExpungeTags: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setNoSetParentTag: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 18:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setNoCreateSharedNotebooks: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 19:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setUpdateWhichSharedNotebookRestrictions: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 20:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setExpungeWhichSharedNotebookRestrictions: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"NotebookRestrictions"];
  if (__noReadNotes_isset) {
    [outProtocol writeFieldBeginWithName: @"noReadNotes" type: TType_BOOL fieldID: 1];
    [outProtocol writeBool: __noReadNotes];
    [outProtocol writeFieldEnd];
  }
  if (__noCreateNotes_isset) {
    [outProtocol writeFieldBeginWithName: @"noCreateNotes" type: TType_BOOL fieldID: 2];
    [outProtocol writeBool: __noCreateNotes];
    [outProtocol writeFieldEnd];
  }
  if (__noUpdateNotes_isset) {
    [outProtocol writeFieldBeginWithName: @"noUpdateNotes" type: TType_BOOL fieldID: 3];
    [outProtocol writeBool: __noUpdateNotes];
    [outProtocol writeFieldEnd];
  }
  if (__noExpungeNotes_isset) {
    [outProtocol writeFieldBeginWithName: @"noExpungeNotes" type: TType_BOOL fieldID: 4];
    [outProtocol writeBool: __noExpungeNotes];
    [outProtocol writeFieldEnd];
  }
  if (__noShareNotes_isset) {
    [outProtocol writeFieldBeginWithName: @"noShareNotes" type: TType_BOOL fieldID: 5];
    [outProtocol writeBool: __noShareNotes];
    [outProtocol writeFieldEnd];
  }
  if (__noEmailNotes_isset) {
    [outProtocol writeFieldBeginWithName: @"noEmailNotes" type: TType_BOOL fieldID: 6];
    [outProtocol writeBool: __noEmailNotes];
    [outProtocol writeFieldEnd];
  }
  if (__noSendMessageToRecipients_isset) {
    [outProtocol writeFieldBeginWithName: @"noSendMessageToRecipients" type: TType_BOOL fieldID: 7];
    [outProtocol writeBool: __noSendMessageToRecipients];
    [outProtocol writeFieldEnd];
  }
  if (__noUpdateNotebook_isset) {
    [outProtocol writeFieldBeginWithName: @"noUpdateNotebook" type: TType_BOOL fieldID: 8];
    [outProtocol writeBool: __noUpdateNotebook];
    [outProtocol writeFieldEnd];
  }
  if (__noExpungeNotebook_isset) {
    [outProtocol writeFieldBeginWithName: @"noExpungeNotebook" type: TType_BOOL fieldID: 9];
    [outProtocol writeBool: __noExpungeNotebook];
    [outProtocol writeFieldEnd];
  }
  if (__noSetDefaultNotebook_isset) {
    [outProtocol writeFieldBeginWithName: @"noSetDefaultNotebook" type: TType_BOOL fieldID: 10];
    [outProtocol writeBool: __noSetDefaultNotebook];
    [outProtocol writeFieldEnd];
  }
  if (__noSetNotebookStack_isset) {
    [outProtocol writeFieldBeginWithName: @"noSetNotebookStack" type: TType_BOOL fieldID: 11];
    [outProtocol writeBool: __noSetNotebookStack];
    [outProtocol writeFieldEnd];
  }
  if (__noPublishToPublic_isset) {
    [outProtocol writeFieldBeginWithName: @"noPublishToPublic" type: TType_BOOL fieldID: 12];
    [outProtocol writeBool: __noPublishToPublic];
    [outProtocol writeFieldEnd];
  }
  if (__noPublishToBusinessLibrary_isset) {
    [outProtocol writeFieldBeginWithName: @"noPublishToBusinessLibrary" type: TType_BOOL fieldID: 13];
    [outProtocol writeBool: __noPublishToBusinessLibrary];
    [outProtocol writeFieldEnd];
  }
  if (__noCreateTags_isset) {
    [outProtocol writeFieldBeginWithName: @"noCreateTags" type: TType_BOOL fieldID: 14];
    [outProtocol writeBool: __noCreateTags];
    [outProtocol writeFieldEnd];
  }
  if (__noUpdateTags_isset) {
    [outProtocol writeFieldBeginWithName: @"noUpdateTags" type: TType_BOOL fieldID: 15];
    [outProtocol writeBool: __noUpdateTags];
    [outProtocol writeFieldEnd];
  }
  if (__noExpungeTags_isset) {
    [outProtocol writeFieldBeginWithName: @"noExpungeTags" type: TType_BOOL fieldID: 16];
    [outProtocol writeBool: __noExpungeTags];
    [outProtocol writeFieldEnd];
  }
  if (__noSetParentTag_isset) {
    [outProtocol writeFieldBeginWithName: @"noSetParentTag" type: TType_BOOL fieldID: 17];
    [outProtocol writeBool: __noSetParentTag];
    [outProtocol writeFieldEnd];
  }
  if (__noCreateSharedNotebooks_isset) {
    [outProtocol writeFieldBeginWithName: @"noCreateSharedNotebooks" type: TType_BOOL fieldID: 18];
    [outProtocol writeBool: __noCreateSharedNotebooks];
    [outProtocol writeFieldEnd];
  }
  if (__updateWhichSharedNotebookRestrictions_isset) {
    [outProtocol writeFieldBeginWithName: @"updateWhichSharedNotebookRestrictions" type: TType_I32 fieldID: 19];
    [outProtocol writeI32: __updateWhichSharedNotebookRestrictions];
    [outProtocol writeFieldEnd];
  }
  if (__expungeWhichSharedNotebookRestrictions_isset) {
    [outProtocol writeFieldBeginWithName: @"expungeWhichSharedNotebookRestrictions" type: TType_I32 fieldID: 20];
    [outProtocol writeI32: __expungeWhichSharedNotebookRestrictions];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NotebookRestrictions("];
  [ms appendString: @"noReadNotes:"];
  [ms appendFormat: @"%i", __noReadNotes];
  [ms appendString: @",noCreateNotes:"];
  [ms appendFormat: @"%i", __noCreateNotes];
  [ms appendString: @",noUpdateNotes:"];
  [ms appendFormat: @"%i", __noUpdateNotes];
  [ms appendString: @",noExpungeNotes:"];
  [ms appendFormat: @"%i", __noExpungeNotes];
  [ms appendString: @",noShareNotes:"];
  [ms appendFormat: @"%i", __noShareNotes];
  [ms appendString: @",noEmailNotes:"];
  [ms appendFormat: @"%i", __noEmailNotes];
  [ms appendString: @",noSendMessageToRecipients:"];
  [ms appendFormat: @"%i", __noSendMessageToRecipients];
  [ms appendString: @",noUpdateNotebook:"];
  [ms appendFormat: @"%i", __noUpdateNotebook];
  [ms appendString: @",noExpungeNotebook:"];
  [ms appendFormat: @"%i", __noExpungeNotebook];
  [ms appendString: @",noSetDefaultNotebook:"];
  [ms appendFormat: @"%i", __noSetDefaultNotebook];
  [ms appendString: @",noSetNotebookStack:"];
  [ms appendFormat: @"%i", __noSetNotebookStack];
  [ms appendString: @",noPublishToPublic:"];
  [ms appendFormat: @"%i", __noPublishToPublic];
  [ms appendString: @",noPublishToBusinessLibrary:"];
  [ms appendFormat: @"%i", __noPublishToBusinessLibrary];
  [ms appendString: @",noCreateTags:"];
  [ms appendFormat: @"%i", __noCreateTags];
  [ms appendString: @",noUpdateTags:"];
  [ms appendFormat: @"%i", __noUpdateTags];
  [ms appendString: @",noExpungeTags:"];
  [ms appendFormat: @"%i", __noExpungeTags];
  [ms appendString: @",noSetParentTag:"];
  [ms appendFormat: @"%i", __noSetParentTag];
  [ms appendString: @",noCreateSharedNotebooks:"];
  [ms appendFormat: @"%i", __noCreateSharedNotebooks];
  [ms appendString: @",updateWhichSharedNotebookRestrictions:"];
  [ms appendFormat: @"%i", __updateWhichSharedNotebookRestrictions];
  [ms appendString: @",expungeWhichSharedNotebookRestrictions:"];
  [ms appendFormat: @"%i", __expungeWhichSharedNotebookRestrictions];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation EDAMNotebook

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithGuid: (EDAMGuid) guid name: (NSString *) name updateSequenceNum: (int32_t) updateSequenceNum defaultNotebook: (BOOL) defaultNotebook serviceCreated: (EDAMTimestamp) serviceCreated serviceUpdated: (EDAMTimestamp) serviceUpdated publishing: (EDAMPublishing *) publishing published: (BOOL) published stack: (NSString *) stack sharedNotebookIds: (NSMutableArray *) sharedNotebookIds sharedNotebooks: (NSMutableArray *) sharedNotebooks businessNotebook: (EDAMBusinessNotebook *) businessNotebook contact: (EDAMUser *) contact restrictions: (EDAMNotebookRestrictions *) restrictions
{
  self = [super init];
  __guid = [guid retain_stub];
  __guid_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __updateSequenceNum = updateSequenceNum;
  __updateSequenceNum_isset = YES;
  __defaultNotebook = defaultNotebook;
  __defaultNotebook_isset = YES;
  __serviceCreated = serviceCreated;
  __serviceCreated_isset = YES;
  __serviceUpdated = serviceUpdated;
  __serviceUpdated_isset = YES;
  __publishing = [publishing retain_stub];
  __publishing_isset = YES;
  __published = published;
  __published_isset = YES;
  __stack = [stack retain_stub];
  __stack_isset = YES;
  __sharedNotebookIds = [sharedNotebookIds retain_stub];
  __sharedNotebookIds_isset = YES;
  __sharedNotebooks = [sharedNotebooks retain_stub];
  __sharedNotebooks_isset = YES;
  __businessNotebook = [businessNotebook retain_stub];
  __businessNotebook_isset = YES;
  __contact = [contact retain_stub];
  __contact_isset = YES;
  __restrictions = [restrictions retain_stub];
  __restrictions_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"guid"])
  {
    __guid = [[decoder decodeObjectForKey: @"guid"] retain_stub];
    __guid_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"updateSequenceNum"])
  {
    __updateSequenceNum = [decoder decodeInt32ForKey: @"updateSequenceNum"];
    __updateSequenceNum_isset = YES;
  }
  if ([decoder containsValueForKey: @"defaultNotebook"])
  {
    __defaultNotebook = [decoder decodeBoolForKey: @"defaultNotebook"];
    __defaultNotebook_isset = YES;
  }
  if ([decoder containsValueForKey: @"serviceCreated"])
  {
    __serviceCreated = [decoder decodeInt64ForKey: @"serviceCreated"];
    __serviceCreated_isset = YES;
  }
  if ([decoder containsValueForKey: @"serviceUpdated"])
  {
    __serviceUpdated = [decoder decodeInt64ForKey: @"serviceUpdated"];
    __serviceUpdated_isset = YES;
  }
  if ([decoder containsValueForKey: @"publishing"])
  {
    __publishing = [[decoder decodeObjectForKey: @"publishing"] retain_stub];
    __publishing_isset = YES;
  }
  if ([decoder containsValueForKey: @"published"])
  {
    __published = [decoder decodeBoolForKey: @"published"];
    __published_isset = YES;
  }
  if ([decoder containsValueForKey: @"stack"])
  {
    __stack = [[decoder decodeObjectForKey: @"stack"] retain_stub];
    __stack_isset = YES;
  }
  if ([decoder containsValueForKey: @"sharedNotebookIds"])
  {
    __sharedNotebookIds = [[decoder decodeObjectForKey: @"sharedNotebookIds"] retain_stub];
    __sharedNotebookIds_isset = YES;
  }
  if ([decoder containsValueForKey: @"sharedNotebooks"])
  {
    __sharedNotebooks = [[decoder decodeObjectForKey: @"sharedNotebooks"] retain_stub];
    __sharedNotebooks_isset = YES;
  }
  if ([decoder containsValueForKey: @"businessNotebook"])
  {
    __businessNotebook = [[decoder decodeObjectForKey: @"businessNotebook"] retain_stub];
    __businessNotebook_isset = YES;
  }
  if ([decoder containsValueForKey: @"contact"])
  {
    __contact = [[decoder decodeObjectForKey: @"contact"] retain_stub];
    __contact_isset = YES;
  }
  if ([decoder containsValueForKey: @"restrictions"])
  {
    __restrictions = [[decoder decodeObjectForKey: @"restrictions"] retain_stub];
    __restrictions_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__guid_isset)
  {
    [encoder encodeObject: __guid forKey: @"guid"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__updateSequenceNum_isset)
  {
    [encoder encodeInt32: __updateSequenceNum forKey: @"updateSequenceNum"];
  }
  if (__defaultNotebook_isset)
  {
    [encoder encodeBool: __defaultNotebook forKey: @"defaultNotebook"];
  }
  if (__serviceCreated_isset)
  {
    [encoder encodeInt64: __serviceCreated forKey: @"serviceCreated"];
  }
  if (__serviceUpdated_isset)
  {
    [encoder encodeInt64: __serviceUpdated forKey: @"serviceUpdated"];
  }
  if (__publishing_isset)
  {
    [encoder encodeObject: __publishing forKey: @"publishing"];
  }
  if (__published_isset)
  {
    [encoder encodeBool: __published forKey: @"published"];
  }
  if (__stack_isset)
  {
    [encoder encodeObject: __stack forKey: @"stack"];
  }
  if (__sharedNotebookIds_isset)
  {
    [encoder encodeObject: __sharedNotebookIds forKey: @"sharedNotebookIds"];
  }
  if (__sharedNotebooks_isset)
  {
    [encoder encodeObject: __sharedNotebooks forKey: @"sharedNotebooks"];
  }
  if (__businessNotebook_isset)
  {
    [encoder encodeObject: __businessNotebook forKey: @"businessNotebook"];
  }
  if (__contact_isset)
  {
    [encoder encodeObject: __contact forKey: @"contact"];
  }
  if (__restrictions_isset)
  {
    [encoder encodeObject: __restrictions forKey: @"restrictions"];
  }
}

- (void) dealloc
{
  [__guid release_stub];
  [__name release_stub];
  [__publishing release_stub];
  [__stack release_stub];
  [__sharedNotebookIds release_stub];
  [__sharedNotebooks release_stub];
  [__businessNotebook release_stub];
  [__contact release_stub];
  [__restrictions release_stub];
  [super dealloc_stub];
}

- (NSString *) guid {
  return [[__guid retain_stub] autorelease_stub];
}

- (void) setGuid: (NSString *) guid {
  [guid retain_stub];
  [__guid release_stub];
  __guid = guid;
  __guid_isset = YES;
}

- (BOOL) guidIsSet {
  return __guid_isset;
}

- (void) unsetGuid {
  [__guid release_stub];
  __guid = nil;
  __guid_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (int32_t) updateSequenceNum {
  return __updateSequenceNum;
}

- (void) setUpdateSequenceNum: (int32_t) updateSequenceNum {
  __updateSequenceNum = updateSequenceNum;
  __updateSequenceNum_isset = YES;
}

- (BOOL) updateSequenceNumIsSet {
  return __updateSequenceNum_isset;
}

- (void) unsetUpdateSequenceNum {
  __updateSequenceNum_isset = NO;
}

- (BOOL) defaultNotebook {
  return __defaultNotebook;
}

- (void) setDefaultNotebook: (BOOL) defaultNotebook {
  __defaultNotebook = defaultNotebook;
  __defaultNotebook_isset = YES;
}

- (BOOL) defaultNotebookIsSet {
  return __defaultNotebook_isset;
}

- (void) unsetDefaultNotebook {
  __defaultNotebook_isset = NO;
}

- (int64_t) serviceCreated {
  return __serviceCreated;
}

- (void) setServiceCreated: (int64_t) serviceCreated {
  __serviceCreated = serviceCreated;
  __serviceCreated_isset = YES;
}

- (BOOL) serviceCreatedIsSet {
  return __serviceCreated_isset;
}

- (void) unsetServiceCreated {
  __serviceCreated_isset = NO;
}

- (int64_t) serviceUpdated {
  return __serviceUpdated;
}

- (void) setServiceUpdated: (int64_t) serviceUpdated {
  __serviceUpdated = serviceUpdated;
  __serviceUpdated_isset = YES;
}

- (BOOL) serviceUpdatedIsSet {
  return __serviceUpdated_isset;
}

- (void) unsetServiceUpdated {
  __serviceUpdated_isset = NO;
}

- (EDAMPublishing *) publishing {
  return [[__publishing retain_stub] autorelease_stub];
}

- (void) setPublishing: (EDAMPublishing *) publishing {
  [publishing retain_stub];
  [__publishing release_stub];
  __publishing = publishing;
  __publishing_isset = YES;
}

- (BOOL) publishingIsSet {
  return __publishing_isset;
}

- (void) unsetPublishing {
  [__publishing release_stub];
  __publishing = nil;
  __publishing_isset = NO;
}

- (BOOL) published {
  return __published;
}

- (void) setPublished: (BOOL) published {
  __published = published;
  __published_isset = YES;
}

- (BOOL) publishedIsSet {
  return __published_isset;
}

- (void) unsetPublished {
  __published_isset = NO;
}

- (NSString *) stack {
  return [[__stack retain_stub] autorelease_stub];
}

- (void) setStack: (NSString *) stack {
  [stack retain_stub];
  [__stack release_stub];
  __stack = stack;
  __stack_isset = YES;
}

- (BOOL) stackIsSet {
  return __stack_isset;
}

- (void) unsetStack {
  [__stack release_stub];
  __stack = nil;
  __stack_isset = NO;
}

- (NSMutableArray *) sharedNotebookIds {
  return [[__sharedNotebookIds retain_stub] autorelease_stub];
}

- (void) setSharedNotebookIds: (NSMutableArray *) sharedNotebookIds {
  [sharedNotebookIds retain_stub];
  [__sharedNotebookIds release_stub];
  __sharedNotebookIds = sharedNotebookIds;
  __sharedNotebookIds_isset = YES;
}

- (BOOL) sharedNotebookIdsIsSet {
  return __sharedNotebookIds_isset;
}

- (void) unsetSharedNotebookIds {
  [__sharedNotebookIds release_stub];
  __sharedNotebookIds = nil;
  __sharedNotebookIds_isset = NO;
}

- (NSMutableArray *) sharedNotebooks {
  return [[__sharedNotebooks retain_stub] autorelease_stub];
}

- (void) setSharedNotebooks: (NSMutableArray *) sharedNotebooks {
  [sharedNotebooks retain_stub];
  [__sharedNotebooks release_stub];
  __sharedNotebooks = sharedNotebooks;
  __sharedNotebooks_isset = YES;
}

- (BOOL) sharedNotebooksIsSet {
  return __sharedNotebooks_isset;
}

- (void) unsetSharedNotebooks {
  [__sharedNotebooks release_stub];
  __sharedNotebooks = nil;
  __sharedNotebooks_isset = NO;
}

- (EDAMBusinessNotebook *) businessNotebook {
  return [[__businessNotebook retain_stub] autorelease_stub];
}

- (void) setBusinessNotebook: (EDAMBusinessNotebook *) businessNotebook {
  [businessNotebook retain_stub];
  [__businessNotebook release_stub];
  __businessNotebook = businessNotebook;
  __businessNotebook_isset = YES;
}

- (BOOL) businessNotebookIsSet {
  return __businessNotebook_isset;
}

- (void) unsetBusinessNotebook {
  [__businessNotebook release_stub];
  __businessNotebook = nil;
  __businessNotebook_isset = NO;
}

- (EDAMUser *) contact {
  return [[__contact retain_stub] autorelease_stub];
}

- (void) setContact: (EDAMUser *) contact {
  [contact retain_stub];
  [__contact release_stub];
  __contact = contact;
  __contact_isset = YES;
}

- (BOOL) contactIsSet {
  return __contact_isset;
}

- (void) unsetContact {
  [__contact release_stub];
  __contact = nil;
  __contact_isset = NO;
}

- (EDAMNotebookRestrictions *) restrictions {
  return [[__restrictions retain_stub] autorelease_stub];
}

- (void) setRestrictions: (EDAMNotebookRestrictions *) restrictions {
  [restrictions retain_stub];
  [__restrictions release_stub];
  __restrictions = restrictions;
  __restrictions_isset = YES;
}

- (BOOL) restrictionsIsSet {
  return __restrictions_isset;
}

- (void) unsetRestrictions {
  [__restrictions release_stub];
  __restrictions = nil;
  __restrictions_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGuid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setUpdateSequenceNum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setDefaultNotebook: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setServiceCreated: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setServiceUpdated: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRUCT) {
          EDAMPublishing *fieldValue = [[EDAMPublishing alloc] init];
          [fieldValue read: inProtocol];
          [self setPublishing: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setPublished: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStack: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_LIST) {
          int _size42;
          [inProtocol readListBeginReturningElementType: NULL size: &_size42];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size42];
          int _i43;
          for (_i43 = 0; _i43 < _size42; ++_i43)
          {
            int64_t _elem44 = [inProtocol readI64];
            [fieldValue addObject: [NSNumber numberWithLongLong: _elem44]];
          }
          [inProtocol readListEnd];
          [self setSharedNotebookIds: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_LIST) {
          int _size45;
          [inProtocol readListBeginReturningElementType: NULL size: &_size45];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size45];
          int _i46;
          for (_i46 = 0; _i46 < _size45; ++_i46)
          {
            EDAMSharedNotebook *_elem47 = [[EDAMSharedNotebook alloc] init];
            [_elem47 read: inProtocol];
            [fieldValue addObject: _elem47];
            [_elem47 release_stub];
          }
          [inProtocol readListEnd];
          [self setSharedNotebooks: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_STRUCT) {
          EDAMBusinessNotebook *fieldValue = [[EDAMBusinessNotebook alloc] init];
          [fieldValue read: inProtocol];
          [self setBusinessNotebook: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_STRUCT) {
          EDAMUser *fieldValue = [[EDAMUser alloc] init];
          [fieldValue read: inProtocol];
          [self setContact: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_STRUCT) {
          EDAMNotebookRestrictions *fieldValue = [[EDAMNotebookRestrictions alloc] init];
          [fieldValue read: inProtocol];
          [self setRestrictions: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Notebook"];
  if (__guid_isset) {
    if (__guid != nil) {
      [outProtocol writeFieldBeginWithName: @"guid" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __guid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__updateSequenceNum_isset) {
    [outProtocol writeFieldBeginWithName: @"updateSequenceNum" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __updateSequenceNum];
    [outProtocol writeFieldEnd];
  }
  if (__defaultNotebook_isset) {
    [outProtocol writeFieldBeginWithName: @"defaultNotebook" type: TType_BOOL fieldID: 6];
    [outProtocol writeBool: __defaultNotebook];
    [outProtocol writeFieldEnd];
  }
  if (__serviceCreated_isset) {
    [outProtocol writeFieldBeginWithName: @"serviceCreated" type: TType_I64 fieldID: 7];
    [outProtocol writeI64: __serviceCreated];
    [outProtocol writeFieldEnd];
  }
  if (__serviceUpdated_isset) {
    [outProtocol writeFieldBeginWithName: @"serviceUpdated" type: TType_I64 fieldID: 8];
    [outProtocol writeI64: __serviceUpdated];
    [outProtocol writeFieldEnd];
  }
  if (__publishing_isset) {
    if (__publishing != nil) {
      [outProtocol writeFieldBeginWithName: @"publishing" type: TType_STRUCT fieldID: 10];
      [__publishing write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__published_isset) {
    [outProtocol writeFieldBeginWithName: @"published" type: TType_BOOL fieldID: 11];
    [outProtocol writeBool: __published];
    [outProtocol writeFieldEnd];
  }
  if (__stack_isset) {
    if (__stack != nil) {
      [outProtocol writeFieldBeginWithName: @"stack" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __stack];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sharedNotebookIds_isset) {
    if (__sharedNotebookIds != nil) {
      [outProtocol writeFieldBeginWithName: @"sharedNotebookIds" type: TType_LIST fieldID: 13];
      {
        [outProtocol writeListBeginWithElementType: TType_I64 size: [__sharedNotebookIds count]];
        int i49;
        for (i49 = 0; i49 < [__sharedNotebookIds count]; i49++)
        {
          [outProtocol writeI64: [[__sharedNotebookIds objectAtIndex: i49] longLongValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__sharedNotebooks_isset) {
    if (__sharedNotebooks != nil) {
      [outProtocol writeFieldBeginWithName: @"sharedNotebooks" type: TType_LIST fieldID: 14];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__sharedNotebooks count]];
        int i51;
        for (i51 = 0; i51 < [__sharedNotebooks count]; i51++)
        {
          [[__sharedNotebooks objectAtIndex: i51] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__businessNotebook_isset) {
    if (__businessNotebook != nil) {
      [outProtocol writeFieldBeginWithName: @"businessNotebook" type: TType_STRUCT fieldID: 15];
      [__businessNotebook write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__contact_isset) {
    if (__contact != nil) {
      [outProtocol writeFieldBeginWithName: @"contact" type: TType_STRUCT fieldID: 16];
      [__contact write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__restrictions_isset) {
    if (__restrictions != nil) {
      [outProtocol writeFieldBeginWithName: @"restrictions" type: TType_STRUCT fieldID: 17];
      [__restrictions write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Notebook("];
  [ms appendString: @"guid:"];
  [ms appendFormat: @"\"%@\"", __guid];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",updateSequenceNum:"];
  [ms appendFormat: @"%i", __updateSequenceNum];
  [ms appendString: @",defaultNotebook:"];
  [ms appendFormat: @"%i", __defaultNotebook];
  [ms appendString: @",serviceCreated:"];
  [ms appendFormat: @"%qi", __serviceCreated];
  [ms appendString: @",serviceUpdated:"];
  [ms appendFormat: @"%qi", __serviceUpdated];
  [ms appendString: @",publishing:"];
  [ms appendFormat: @"%@", __publishing];
  [ms appendString: @",published:"];
  [ms appendFormat: @"%i", __published];
  [ms appendString: @",stack:"];
  [ms appendFormat: @"\"%@\"", __stack];
  [ms appendString: @",sharedNotebookIds:"];
  [ms appendFormat: @"%@", __sharedNotebookIds];
  [ms appendString: @",sharedNotebooks:"];
  [ms appendFormat: @"%@", __sharedNotebooks];
  [ms appendString: @",businessNotebook:"];
  [ms appendFormat: @"%@", __businessNotebook];
  [ms appendString: @",contact:"];
  [ms appendFormat: @"%@", __contact];
  [ms appendString: @",restrictions:"];
  [ms appendFormat: @"%@", __restrictions];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation EDAMLinkedNotebook

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithShareName: (NSString *) shareName username: (NSString *) username shardId: (NSString *) shardId shareKey: (NSString *) shareKey uri: (NSString *) uri guid: (EDAMGuid) guid updateSequenceNum: (int32_t) updateSequenceNum noteStoreUrl: (NSString *) noteStoreUrl webApiUrlPrefix: (NSString *) webApiUrlPrefix stack: (NSString *) stack businessId: (int32_t) businessId
{
  self = [super init];
  __shareName = [shareName retain_stub];
  __shareName_isset = YES;
  __username = [username retain_stub];
  __username_isset = YES;
  __shardId = [shardId retain_stub];
  __shardId_isset = YES;
  __shareKey = [shareKey retain_stub];
  __shareKey_isset = YES;
  __uri = [uri retain_stub];
  __uri_isset = YES;
  __guid = [guid retain_stub];
  __guid_isset = YES;
  __updateSequenceNum = updateSequenceNum;
  __updateSequenceNum_isset = YES;
  __noteStoreUrl = [noteStoreUrl retain_stub];
  __noteStoreUrl_isset = YES;
  __webApiUrlPrefix = [webApiUrlPrefix retain_stub];
  __webApiUrlPrefix_isset = YES;
  __stack = [stack retain_stub];
  __stack_isset = YES;
  __businessId = businessId;
  __businessId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"shareName"])
  {
    __shareName = [[decoder decodeObjectForKey: @"shareName"] retain_stub];
    __shareName_isset = YES;
  }
  if ([decoder containsValueForKey: @"username"])
  {
    __username = [[decoder decodeObjectForKey: @"username"] retain_stub];
    __username_isset = YES;
  }
  if ([decoder containsValueForKey: @"shardId"])
  {
    __shardId = [[decoder decodeObjectForKey: @"shardId"] retain_stub];
    __shardId_isset = YES;
  }
  if ([decoder containsValueForKey: @"shareKey"])
  {
    __shareKey = [[decoder decodeObjectForKey: @"shareKey"] retain_stub];
    __shareKey_isset = YES;
  }
  if ([decoder containsValueForKey: @"uri"])
  {
    __uri = [[decoder decodeObjectForKey: @"uri"] retain_stub];
    __uri_isset = YES;
  }
  if ([decoder containsValueForKey: @"guid"])
  {
    __guid = [[decoder decodeObjectForKey: @"guid"] retain_stub];
    __guid_isset = YES;
  }
  if ([decoder containsValueForKey: @"updateSequenceNum"])
  {
    __updateSequenceNum = [decoder decodeInt32ForKey: @"updateSequenceNum"];
    __updateSequenceNum_isset = YES;
  }
  if ([decoder containsValueForKey: @"noteStoreUrl"])
  {
    __noteStoreUrl = [[decoder decodeObjectForKey: @"noteStoreUrl"] retain_stub];
    __noteStoreUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"webApiUrlPrefix"])
  {
    __webApiUrlPrefix = [[decoder decodeObjectForKey: @"webApiUrlPrefix"] retain_stub];
    __webApiUrlPrefix_isset = YES;
  }
  if ([decoder containsValueForKey: @"stack"])
  {
    __stack = [[decoder decodeObjectForKey: @"stack"] retain_stub];
    __stack_isset = YES;
  }
  if ([decoder containsValueForKey: @"businessId"])
  {
    __businessId = [decoder decodeInt32ForKey: @"businessId"];
    __businessId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__shareName_isset)
  {
    [encoder encodeObject: __shareName forKey: @"shareName"];
  }
  if (__username_isset)
  {
    [encoder encodeObject: __username forKey: @"username"];
  }
  if (__shardId_isset)
  {
    [encoder encodeObject: __shardId forKey: @"shardId"];
  }
  if (__shareKey_isset)
  {
    [encoder encodeObject: __shareKey forKey: @"shareKey"];
  }
  if (__uri_isset)
  {
    [encoder encodeObject: __uri forKey: @"uri"];
  }
  if (__guid_isset)
  {
    [encoder encodeObject: __guid forKey: @"guid"];
  }
  if (__updateSequenceNum_isset)
  {
    [encoder encodeInt32: __updateSequenceNum forKey: @"updateSequenceNum"];
  }
  if (__noteStoreUrl_isset)
  {
    [encoder encodeObject: __noteStoreUrl forKey: @"noteStoreUrl"];
  }
  if (__webApiUrlPrefix_isset)
  {
    [encoder encodeObject: __webApiUrlPrefix forKey: @"webApiUrlPrefix"];
  }
  if (__stack_isset)
  {
    [encoder encodeObject: __stack forKey: @"stack"];
  }
  if (__businessId_isset)
  {
    [encoder encodeInt32: __businessId forKey: @"businessId"];
  }
}

- (void) dealloc
{
  [__shareName release_stub];
  [__username release_stub];
  [__shardId release_stub];
  [__shareKey release_stub];
  [__uri release_stub];
  [__guid release_stub];
  [__noteStoreUrl release_stub];
  [__webApiUrlPrefix release_stub];
  [__stack release_stub];
  [super dealloc_stub];
}

- (NSString *) shareName {
  return [[__shareName retain_stub] autorelease_stub];
}

- (void) setShareName: (NSString *) shareName {
  [shareName retain_stub];
  [__shareName release_stub];
  __shareName = shareName;
  __shareName_isset = YES;
}

- (BOOL) shareNameIsSet {
  return __shareName_isset;
}

- (void) unsetShareName {
  [__shareName release_stub];
  __shareName = nil;
  __shareName_isset = NO;
}

- (NSString *) username {
  return [[__username retain_stub] autorelease_stub];
}

- (void) setUsername: (NSString *) username {
  [username retain_stub];
  [__username release_stub];
  __username = username;
  __username_isset = YES;
}

- (BOOL) usernameIsSet {
  return __username_isset;
}

- (void) unsetUsername {
  [__username release_stub];
  __username = nil;
  __username_isset = NO;
}

- (NSString *) shardId {
  return [[__shardId retain_stub] autorelease_stub];
}

- (void) setShardId: (NSString *) shardId {
  [shardId retain_stub];
  [__shardId release_stub];
  __shardId = shardId;
  __shardId_isset = YES;
}

- (BOOL) shardIdIsSet {
  return __shardId_isset;
}

- (void) unsetShardId {
  [__shardId release_stub];
  __shardId = nil;
  __shardId_isset = NO;
}

- (NSString *) shareKey {
  return [[__shareKey retain_stub] autorelease_stub];
}

- (void) setShareKey: (NSString *) shareKey {
  [shareKey retain_stub];
  [__shareKey release_stub];
  __shareKey = shareKey;
  __shareKey_isset = YES;
}

- (BOOL) shareKeyIsSet {
  return __shareKey_isset;
}

- (void) unsetShareKey {
  [__shareKey release_stub];
  __shareKey = nil;
  __shareKey_isset = NO;
}

- (NSString *) uri {
  return [[__uri retain_stub] autorelease_stub];
}

- (void) setUri: (NSString *) uri {
  [uri retain_stub];
  [__uri release_stub];
  __uri = uri;
  __uri_isset = YES;
}

- (BOOL) uriIsSet {
  return __uri_isset;
}

- (void) unsetUri {
  [__uri release_stub];
  __uri = nil;
  __uri_isset = NO;
}

- (NSString *) guid {
  return [[__guid retain_stub] autorelease_stub];
}

- (void) setGuid: (NSString *) guid {
  [guid retain_stub];
  [__guid release_stub];
  __guid = guid;
  __guid_isset = YES;
}

- (BOOL) guidIsSet {
  return __guid_isset;
}

- (void) unsetGuid {
  [__guid release_stub];
  __guid = nil;
  __guid_isset = NO;
}

- (int32_t) updateSequenceNum {
  return __updateSequenceNum;
}

- (void) setUpdateSequenceNum: (int32_t) updateSequenceNum {
  __updateSequenceNum = updateSequenceNum;
  __updateSequenceNum_isset = YES;
}

- (BOOL) updateSequenceNumIsSet {
  return __updateSequenceNum_isset;
}

- (void) unsetUpdateSequenceNum {
  __updateSequenceNum_isset = NO;
}

- (NSString *) noteStoreUrl {
  return [[__noteStoreUrl retain_stub] autorelease_stub];
}

- (void) setNoteStoreUrl: (NSString *) noteStoreUrl {
  [noteStoreUrl retain_stub];
  [__noteStoreUrl release_stub];
  __noteStoreUrl = noteStoreUrl;
  __noteStoreUrl_isset = YES;
}

- (BOOL) noteStoreUrlIsSet {
  return __noteStoreUrl_isset;
}

- (void) unsetNoteStoreUrl {
  [__noteStoreUrl release_stub];
  __noteStoreUrl = nil;
  __noteStoreUrl_isset = NO;
}

- (NSString *) webApiUrlPrefix {
  return [[__webApiUrlPrefix retain_stub] autorelease_stub];
}

- (void) setWebApiUrlPrefix: (NSString *) webApiUrlPrefix {
  [webApiUrlPrefix retain_stub];
  [__webApiUrlPrefix release_stub];
  __webApiUrlPrefix = webApiUrlPrefix;
  __webApiUrlPrefix_isset = YES;
}

- (BOOL) webApiUrlPrefixIsSet {
  return __webApiUrlPrefix_isset;
}

- (void) unsetWebApiUrlPrefix {
  [__webApiUrlPrefix release_stub];
  __webApiUrlPrefix = nil;
  __webApiUrlPrefix_isset = NO;
}

- (NSString *) stack {
  return [[__stack retain_stub] autorelease_stub];
}

- (void) setStack: (NSString *) stack {
  [stack retain_stub];
  [__stack release_stub];
  __stack = stack;
  __stack_isset = YES;
}

- (BOOL) stackIsSet {
  return __stack_isset;
}

- (void) unsetStack {
  [__stack release_stub];
  __stack = nil;
  __stack_isset = NO;
}

- (int32_t) businessId {
  return __businessId;
}

- (void) setBusinessId: (int32_t) businessId {
  __businessId = businessId;
  __businessId_isset = YES;
}

- (BOOL) businessIdIsSet {
  return __businessId_isset;
}

- (void) unsetBusinessId {
  __businessId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setShareName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUsername: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setShardId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setShareKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUri: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGuid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setUpdateSequenceNum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNoteStoreUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setWebApiUrlPrefix: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStack: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setBusinessId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LinkedNotebook"];
  if (__shareName_isset) {
    if (__shareName != nil) {
      [outProtocol writeFieldBeginWithName: @"shareName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __shareName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__username_isset) {
    if (__username != nil) {
      [outProtocol writeFieldBeginWithName: @"username" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __username];
      [outProtocol writeFieldEnd];
    }
  }
  if (__shardId_isset) {
    if (__shardId != nil) {
      [outProtocol writeFieldBeginWithName: @"shardId" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __shardId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__shareKey_isset) {
    if (__shareKey != nil) {
      [outProtocol writeFieldBeginWithName: @"shareKey" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __shareKey];
      [outProtocol writeFieldEnd];
    }
  }
  if (__uri_isset) {
    if (__uri != nil) {
      [outProtocol writeFieldBeginWithName: @"uri" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __uri];
      [outProtocol writeFieldEnd];
    }
  }
  if (__guid_isset) {
    if (__guid != nil) {
      [outProtocol writeFieldBeginWithName: @"guid" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __guid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__updateSequenceNum_isset) {
    [outProtocol writeFieldBeginWithName: @"updateSequenceNum" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __updateSequenceNum];
    [outProtocol writeFieldEnd];
  }
  if (__noteStoreUrl_isset) {
    if (__noteStoreUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"noteStoreUrl" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __noteStoreUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__webApiUrlPrefix_isset) {
    if (__webApiUrlPrefix != nil) {
      [outProtocol writeFieldBeginWithName: @"webApiUrlPrefix" type: TType_STRING fieldID: 10];
      [outProtocol writeString: __webApiUrlPrefix];
      [outProtocol writeFieldEnd];
    }
  }
  if (__stack_isset) {
    if (__stack != nil) {
      [outProtocol writeFieldBeginWithName: @"stack" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __stack];
      [outProtocol writeFieldEnd];
    }
  }
  if (__businessId_isset) {
    [outProtocol writeFieldBeginWithName: @"businessId" type: TType_I32 fieldID: 12];
    [outProtocol writeI32: __businessId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"LinkedNotebook("];
  [ms appendString: @"shareName:"];
  [ms appendFormat: @"\"%@\"", __shareName];
  [ms appendString: @",username:"];
  [ms appendFormat: @"\"%@\"", __username];
  [ms appendString: @",shardId:"];
  [ms appendFormat: @"\"%@\"", __shardId];
  [ms appendString: @",shareKey:"];
  [ms appendFormat: @"\"%@\"", __shareKey];
  [ms appendString: @",uri:"];
  [ms appendFormat: @"\"%@\"", __uri];
  [ms appendString: @",guid:"];
  [ms appendFormat: @"\"%@\"", __guid];
  [ms appendString: @",updateSequenceNum:"];
  [ms appendFormat: @"%i", __updateSequenceNum];
  [ms appendString: @",noteStoreUrl:"];
  [ms appendFormat: @"\"%@\"", __noteStoreUrl];
  [ms appendString: @",webApiUrlPrefix:"];
  [ms appendFormat: @"\"%@\"", __webApiUrlPrefix];
  [ms appendString: @",stack:"];
  [ms appendFormat: @"\"%@\"", __stack];
  [ms appendString: @",businessId:"];
  [ms appendFormat: @"%i", __businessId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation EDAMNotebookDescriptor

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithGuid: (EDAMGuid) guid notebookDisplayName: (NSString *) notebookDisplayName contactName: (NSString *) contactName hasSharedNotebook: (BOOL) hasSharedNotebook joinedUserCount: (int32_t) joinedUserCount
{
  self = [super init];
  __guid = [guid retain_stub];
  __guid_isset = YES;
  __notebookDisplayName = [notebookDisplayName retain_stub];
  __notebookDisplayName_isset = YES;
  __contactName = [contactName retain_stub];
  __contactName_isset = YES;
  __hasSharedNotebook = hasSharedNotebook;
  __hasSharedNotebook_isset = YES;
  __joinedUserCount = joinedUserCount;
  __joinedUserCount_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"guid"])
  {
    __guid = [[decoder decodeObjectForKey: @"guid"] retain_stub];
    __guid_isset = YES;
  }
  if ([decoder containsValueForKey: @"notebookDisplayName"])
  {
    __notebookDisplayName = [[decoder decodeObjectForKey: @"notebookDisplayName"] retain_stub];
    __notebookDisplayName_isset = YES;
  }
  if ([decoder containsValueForKey: @"contactName"])
  {
    __contactName = [[decoder decodeObjectForKey: @"contactName"] retain_stub];
    __contactName_isset = YES;
  }
  if ([decoder containsValueForKey: @"hasSharedNotebook"])
  {
    __hasSharedNotebook = [decoder decodeBoolForKey: @"hasSharedNotebook"];
    __hasSharedNotebook_isset = YES;
  }
  if ([decoder containsValueForKey: @"joinedUserCount"])
  {
    __joinedUserCount = [decoder decodeInt32ForKey: @"joinedUserCount"];
    __joinedUserCount_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__guid_isset)
  {
    [encoder encodeObject: __guid forKey: @"guid"];
  }
  if (__notebookDisplayName_isset)
  {
    [encoder encodeObject: __notebookDisplayName forKey: @"notebookDisplayName"];
  }
  if (__contactName_isset)
  {
    [encoder encodeObject: __contactName forKey: @"contactName"];
  }
  if (__hasSharedNotebook_isset)
  {
    [encoder encodeBool: __hasSharedNotebook forKey: @"hasSharedNotebook"];
  }
  if (__joinedUserCount_isset)
  {
    [encoder encodeInt32: __joinedUserCount forKey: @"joinedUserCount"];
  }
}

- (void) dealloc
{
  [__guid release_stub];
  [__notebookDisplayName release_stub];
  [__contactName release_stub];
  [super dealloc_stub];
}

- (NSString *) guid {
  return [[__guid retain_stub] autorelease_stub];
}

- (void) setGuid: (NSString *) guid {
  [guid retain_stub];
  [__guid release_stub];
  __guid = guid;
  __guid_isset = YES;
}

- (BOOL) guidIsSet {
  return __guid_isset;
}

- (void) unsetGuid {
  [__guid release_stub];
  __guid = nil;
  __guid_isset = NO;
}

- (NSString *) notebookDisplayName {
  return [[__notebookDisplayName retain_stub] autorelease_stub];
}

- (void) setNotebookDisplayName: (NSString *) notebookDisplayName {
  [notebookDisplayName retain_stub];
  [__notebookDisplayName release_stub];
  __notebookDisplayName = notebookDisplayName;
  __notebookDisplayName_isset = YES;
}

- (BOOL) notebookDisplayNameIsSet {
  return __notebookDisplayName_isset;
}

- (void) unsetNotebookDisplayName {
  [__notebookDisplayName release_stub];
  __notebookDisplayName = nil;
  __notebookDisplayName_isset = NO;
}

- (NSString *) contactName {
  return [[__contactName retain_stub] autorelease_stub];
}

- (void) setContactName: (NSString *) contactName {
  [contactName retain_stub];
  [__contactName release_stub];
  __contactName = contactName;
  __contactName_isset = YES;
}

- (BOOL) contactNameIsSet {
  return __contactName_isset;
}

- (void) unsetContactName {
  [__contactName release_stub];
  __contactName = nil;
  __contactName_isset = NO;
}

- (BOOL) hasSharedNotebook {
  return __hasSharedNotebook;
}

- (void) setHasSharedNotebook: (BOOL) hasSharedNotebook {
  __hasSharedNotebook = hasSharedNotebook;
  __hasSharedNotebook_isset = YES;
}

- (BOOL) hasSharedNotebookIsSet {
  return __hasSharedNotebook_isset;
}

- (void) unsetHasSharedNotebook {
  __hasSharedNotebook_isset = NO;
}

- (int32_t) joinedUserCount {
  return __joinedUserCount;
}

- (void) setJoinedUserCount: (int32_t) joinedUserCount {
  __joinedUserCount = joinedUserCount;
  __joinedUserCount_isset = YES;
}

- (BOOL) joinedUserCountIsSet {
  return __joinedUserCount_isset;
}

- (void) unsetJoinedUserCount {
  __joinedUserCount_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGuid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNotebookDisplayName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setContactName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setHasSharedNotebook: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setJoinedUserCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"NotebookDescriptor"];
  if (__guid_isset) {
    if (__guid != nil) {
      [outProtocol writeFieldBeginWithName: @"guid" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __guid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__notebookDisplayName_isset) {
    if (__notebookDisplayName != nil) {
      [outProtocol writeFieldBeginWithName: @"notebookDisplayName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __notebookDisplayName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__contactName_isset) {
    if (__contactName != nil) {
      [outProtocol writeFieldBeginWithName: @"contactName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __contactName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hasSharedNotebook_isset) {
    [outProtocol writeFieldBeginWithName: @"hasSharedNotebook" type: TType_BOOL fieldID: 4];
    [outProtocol writeBool: __hasSharedNotebook];
    [outProtocol writeFieldEnd];
  }
  if (__joinedUserCount_isset) {
    [outProtocol writeFieldBeginWithName: @"joinedUserCount" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __joinedUserCount];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NotebookDescriptor("];
  [ms appendString: @"guid:"];
  [ms appendFormat: @"\"%@\"", __guid];
  [ms appendString: @",notebookDisplayName:"];
  [ms appendFormat: @"\"%@\"", __notebookDisplayName];
  [ms appendString: @",contactName:"];
  [ms appendFormat: @"\"%@\"", __contactName];
  [ms appendString: @",hasSharedNotebook:"];
  [ms appendFormat: @"%i", __hasSharedNotebook];
  [ms appendString: @",joinedUserCount:"];
  [ms appendFormat: @"%i", __joinedUserCount];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

